@using Microsoft.AspNetCore.Components.Forms
@using Watermark.Win.Models
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations

<MudDialog Style="min-width:50%;">
    <DialogContent>
        <MudButton FullWidth="true" OnClick="OpenAddControl" Variant="Variant.Filled" DisableElevation Size="Size.Small" Class="my-2">新增组件</MudButton>
        <MudTreeView T="string" Dense="true" Hover="true">
            @foreach (var container in mCanvas.Children)
            {
                <MudTreeViewItem Value="@(container.Name)" Expanded="true">
                    <BodyContent>
                        <div style="display: grid; grid-template-columns: 1fr auto; align-items: center; width: 100%">
                            <MudTextField @bind-Value="@container.Name" Label="名称" Required="true" Variant="Variant.Outlined" Margin="Margin.Dense" />
                            <div style="justify-self: end;">
                                @*<MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Medium" Color="Color.Inherit" />*@
                                <MudIconButton Icon="@Icons.Material.Filled.ArrowUpward" Size="Size.Medium" Color="Color.Inherit" OnClick="()=>Upward(container.ID)" />
                                <MudIconButton Icon="@Icons.Material.Filled.ArrowDownward" Size="Size.Medium" Color="Color.Inherit" OnClick="()=>Downward(container.ID)" />
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Medium" Color="Color.Error" OnClick="()=>mCanvas.Children.Remove(container) " />
                            </div>
                        </div>
                    </BodyContent>
                    <ChildContent>
                        @foreach (var comp in container.Controls)
                        {

                            @if (comp is WMContainer wc)
                            {
                                <MudTreeViewItem Value="@(wc.Name)">
                                    <BodyContent>
                                        <div style="display: grid; grid-template-columns: 1fr auto; align-items: center; width: 100%">
                                            <MudText Style="justify-self: start;">@($"{wc.Name} ({wc.ID.Substring(27)})")</MudText>
                                            <div style="justify-self: end;">
                                                <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Medium" Color="Color.Inherit" OnClick="()=>Move(wc, '2')" />
                                                <MudIconButton Icon="@Icons.Material.Filled.ArrowUpward" Size="Size.Medium" Color="Color.Inherit" OnClick="()=>Upward(wc.ID)" />
                                                <MudIconButton Icon="@Icons.Material.Filled.ArrowDownward" Size="Size.Medium" Color="Color.Inherit" OnClick="()=>Downward(wc.ID)" />
                                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Medium" Color="Color.Error" OnClick="()=>container.Controls.Remove(comp) " />
                                            </div>
                                        </div>
                                    </BodyContent>
                                    <ChildContent>
                                        @foreach (var cld_c in wc.Controls)
                                        {
                                            <MudTreeViewItem Value="@(cld_c.Name)">
                                                <BodyContent>
                                                    <div style="display: grid; grid-template-columns: 1fr auto; align-items: center; width: 100%">
                                                        <MudText Style="justify-self: start;">@($"{cld_c.Name} ({cld_c.ID.Substring(27)})")</MudText>
                                                        <div style="justify-self: end;">
                                                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Medium" Color="Color.Inherit" OnClick="()=>Move(cld_c, '1')" />
                                                            <MudIconButton Icon="@Icons.Material.Filled.ArrowUpward" Size="Size.Medium" Color="Color.Inherit" OnClick="()=>Upward(cld_c.ID)" />
                                                            <MudIconButton Icon="@Icons.Material.Filled.ArrowDownward" Size="Size.Medium" Color="Color.Inherit" OnClick="()=>Downward(cld_c.ID)" />
                                                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Medium" Color="Color.Error" OnClick="()=>wc.Controls.Remove(cld_c) " />
                                                        </div>
                                                    </div>
                                                </BodyContent>
                                            </MudTreeViewItem>
                                        }
                                    </ChildContent>

                                </MudTreeViewItem>
                            }
                            else
                            {
                                <MudTreeViewItem Value="@(comp.Name)">
                                    <BodyContent>
                                        <div style="display: grid; grid-template-columns: 1fr auto; align-items: center; width: 100%">
                                            <MudText Style="justify-self: start;">@($"{comp.Name} ({comp.ID.Substring(27)})")</MudText>
                                            <div style="justify-self: end;">
                                                <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Medium" Color="Color.Inherit" OnClick="() => Move(comp, '1')" />
                                                <MudIconButton Icon="@Icons.Material.Filled.ArrowUpward" Size="Size.Medium" Color="Color.Inherit" OnClick="()=>Upward(comp.ID)" />
                                                <MudIconButton Icon="@Icons.Material.Filled.ArrowDownward" Size="Size.Medium" Color="Color.Inherit" OnClick="()=>Downward(comp.ID)" />
                                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Medium" Color="Color.Error" OnClick="()=>container.Controls.Remove(comp) " />
                                            </div>
                                        </div>
                                    </BodyContent>
                                </MudTreeViewItem>
                            }

                        }

                    </ChildContent>
                </MudTreeViewItem>
            }

            <MudDialog @bind-IsVisible="MoveContainer" Options="dialogOptions">
                <TitleContent>
                    <MudText Typo="Typo.h6">
                        选择父级容器
                    </MudText>
                </TitleContent>
                <DialogContent>
                    @if (MoveContainer)
                    {
                        <MudTextField @bind-Value="@MoveConntainerCtrl.Name" Label="名称" Required="true" Variant="Variant.Outlined" Margin="Margin.Dense" />
                        <MudSelect @bind-Value="MoveForwardConntainerId" T="string" Label="父级容器" AnchorOrigin="Origin.BottomCenter">
                            @foreach (var c in MoveContainers)
                            {
                                <MudSelectItem Value="@(c.ID)">@(c.Name)</MudSelectItem>
                            }
                        </MudSelect>


                    }
                </DialogContent>
                <DialogActions>
                    <MudButton FullWidth="true" DisableElevation OnClick="MoveOK" Class="mx-4" Variant="Variant.Filled" Size="Size.Small">确定</MudButton>
                </DialogActions>
            </MudDialog>
            <MudDialog @bind-IsVisible="param.AddControl" Options="dialogOptions">
                <TitleContent>
                    <MudText Typo="Typo.h6">
                        新增组件
                    </MudText>
                </TitleContent>
                <DialogContent>
                    @if (param.AddControl)
                    {
                        <MudStack>
                            <MudRadioGroup @bind-Value="param.CtrlType">
                                <MudRadio Value="@CtrlEnum.Container" Color="Color.Primary" Dense="false">容器</MudRadio>
                                <MudRadio Value="@CtrlEnum.Image" Color="Color.Primary" Dense="true">图片</MudRadio>
                                <MudRadio Value="@CtrlEnum.Text" Color="Color.Primary" Dense="true">文本</MudRadio>
                                <MudRadio Value="@CtrlEnum.Line" Color="Color.Primary" Dense="true">线</MudRadio>
                            </MudRadioGroup>
                            <MudTextField @bind-Value="@param.CtrlName" Label="名称" Required="true" Variant="Variant.Outlined" Margin="Margin.Dense" />
                            <MudSelect @bind-Value="param.ParentContainerId" T="string" Label="父级容器" AnchorOrigin="Origin.BottomCenter" Required>
                                @foreach (var c in mContainers)
                                {
                                    <MudSelectItem Value="@(c.ID)">@(c.Name)</MudSelectItem>
                                }
                            </MudSelect>
                        </MudStack>
                    }
                </DialogContent>
                <DialogActions>
                    <MudButton FullWidth="true" DisableElevation OnClick="Add" Class="mx-4" Variant="Variant.Filled" Size="Size.Small">确定</MudButton>
                </DialogActions>
            </MudDialog>
        </MudTreeView>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" FullWidth="true" Variant="Variant.Filled" DisableElevation OnClick="Submit" Size="Size.Small" Class="mx-4">Ok</MudButton>
    </DialogActions>
</MudDialog>



@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }
    [Parameter]
    public WMCanvas mCanvas { get; set; }

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();
    private DialogOptions dialogOptions = new() { FullWidth = true };
    AddParam param;

    void Add()
    {
        if (string.IsNullOrEmpty(param.CtrlName) || string.IsNullOrEmpty(param.ParentContainerId))
        {
            return;
        }
        IWMControl control;
        if (param.CtrlType == CtrlEnum.Container)
        {
            control = new WMContainer();
        }
        else if (param.CtrlType == CtrlEnum.Image)
        {
            control = new WMLogo();
        }
        else if (param.CtrlType ==  CtrlEnum.Line)
        {
            control = new WMLine();
        }
        else
        {
            control = new WMText();
        }
        control.Name = param.CtrlName;
        control.Margin = new WMThickness(0);
        control.Percent = 70;

        if (param.ParentContainerId == "0")
        {
            if (param.CtrlType == CtrlEnum.Container)
                mCanvas.Children.Add((WMContainer)control);
        }
        else
        {
            var ct = mContainers.FirstOrDefault(c => c.ID == param.ParentContainerId);
            if (ct != null)
            {
                ct.Controls.Add(control);
            }
        }

        InitAllContainer();
    }

    List<WMContainer> mContainers;
    List<IWMControl> controls;

    void InitAllContainer()
    {
        param = new AddParam();
        mContainers = new List<WMContainer>();
        mContainers.Add(new WMContainer() { Name = "根节点", ID = "0" });
        mContainers.AddRange(mCanvas.Children);
        mCanvas.Children.Select(c => c.Controls.Where(x => x is WMContainer)).ToList().ForEach(z =>
        {
            if (z != null)
                z.ToList().ForEach(v => mContainers.Add((WMContainer)v));


        });
    }

    protected override void OnInitialized()
    {
        InitAllContainer();

        controls = new List<IWMControl>();
        mCanvas.Children.Select(c => c.Controls.Where(x => !(x is WMContainer))).ToList().ForEach(x =>
        {
            if (x != null)
            {
                controls.AddRange(x);
            }
        });
    }


    void Upward(string id)
    {
        foreach (var container in mCanvas.Children)
        {
            if (container.ID == id)
            {
                var idx = mCanvas.Children.IndexOf(container);
                if (idx > 0)
                {
                    Swap(mCanvas.Children, idx - 1, idx);
                }
                break;
            }
            foreach (var child in container.Controls)
            {
                if (child.ID == id)
                {
                    var wcIdx = container.Controls.IndexOf(child);
                    if (wcIdx > 0)
                    {
                        Swap(container.Controls, wcIdx - 1, wcIdx);
                    }
                    break;
                }
                if (child is WMContainer wc)
                {
                    foreach (var cc in wc.Controls)
                    {
                        if (cc.ID == id)
                        {
                            var ccIdx = wc.Controls.IndexOf(cc);
                            if (ccIdx > 0)
                            {
                                Swap(wc.Controls, ccIdx - 1, ccIdx);
                            }
                            break;
                        }
                    }
                }
            }
        }
    }

    void Downward(string id)
    {
        foreach (var container in mCanvas.Children)
        {
            if (container.ID == id)
            {
                var idx = mCanvas.Children.IndexOf(container);
                if (idx < mCanvas.Children.Count - 1)
                {
                    Swap(mCanvas.Children, idx, idx + 1);
                }
                break;
            }
            foreach (var child in container.Controls)
            {
                if (child.ID == id)
                {
                    var wcIdx = container.Controls.IndexOf(child);
                    if (wcIdx < container.Controls.Count - 1)
                    {
                        Swap(container.Controls, wcIdx, wcIdx + 1);
                    }
                    break;
                }
                if (child is WMContainer wc)
                {
                    foreach (var cc in wc.Controls)
                    {
                        if (cc.ID == id)
                        {
                            var ccIdx = wc.Controls.IndexOf(cc);
                            if (ccIdx < wc.Controls.Count - 1)
                            {
                                Swap(wc.Controls, ccIdx, ccIdx + 1);
                            }
                            break;
                        }
                    }
                }
            }
        }
    }
    void Move(IWMControl ctrl, char lv)
    {
        MoveContainer = true;
        MoveConntainerId = ctrl.ID;
        MoveConntainerCtrl = ctrl;
        MoveLv = lv;
        if(lv == '2')
        {
            MoveContainers = mCanvas.Children;
        }
        else
        {
            MoveContainers = new List<WMContainer>(mContainers.Where(c => c.ID != "0"));
        }
    }
    void MoveOK()
    {
        MoveContainer = false;
        if(MoveLv == '2') // container
        {
            WMContainer mContainer = null;
            foreach(var c in mCanvas.Children)
            {
                foreach(var child in c.Controls)
                {
                    if (child.ID == MoveConntainerCtrl.ID)
                    {
                        mContainer = child as WMContainer;
                        c.Controls.Remove(child);
                        break;
                    }
                }
            }

            if(mContainer != null)
            {
                var c = mCanvas.Children.Find(c => c.ID == MoveForwardConntainerId);
                if (c!=null)
                {
                    c.Controls.Add(mContainer);
                }
            }
        }
        else
        {
            IWMControl mCtrl = null;
            foreach (var c in mCanvas.Children)
            {
                foreach (var child in c.Controls)
                {
                    if (child.ID == MoveConntainerCtrl.ID)
                    {
                        mCtrl = child;
                        c.Controls.Remove(child);
                        break;
                    }
                    if(child is WMContainer wc)
                    {
                        foreach(var cc in wc.Controls)
                        {
                            if(cc.ID == MoveConntainerCtrl.ID)
                            {
                                mCtrl = cc;
                                wc.Controls.Remove(cc);
                                break;
                            }
                        }
                    }
                }
            }
            if(mCtrl != null)
            {
                var c = MoveContainers.FirstOrDefault(c=>c.ID == MoveForwardConntainerId);
                if (c!=null)
                {
                    c.Controls.Add(mCtrl);
                }
            }
        }
    }
    bool MoveContainer = false;
    IWMControl MoveConntainerCtrl;
    string MoveConntainerId;
    string MoveForwardConntainerId;
    char MoveLv;

    List<WMContainer> MoveContainers;
    void OpenAddControl()
    {
        param.AddControl = true; 
        StateHasChanged();
    }
    public enum CtrlEnum
    {
        Container,
        Line,
        Text,
        Image
    }

    public class AddParam
    {
        public bool AddControl { get; set; } = false;
        public CtrlEnum CtrlType { get; set; }
        public string CtrlName { get; set; }
        public string ParentContainerId { get; set; }
    }
    public static List<T> Swap<T>(List<T> list, int index1, int index2)
    {
        var temp = list[index1];
        list[index1] = list[index2];
        list[index2] = temp;
        return list;
    }
}