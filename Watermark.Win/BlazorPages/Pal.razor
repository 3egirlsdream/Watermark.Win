@using System.Net.Http
@using System.Net.Http.Json

@inject HttpClient http

<div Style="background:#F9FAFC;height:100vh;width:100%;">
    <div style="width:100%;height:calc(100% - 0px);line-height: calc(100vh - 0px); text-align: center;">
        <MudStack Row>
            <MudSelect @bind-Text="fromDT" Dense="true" T="string" Label="初始父代" Variant="Variant.Text">
                @foreach (var i in pallist)
                {
                    <MudSelectItem Value="@(i.Value)" />
                }
            </MudSelect>
            <MudSelect @bind-Text="fromMT" Dense="true" T="string" Label="初始母代" Variant="Variant.Text">
                @foreach (var i in pallist)
                {
                    <MudSelectItem Value="@(i.Value)" />
                }
            </MudSelect>
            <MudSelect @bind-Text="targetST" Dense="true" T="string" Label="目标帕鲁" Variant="Variant.Text">
                @foreach (var i in pallist)
                {
                    <MudSelectItem Value="@(i.Value)" />
                }
            </MudSelect>
        </MudStack>
        <MudButton FullWidth OnClick="init">计算</MudButton>
    </div>

    <MudOverlay Visible="@(System.Runtime.InteropServices.RuntimeInformation.OSDescription != "Browser")" DarkBackground="true" Absolute="false" ZIndex="99999">
        <MudPaper Style="width:520px;padding:10px 40px 10px 40px;">
            <MudStack>
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" Class="mt-7" />
                <MudText Typo="Typo.subtitle1" Color="Color.Dark" Style="margin:auto">
                    <b>加载中</b>
                </MudText>
            </MudStack>
        </MudPaper>
    </MudOverlay>
</div>




 @code{
    string fromMT, fromDT, targetST;
    List<SynthesisCombination> pals = new List<SynthesisCombination>();
    Dictionary<int, string> pallist = new Dictionary<int, string>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            pals = await http.GetFromJsonAsync<List<SynthesisCombination>>("txt.json");
            foreach(var p in pals)
            {
                pallist[p.MomId] = p.MomName;
            }
        }
    }


    List<List<int>> AllPath = new List<List<int>>();
    Dictionary<string, int> pairs = new Dictionary<string, int>();
    Dictionary<int, string> idToName = new Dictionary<int, string>();
    Dictionary<int, HashSet<string>> son2Parent = new Dictionary<int, HashSet<string>>();

    string pp = "";

    int? startM = null, startD = null, target = null;
    void init()
    {
        int? startM = pallist?.FirstOrDefault(x=>x.Value == fromMT).Key ?? null , 
        startD =  pallist?.FirstOrDefault(x => x.Value == fromDT).Key,
        target = pallist?.FirstOrDefault(x => x.Value == targetST).Key;
        foreach (var p in pals)
        {
            son2Parent[p.SonId] = new HashSet<string>();
        }

        foreach (var p in pals)
        {
            idToName[p.MomId] = p.MomName;
            if (p.DadId != p.MomId)
                son2Parent[p.SonId].Add(p.MomId + "-" + p.DadId);
        }

        FindParents(target.Value);
        Console.WriteLine("结束");
        Console.ReadLine();
    }


    void FindParents(int target)
    {
        var parents = son2Parent[target];
        foreach (var p in parents)
        {
            if (string.IsNullOrEmpty(p) || pairs.ContainsKey(pp)) return;
            var ps = p.Split('-');
            var m = Convert.ToInt32(ps[0] ?? "-1");
            var d = Convert.ToInt32(ps[1] ?? "-1");
            pp += $"子:{idToName[target]}=>父：{idToName[d]} 母：{idToName[m]} ";
            if (m < 0 || d < 0 || (m == target || d == target))
            {
                Console.WriteLine(pp);
                pairs[pp] = 1;
                return;
            };

            if (startD != null && startD != null && m == startM && d == startD)
            {
                Console.WriteLine(pp);
                pairs[pp] = 1;
                break;
            }
            else if (m == startM || d == startD)
            {
                Console.WriteLine(pp);
                pairs[pp] = 1;
                break;
            };
            if (m != d)
            {
                FindParents(Convert.ToInt32(m));
                FindParents(Convert.ToInt32(d));
            }
        }
    }












    public class SynthesisCombination
    {
        public SynthesisCombination(int momId, string momName, int dadId, string dadName, int sonId, string sonName)
        {
            MomId = momId;
            MomName = momName;
            DadId = dadId;
            DadName = dadName;
            SonId = sonId;
            SonName = sonName;
        }
        public int MomId { get; set; }
        public string MomName { get; set; }
        public int DadId { get; set; }
        public string DadName { get; set; }
        public int SonId { get; set; }
        public string SonName { get; set; }
    }

}




