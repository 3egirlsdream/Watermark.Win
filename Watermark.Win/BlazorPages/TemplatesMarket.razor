@using System.Diagnostics
@using System.IO
@using Watermark.Win.Models
@inject ISnackbar Snackbar
<style>
    .fullscreen {
        opacity: 0;
        position: absolute;
        right: 0px;
        top: 0px;
    }

        .fullscreen:hover {
            opacity: 1;
        }

    .fullscreen-icon {
    }

        .fullscreen-icon:hover
        .fullscreen {
            opacity: 1;
            cursor: pointer;
        }
</style>

<MudDialog Style="width:90%; height:90%;overflow-y:hidden">
    <DialogContent>
        <MudToolBar Style="padding:0px">
            <MudSpacer />
            <MudTextField @bind-Value="Search" Label="搜索" Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Default" @onkeydown="OnKeyDown" />
        </MudToolBar>
        <MudGrid Spacing="2" Justify="Justify.FlexStart" Style="height:calc(90vh - 70px);overflow-y:auto;padding:5px;">
            @if (ZipedTemplates != null)
            {
                <MudItem xs="12">
                    <MudText Typo="Typo.h4">推荐</MudText>
                </MudItem>
                @foreach (var t in ZipedTemplates.Where(x => !string.IsNullOrEmpty(Search) ? (x.WMCanvas.Name.Contains(Search) || x.WMCanvas.ID == Search) && x.Recommend : x.Recommend))
                {
                    <MudItem xs="2">
                        <MudPaper Elevation="25" Style="position:relative;" Class="fullscreen-icon">
                            <MudIconButton Icon="@Icons.Material.Filled.Fullscreen" Color="Color.Default" Size="Size.Small" Style="" Class="fullscreen" OnClick="@(()=> { FocusImageShow = true; FocusImage = t.Src; })" />
                            <div style="height:200px;display:flex;align-items:center;">
                                @if (!string.IsNullOrEmpty(t.Src))
                                {
                                    <MudImage Style="width:100%" Height="200" Src="@t.Src" ObjectFit="ObjectFit.Contain" />
                                }
                                else
                                {
                                    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" Style="margin-left:calc(50% - 20px)"/>
                                }
                            </div>
                            <div style="display:flex;align-items:center;">
                                <MudText Style="margin: auto;text-overflow:ellipsis;white-space:nowrap;overflow-x:hidden" Typo="Typo.subtitle1">
                                    @t.WMCanvas?.Name
                                </MudText>
                            </div>
                            <div Style="position:relative; height:20px; display: flex; align-items: center; text-overflow:ellipsis;white-space:nowrap;overflow-x:hidden">
                                <MudIcon Icon="@Icons.Material.Filled.Recommend" Color="Color.Warning" Size="Size.Small" />
                                @t.UserDisplayName
                            </div>
                            <div Style="position:relative; height:30px; display: flex; align-items: center;">
                                <MudIcon Icon="@Icons.Material.Filled.Download" Color="Color.Default" Style="cursor:pointer;" Size="Size.Small" />@t.DownloadTimes
                                <MudButton Size="Size.Small" Variant="Variant.Text" EndIcon="@Icons.Material.Filled.Download" Color="Color.Primary" Style="position:absolute;right:35px" IconSize="Size.Small" OnClick="()=>Download(t.WatermarkId)">下载</MudButton>
                                <MudIconButton Variant="Variant.Text" Color="Color.Secondary" Icon="@Icons.Material.Filled.Share" Style="position:absolute;right:10px" Size="Size.Small" OnClick="()=>Share(t.WatermarkId)"></MudIconButton>
                            </div>
                        </MudPaper>
                    </MudItem>
                }
            }
            @if (hottest != null)
            {
                <MudItem xs="12">
                    <MudText Typo="Typo.h4">最热门</MudText>
                </MudItem>
                @foreach (var t in hottest.Where(x => !string.IsNullOrEmpty(Search) ? (x.WMCanvas.Name.Contains(Search) || x.WMCanvas.ID == Search) : true))
                {
                    <MudItem xs="2">
                        <MudPaper Elevation="25" Style="position:relative;" Class="fullscreen-icon">
                            <MudIconButton Icon="@Icons.Material.Filled.Fullscreen" Color="Color.Default" Size="Size.Small" Style="" Class="fullscreen" OnClick="@(()=> { FocusImageShow = true; FocusImage = t.Src; })" />
                            <div style="height:200px;display:flex;align-items:center;">
                                @if (!string.IsNullOrEmpty(t.Src))
                                {
                                    <MudImage Style="width:100%" Height="200" Src="@t.Src" ObjectFit="ObjectFit.Contain" />
                                }
                                else
                                {
                                    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" Style="margin-left:calc(50% - 20px)" />
                                }
                            </div>
                            <div style="display:flex;align-items:center;">
                                <MudText Style="margin: auto; text-overflow: ellipsis; white-space: nowrap;overflow-x:hidden" Typo="Typo.subtitle1">
                                    @t.WMCanvas?.Name
                                </MudText>
                            </div>

                            <div Style="position:relative; height:20px; display: flex; align-items: center; text-overflow:ellipsis;white-space:nowrap;overflow-x:hidden">
                                @if (t.UserId == "0BECCA9A-6F10-4A88-8753-921195D08853" || t.UserId == "9DEBF7DC-F58C-4667-BACF-A6BFD18352EB")
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Verified" Color="Color.Warning" Size="Size.Small" />
                                }
                                else
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Upload" Color="Color.Default" Size="Size.Small" />
                                }
                                @t.UserDisplayName
                            </div>
                            <div Style="position:relative; height:30px; display: flex; align-items: center;">
                                <MudIcon Icon="@Icons.Material.Filled.Download" Color="Color.Default" Style="cursor:pointer;" Size="Size.Small" />@t.DownloadTimes
                                <MudButton Size="Size.Small" Variant="Variant.Text" EndIcon="@Icons.Material.Filled.Download" Color="Color.Primary" Style="position:absolute;right:35px" IconSize="Size.Small" OnClick="()=>Download(t.WatermarkId)">下载</MudButton>
                                <MudIconButton Variant="Variant.Text" Color="Color.Secondary" Icon="@Icons.Material.Filled.Share" Style="position:absolute;right:10px" Size="Size.Small" OnClick="()=>Share(t.WatermarkId)"></MudIconButton>
                            </div>
                        </MudPaper>
                    </MudItem>
                }
            }
            @if (newest != null)
            {
                <MudItem xs="12">
                    <MudText Typo="Typo.h4">最新</MudText>
                </MudItem>
                @foreach (var t in newest.Where(x => !string.IsNullOrEmpty(Search) ? (x.WMCanvas.Name.Contains(Search) || x.WMCanvas.ID == Search) : true))
                {
                    <MudItem xs="2">
                        <MudPaper Elevation="25" Style="position:relative;" Class="fullscreen-icon">
                            <MudIconButton Icon="@Icons.Material.Filled.Fullscreen" Color="Color.Default" Size="Size.Small" Style="" Class="fullscreen" OnClick="@(()=> { FocusImageShow = true; FocusImage = t.Src; })" />
                            <div style="height:200px;display:flex;align-items:center;">
                                @if (!string.IsNullOrEmpty(t.Src))
                                {
                                    <MudImage Style="width:100%;height:200px;" Src="@t.Src" ObjectFit="ObjectFit.Contain" />
                                }
                                else
                                {
                                    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" Style="margin-left:calc(50% - 20px)" />
                                }
                            </div>
                            <div style="display:flex;align-items:center;">
                                <MudText Style="margin: auto; text-overflow: ellipsis; white-space: nowrap;overflow-x:hidden" Typo="Typo.subtitle1">
                                    @t.WMCanvas?.Name
                                </MudText>
                            </div>
                            <div Style="position:relative; height:20px; display: flex; align-items: center; text-overflow:ellipsis;white-space:nowrap;overflow-x:hidden">
                                @if (t.UserId == "0BECCA9A-6F10-4A88-8753-921195D08853" || t.UserId == "9DEBF7DC-F58C-4667-BACF-A6BFD18352EB")
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Verified" Color="Color.Warning" Size="Size.Small" />
                                }
                                else
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Upload" Color="Color.Default" Size="Size.Small" />
                                }
                                @t.UserDisplayName
                            </div>
                            <div Style="position:relative; height:30px; display: flex; align-items: center;">
                                <MudIcon Icon="@Icons.Material.Filled.Download" Color="Color.Default" Style="cursor:pointer;" Size="Size.Small" />@t.DownloadTimes
                                <MudButton Size="Size.Small" Variant="Variant.Text" EndIcon="@Icons.Material.Filled.Download" Color="Color.Primary" Style="position:absolute;right:35px" IconSize="Size.Small" OnClick="()=>Download(t.WatermarkId)">下载</MudButton>
                                <MudIconButton Variant="Variant.Text" Color="Color.Secondary" Icon="@Icons.Material.Filled.Share" Style="position:absolute;right:10px" Size="Size.Small" OnClick="()=>Share(t.WatermarkId)"></MudIconButton>
                            </div>
                        </MudPaper>
                    </MudItem>
                }
            }
        </MudGrid>
        <MudOverlay Visible="@loading" DarkBackground="false" Style="background:#e6e6e6" Absolute="false" ZIndex="9999">
            <MudStack Justify="Justify.Center">
                <MudProgressCircular Color="Color.Secondary" Indeterminate="true" Style="margin:auto" />
                <MudText Typo="Typo.subtitle1" Color="Color.Dark">
                    <b>@loadingMessage</b>
                </MudText>
            </MudStack>
        </MudOverlay>
        <MudOverlay Visible="@FocusImageShow" DarkBackground="true" Absolute="false" ZIndex="9999">
            <MudPaper Style="position:relative;">
                <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Primary" OnClick="()=>FocusImageShow = false" Style="position:absolute;right:0px;top:0px;" Size="Size.Small" />
                <MudImage ObjectFit="ObjectFit.Contain" Src="@FocusImage" Style="height: 80vh;padding:30px" Class="rounded-lg" />
            </MudPaper>
        </MudOverlay>
    </DialogContent>
</MudDialog>


@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }
    [Inject]
    private IDialogService DialogService { get; set; }
    bool loading = false;
    string loadingMessage = "正在下载模板...";
    string Search = "";
    bool FocusImageShow = false;
    string FocusImage = "";
    List<WMZipedTemplate> ZipedTemplates;
    List<WMZipedTemplate> hottest;
    List<WMZipedTemplate> newest;
    int start = 1;
    string sortType = "最热门";
    string sortCode => sortType == "最热门" ? "countDesc" : "timeDesc";
    protected override async Task OnInitializedAsync()
    {
        var date = Global.ReadDate();
        if ((DateTime.Now - date).TotalDays > 5)
        {
            if (Directory.Exists(Global.AppPath.MarketFolder))
            {
                Directory.Delete(Global.AppPath.MarketFolder, true);
            }
            Global.WriteDate();
        }

        await LoadTemplates();
    }

    async Task LoadTemplates()
    {
        loadingMessage = "正在下载模板...";
        StateHasChanged();
        loading = true;
        var helper = new APIHelper();
        var allTemplates = await helper.GetWatermarks("", start, 999, sortCode);
        List<Task> tasks1 = new List<Task>();
        var recommend = allTemplates.Where(x => x.Recommend);
        hottest = allTemplates.Where(x => !x.Recommend).Take(12).ToList();
        var newt = await helper.GetWatermarks("", start, 999, "timeDesc");
        newest = newt.Where(x => !x.Recommend).ToList();
        ZipedTemplates = recommend.UnionBy(hottest, x => x.WatermarkId).UnionBy(newest, x => x.WatermarkId).ToList();

        if (!Directory.Exists(Global.AppPath.MarketFolder))
        {
            Directory.CreateDirectory(Global.AppPath.MarketFolder);
        }
        var templateFolderInfo = new DirectoryInfo(Global.AppPath.MarketFolder);
        var downloadedTemplates = templateFolderInfo.GetDirectories().Select(x => x.Name).ToList();
        var needToDownloadTemplates = ZipedTemplates.Where(x => !downloadedTemplates.Contains(x.WatermarkId)).Select(x => x.WatermarkId).ToList();
        var downloaded = await helper.Downloads(needToDownloadTemplates);
        if (!downloaded) Watermark.Shared.Models.ClientInstance.ShowMsg(Snackbar, "下载失败", Severity.Error);

        loading = false;
        StateHasChanged();
        try
        {
            List<Task> mission = new List<Task>();
            var basePath = Global.AppPath.MarketFolder;

            WatermarkHelper watermarkHelper = new WatermarkHelper();
            foreach (var dirct in ZipedTemplates)
            {
                var configPath = basePath + dirct.WatermarkId + System.IO.Path.DirectorySeparatorChar + "config.json";
                if (System.IO.File.Exists(configPath))
                {
                    var t = Task.Run(() =>
                    {

                        var folder = new DirectoryInfo(basePath + dirct.WatermarkId);
                        foreach (var file in folder.GetFiles())
                        {
                            if (file.Name.EndsWith("config.json", StringComparison.OrdinalIgnoreCase))
                            {
                                using var reader = new System.IO.StreamReader(File.OpenRead(file.FullName));
                                var content = reader.ReadToEnd();
                                var canvas = Global.ReadConfig(content);
                                dirct.WMCanvas = Global.ReadConfig(content);
                            }
                            else if (file.Name.EndsWith("default.jpg", StringComparison.OrdinalIgnoreCase))
                            {
                                var sKBitmap = SkiaSharp.SKBitmap.Decode(file.FullName);
                                dirct.Bitmap = sKBitmap;
                            }
                            else if (file.Name.EndsWith(".ttf") || file.Name.EndsWith(".otf"))
                            {
                                var fs = file.OpenRead();
                                using MemoryStream mss = new();
                                fs.CopyTo(mss);
                                dirct.Fonts[file.Name] = mss.ToArray();
                            }
                            else
                            {
                                var sKBitmap = SkiaSharp.SKBitmap.Decode(file.FullName);
                                dirct.Images[file.Name] = sKBitmap;
                            }

                        }


                        var src = watermarkHelper.Generation(dirct.WMCanvas, dirct, true, false);
                        dirct.Src = src;
                        return src;
                    });
                    mission.Add(t);
                }
            }
            await Task.WhenAll(mission);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Watermark.Shared.Models.ClientInstance.ShowMsg(Snackbar, ex.Message, Severity.Error);
        }
    }

    void Share(string id)
    {
        System.Windows.Clipboard.SetText(id);

        string message = "已复制ID到剪贴板";
        ClientInstance.ShowMsg(Snackbar, message, Severity.Success);
    }

    async void Download(string watermarkId)
    {
        var helper = new APIHelper();
        var result = await helper.Download(watermarkId);
        string message = "";
        Severity Severity = Severity.Success;
        if (result)
        {
            Severity = Severity.Success;
            message = "下载成功";
            if(Global.CurrentUser != null && !string.IsNullOrEmpty(Global.CurrentUser.ID))
            {
                helper.AddILike(Global.CurrentUser.ID, watermarkId);
            }
            
        }
        else
        {
            Severity = Severity.Error;
            message = "下载失败";
        }

        ClientInstance.ShowMsg(Snackbar, message, Severity);
    }

    void OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            StateHasChanged();
        }
    }
}