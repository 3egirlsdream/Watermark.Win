@using System.Diagnostics
@using System.IO
@using Watermark.Shared.Enums
@using Watermark.Win.Models
@inject ISnackbar Snackbar
@implements IDisposable

<style>
	.flex-vertical-center {
		display: flex;
		align-items: center;
	}



	.fullscreen {
		opacity: 0;
		position: absolute;
		right: 0px;
	}

		.fullscreen:hover {
			opacity: 1;
		}

	.fullscreen-icon {
	}

		.fullscreen-icon:hover
		.fullscreen {
			opacity: 1;
			cursor: pointer;
		}

	.dfm-card-name {
		text-overflow: ellipsis;
		white-space: nowrap;
		overflow-x: hidden
	}

	.dfm-card-user-name {
		position: relative;
		display: flex;
		align-items: center;
		text-overflow: ellipsis;
		white-space: nowrap;
		overflow-x: hidden
	}

	.dfm-card-footer {
		position: relative;
		height: 30px;
		display: flex;
		align-items: center;
	}

</style>
<MudDialog Style="width:90%; height:90%;overflow-y:hidden">
	<DialogContent>
		<MudToolBar Style="padding:0px">
			<MudSpacer />
			<MudTextField @bind-Value="Search" Label="搜索" Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Default" @onkeyup="OnKeyDown" />
		</MudToolBar>
		<MudGrid Spacing="2" Justify="Justify.FlexStart" Style="height:calc(90vh - 70px);overflow-y:auto;padding:5px;">
			@if (ZipedTemplates != null)
			{
				<MudItem xs="12">
					<MudText Typo="Typo.h4"><b>推荐</b></MudText>
				</MudItem>
				@foreach (var t in ZipedTemplates.Where(x => x.Recommend))
				{
					<MudItem xs="2" Style="@($"display:{(t.State ? string.Empty : "none")};")">
						<MudPaper Elevation="0" Style="position:relative;" Class="fullscreen-icon">
							<MudIconButton Icon="@Icons.Material.Filled.Fullscreen" Color="Color.Default" Size="Size.Small" Class="fullscreen" OnClick="@(()=> { FocusImageShow = true; FocusImage = t.Src; })" />

							<div class="dfm-card-footer fullscreen" style="position:absolute;right:10px;top: 190px;">
								<MudIconButton Size="Size.Small" Variant="Variant.Filled" Icon="@Icons.Material.Filled.Download" OnClick="()=>Download(t.WatermarkId, t.UserId)" Style="@($"background:{Colors.Grey.Lighten5};margin-right:10px")"></MudIconButton>
								<MudIconButton Variant="Variant.Filled" Color="Color.Default" Icon="@Icons.Material.Filled.Share" Size="Size.Small" OnClick="()=>Share(t.WatermarkId)" Style="@($"background:{Colors.Grey.Lighten5};")"></MudIconButton>
							</div>
							<MudCard style="height:232px;;padding:16px;background:#E5E5E5" class="flex-vertical-center" Elevation="0">
								@if (!string.IsNullOrEmpty(t.Src))
								{
									<MudImage Style="width:100%" Height="200" Src="@t.Src" ObjectFit="ObjectFit.Contain" />
								}
								else
								{
									<MudProgressCircular Color="Color.Secondary" Indeterminate="true" Style="margin-left:calc(50% - 20px)" />
								}
							</MudCard>
							<div style="display: flex; align-items: center; justify-content: space-between; margin-top:4px;">
								<MudText Class="dfm-card-name" Typo="Typo.subtitle1">
									@t.WMCanvas?.Name
								</MudText>
								<div style="display: flex; align-items: center;">
									<MudIcon Icon="@Icons.Material.Filled.Download" Color="Color.Default" Style="cursor:pointer;height:14px;width:14px;" Size="Size.Small" />
									<span style="font-size: 12px;line-height: 12px;">@t.DownloadTimes</span>
								</div>
							</div>
							<div class="dfm-card-user-name">
								<MudIcon Icon="@Icons.Material.Filled.Recommend" Color="Color.Warning" Size="Size.Small" />
								<MudText Typo="Typo.overline" Style="@($"color:{Colors.Grey.Default};padding-top: 2px;margin-left:2px;")">
									@t.UserDisplayName
								</MudText>
							</div>
						</MudPaper>
					</MudItem>
				}
			}

			@if (subscribed != null)
			{
				@foreach (var sub in subscribed)
				{
					@if (sub.Item2.Count > 0)
					{
						<MudItem xs="12">
							<MudText Typo="Typo.h4"><b>@sub.Item1</b></MudText>
						</MudItem>
					}
					@foreach (var t in sub.Item2)
					{
						<MudItem xs="2" Style="@($"display:{(t.State ? string.Empty : "none")};")">
							<MudPaper Elevation="0" Style="position:relative;" Class="fullscreen-icon">
								<MudIconButton Icon="@Icons.Material.Filled.Fullscreen" Color="Color.Default" Size="Size.Small" Style="" Class="fullscreen" OnClick="@(()=> { FocusImageShow = true; FocusImage = t.Src; })" />
								<div class="dfm-card-footer fullscreen" style="position:absolute;right:10px;top: 190px;">
									<MudIconButton Size="Size.Small" Variant="Variant.Filled" Icon="@Icons.Material.Filled.Download" OnClick="()=>Download(t.WatermarkId, t.UserId)" Style="@($"background:{Colors.Grey.Lighten5};margin-right:10px")"></MudIconButton>
									<MudIconButton Variant="Variant.Filled" Color="Color.Default" Icon="@Icons.Material.Filled.Share" Size="Size.Small" OnClick="()=>Share(t.WatermarkId)" Style="@($"background:{Colors.Grey.Lighten5};")"></MudIconButton>
								</div>
								<MudCard style="height:232px;padding:16px;background:#E5E5E5" class="flex-vertical-center" Elevation="0">
									@if (!string.IsNullOrEmpty(t.Src))
									{
										<MudImage Style="width:100%" Height="200" Src="@t.Src" ObjectFit="ObjectFit.Contain" />
									}
									else
									{
										<MudProgressCircular Color="Color.Secondary" Indeterminate="true" Style="margin-left:calc(50% - 20px)" />
									}
								</MudCard>
								<div style="display: flex; align-items: center; justify-content: space-between; margin-top:4px;">
									<MudText Class="dfm-card-name" Typo="Typo.subtitle1">
										@t.WMCanvas?.Name
									</MudText>
									<div style="display: flex; align-items: center;">
										<MudIcon Icon="@Icons.Material.Filled.Download" Color="Color.Default" Style="cursor:pointer;height:14px;width:14px;" Size="Size.Small" />
										<span style="font-size: 12px;line-height: 12px;">@t.DownloadTimes</span>
									</div>
								</div>
								<div class="dfm-card-user-name">
									@if (t.UserId == "0BECCA9A-6F10-4A88-8753-921195D08853" || t.UserId == "9DEBF7DC-F58C-4667-BACF-A6BFD18352EB")
									{
										<MudIcon Icon="@Icons.Material.Filled.Verified" Color="Color.Warning" Size="Size.Small" />
									}
									else
									{
										<MudIcon Icon="@Icons.Material.Filled.AccountCircle" Color="Color.Default" Size="Size.Small" />
									}
									<MudText Typo="Typo.overline" Style="@($"color:{Colors.Grey.Default};padding-top: 2px;margin-left:2px;")">
										@t.UserDisplayName
									</MudText>
									<MudIconButton Icon="@Icons.Material.Filled.NotificationAdd" Size="Size.Small" Color="@(subscribed.Any(x=>x.Item1 == t.UserDisplayName) ? Color.Default : Color.Warning)" OnClick="()=>Subscribe(t.UserId)" Class="fullscreen" Style="float:right;" />
								</div>
							</MudPaper>
						</MudItem>
					}
				}
			}

		</MudGrid>
		<MudOverlay Visible="@loading" DarkBackground="false" Style="background:#e6e6e6" Absolute="false" ZIndex="9999">
			<MudStack Justify="Justify.Center">
				<MudProgressCircular Color="Color.Secondary" Indeterminate="true" Style="margin:auto" />
				<MudText Typo="Typo.subtitle1" Color="Color.Dark">
					<b>@loadingMessage</b>
				</MudText>
			</MudStack>
		</MudOverlay>
		<MudOverlay Visible="@FocusImageShow" DarkBackground="true" Absolute="false" ZIndex="9999">
			<MudPaper Style="position:relative;background:#E5E5E5" Elevation="25">
				<MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Primary" OnClick="()=>FocusImageShow = false" Style="position:absolute;right:0px;top:0px;" Size="Size.Small" />
				<MudImage ObjectFit="ObjectFit.Contain" Src="@FocusImage" Style="height: 80vh;padding:30px" Class="rounded-lg" />
			</MudPaper>
		</MudOverlay>
	</DialogContent>
</MudDialog>


@code {

	[CascadingParameter]
	MudDialogInstance MudDialog { get; set; }
	[Inject]
	private IDialogService DialogService { get; set; }
	bool loading = false;
	string loadingMessage = "正在下载模板...";
	string Search = "";
	bool FocusImageShow = false;
	string FocusImage = "";
	List<WMZipedTemplate> ZipedTemplates;
	List<WMZipedTemplate> hottest;
	List<WMZipedTemplate> newest;
	List<Tuple<string, List<WMZipedTemplate>>> subscribed;
	int start = 1;
	string sortType = "最热门";
	string sortCode => sortType == "最热门" ? "countDesc" : "timeDesc";
	protected override async Task OnInitializedAsync()
	{
		var date = Global.ReadDate();
		if ((DateTime.Now - date).TotalDays > 5)
		{
			if (Directory.Exists(Global.AppPath.MarketFolder))
			{
				Directory.Delete(Global.AppPath.MarketFolder, true);
			}
			Global.WriteDate();
		}

		await LoadTemplates();

		var api = new APIHelper();
		await api.PageVisitRecord(ProgramPage.Market, Platform.Win);
	}

	async Task LoadTemplates()
	{
		loadingMessage = "正在下载模板...";
		StateHasChanged();
		loading = true;
		var helper = new APIHelper();
		var allTemplates = (await helper.GetWatermarks("", start, 999, sortCode)).Where(x => x.Visible);
		List<Task> tasks1 = new List<Task>();
		var recommend = allTemplates.Where(x => x.Recommend);
		hottest = allTemplates.Where(x => !x.Recommend).Take(12).ToList();
		newest = allTemplates.OrderByDescending(x => x.DateTimeCreated).Where(x => !x.Recommend).ToList();
		ZipedTemplates = recommend.UnionBy(hottest, x => x.WatermarkId).UnionBy(newest, x => x.WatermarkId).ToList();
		if (!Directory.Exists(Global.AppPath.MarketFolder))
		{
			Directory.CreateDirectory(Global.AppPath.MarketFolder);
		}
		var templateFolderInfo = new DirectoryInfo(Global.AppPath.MarketFolder);
		var downloadedTemplates = templateFolderInfo.GetDirectories().Select(x => x.Name).ToList();
		var needToDownloadTemplates = ZipedTemplates.Where(x => !downloadedTemplates.Contains(x.WatermarkId)).Select(x => x.WatermarkId).ToList();
		var downloaded = await helper.Downloads(needToDownloadTemplates);
		if (!downloaded) Watermark.Shared.Models.ClientInstance.ShowMsg(Snackbar, "下载失败", Severity.Error);
		var subUser = await IntiSubscribedUserList();
		subscribed = new List<Tuple<string, List<WMZipedTemplate>>>();
		foreach (var su in subUser)
		{
			var tp = ZipedTemplates.Where(x => x.UserId == su).ToList();
			if (tp.Count > 0)
			{
				var tup = Tuple.Create(tp[0].UserDisplayName, tp);
				subscribed.Add(tup);
			}
		}

		subscribed.Add(Tuple.Create("热门", hottest.Where(x => !subUser.Contains(x.UserId)).ToList()));
		subscribed.Add(Tuple.Create("最新", newest.Where(x => !subUser.Contains(x.UserId)).ToList()));

		loading = false;
		StateHasChanged();
		try
		{
			List<Task> mission = new List<Task>();
			var basePath = Global.AppPath.MarketFolder;

			WatermarkHelper watermarkHelper = new WatermarkHelper();
			var option = new ParallelOptions();
			option.MaxDegreeOfParallelism = Global.MAX_THREAD;
			await Task.Run(() =>
			{
				Parallel.ForEach(ZipedTemplates, option, (dirct) =>
				{
					var configPath = basePath + dirct.WatermarkId + System.IO.Path.DirectorySeparatorChar + "config.json";
					if (System.IO.File.Exists(configPath))
					{
						var content = File.ReadAllText(configPath);
						var canvas = Global.ReadConfig(content);

						dirct.WMCanvas = canvas;
						Global.InitFonts([canvas]).Wait();

						var folder = new DirectoryInfo(basePath + dirct.WatermarkId);
						foreach (var file in folder.GetFiles())
						{
							if (file.Name.EndsWith("default.jpg", StringComparison.OrdinalIgnoreCase))
							{
								var sKBitmap = SkiaSharp.SKBitmap.Decode(file.FullName);
								dirct.Bitmap = sKBitmap;
							}
							else if (file.Name.EndsWith(".ttf") || file.Name.EndsWith(".otf"))
							{
							}
							else
							{
								var sKBitmap = SkiaSharp.SKBitmap.Decode(file.FullName);
								dirct.Images[file.Name] = sKBitmap;
							}

						}

						var src = watermarkHelper.Generation(dirct.WMCanvas, dirct, true, false);
						dirct.Src = src;
						InvokeAsync(StateHasChanged);

					}
				});
			});
			StateHasChanged();
			ZipedTemplates.ForEach(x => x.Dispose());
		}
		catch (Exception ex)
		{
			Watermark.Shared.Models.ClientInstance.ShowMsg(Snackbar, ex.Message, Severity.Error);
		}
	}

	void Share(string id)
	{
		System.Windows.Clipboard.SetText(id);

		string message = "已复制ID到剪贴板";
		ClientInstance.ShowMsg(Snackbar, message, Severity.Success);
	}

	async void Download(string watermarkId, string userId)
	{
		var action = new Action(async () =>
		{
			string message = "";
			Severity Severity = Severity.Success;
			var helper = new APIHelper();
			var result = await helper.Download(watermarkId, userId);
			if (result)
			{
				Severity = Severity.Success;
				message = "下载成功";
				if (Global.CurrentUser != null && !string.IsNullOrEmpty(Global.CurrentUser.ID))
				{
					var _=helper.AddILike(Global.CurrentUser.ID, watermarkId);
				}
			}
			else
			{
				Severity = Severity.Error;
				message = "下载失败";
			}
			ClientInstance.ShowMsg(Snackbar, message, Severity);
		});

		if (Global.CurrentUser == null || string.IsNullOrEmpty(Global.CurrentUser.ID))
		{
			var rst = DialogService.Show<LoginDialog>("");
			var dialogResult = await rst.Result;
			if (!dialogResult.Canceled && dialogResult.Data.Equals(true))
			{
				action.Invoke();
			}
		}
		else
		{
			action.Invoke();
		}
	}

	void OnKeyDown(KeyboardEventArgs e)
	{
		if (e.Key == "Enter")
		{
			ZipedTemplates.ForEach(x => x.State = false);
			var templates = ZipedTemplates.AsEnumerable();
			if (!string.IsNullOrEmpty(Search))
			{
				templates = ZipedTemplates.Where(x => x.WMCanvas.Name.Contains(Search) || x.WMCanvas.ID == Search || x.UserDisplayName.Contains(Search));
			}
			foreach (var item in templates)
			{
				item.State = true;
			}
			StateHasChanged();
		}
	}

	async Task<List<string>> IntiSubscribedUserList()
	{
		if (Global.CurrentUser == null || string.IsNullOrEmpty(Global.CurrentUser.ID)) return [];
		var helper = new APIHelper();
		var result = await helper.GetISubscribed(Global.CurrentUser.ID);
		if (result.success)
		{
			return result.data;
		}
		else
		{
			ClientInstance.ShowMsg(Snackbar, result.message?.content, Severity.Error);
		}
		return [];
	}

	async void Subscribe(string userId)
	{
		if (Global.CurrentUser == null || string.IsNullOrEmpty(Global.CurrentUser.ID)) return;
		var helper = new APIHelper();
		var r = await helper.SubscribeUser(Global.CurrentUser.ID, userId);
		await LoadTemplates();
	}

	public void Dispose()
	{
		ZipedTemplates = null;
		hottest = null;
		newest = null;
		subscribed = null;
	}

}