@using System.IO
@using Microsoft.JSInterop
@using NHotkey
@using NHotkey.Wpf
@using System.Windows.Input
@using System.Collections.Concurrent
@using Watermark.Shared.Models
@using Watermark.Win.BlazorPages
@using Watermark.Shared.Enums
@using Newtonsoft.Json
@using Watermark.Win.Models
@inject ISnackbar Snackbar
@inject WMCanvas CurrentCanvas
@inject string cloud
@inject IJSRuntime JSRuntime
@inject IWMWatermarkHelper helper
<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<style>
	.mud-tooltip-root.mud-tooltip-inline {
		height: 24px;
	}
</style>
<div Style="background:#e3e3e3;height:100vh;width:100vw;overflow-x:hidden">
	<div style="height:40px;position:fixed;width:100%;top:0;left:0;z-index:999;background:#fff;">
		<MudToolBar Style="height:40px;padding-left:5px;">
			<MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Save" Color="Color.Primary" Class="mr-5" OnClick="SaveTemplate">保存</MudButton>
			<MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Add" Class="mr-5" OnClick="OpenEditDialog">编辑/新增组件</MudButton>
			<MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.SaveAs" Color="Color.Secondary" Class="mr-5" OnClick="()=>showDialog = true">另存为</MudButton>
			@if (SrcLoading)
			{
				<MudProgressCircular Color="Color.Secondary" Indeterminate="true" Size="Size.Small" Class="ma-4" />
			}
			<MudSpacer />
			<MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Refresh" Color="Color.Error" OnClick="PreviewImageRefresh">刷新(Ctrl R)</MudButton>
		</MudToolBar>
	</div>
	<div Style="height:calc(100% - 40px);width:100vw;display: flex;margin-top:40px;">
		<div style="width:calc(100% - 500px);height:100%;position:fixed;">
			<div style="background:#e3e3e3;width:100%;height:100%;padding:10px;">
				@if (!string.IsNullOrEmpty(url))
				{
					<MudImage ObjectFit="@ObjectFit.ScaleDown" Src="@url" Elevation="25" Style="width: 100%; height: 100%; padding-left: 5%; padding-right: 5%; padding-top: 100px; padding-bottom: 100px;" />
				}

			</div>
		</div>
		<div style="width:500px;height:100%;margin-left:calc(100% - 500px);padding:10px;">
			<MudExpansionPanels DisableBorders="true" Elevation="0" Style="font-weight:700;">
				<MudExpansionPanel Text="画布">
					<MudTextField @bind-Value="@canvas.Name" Label="模板名称" Required ErrorText="模板名称不能为空" Variant="Variant.Outlined" Class="mt-5" Margin="Margin.Dense" />
					<MudColorPicker Label="背景颜色" ColorPickerView="ColorPickerView.Grid" @bind-Text="@canvas.BackgroundColor" Class="mt-5" />
					<MudRadioGroup @bind-Value="canvas.CanvasType" Class="mt-5">
						<MudRadio Value="CanvasType.Normal" Color="Color.Default" Dense="true">固定主要图片模式</MudRadio>
						<MudRadio Value="CanvasType.Split" Color="Color.Default" Dense="true">自定义比例模式</MudRadio>
					</MudRadioGroup>
					@if (canvas.CanvasType == CanvasType.Normal)
					{
						<MudStack Row Class="mt-5" Justify="Justify.SpaceBetween" Style="display:flex;align-items:center;">
							@if (ImagesBase64.TryGetValue("default", out string src))
							{
								<MudImage Width="250" ObjectFit="ObjectFit.Contain" Src="@src" />
							}
							<MudIconButton Icon="@Icons.Material.Filled.OpenInNew" OnClick="SelectDefaultImage" />
						</MudStack>

						<MudStack Row Class="mt-5" Justify="Justify.SpaceBetween" Style="display:flex;align-items:center;">
							<MudText Typo="Typo.button">显示主图</MudText>
							<MudSwitch @bind-Value="@canvas.ImageProperties.Show" Color="Color.Primary" />
						</MudStack>
						<MudStack Row Class="mt-5">
							<MudTextField @bind-Value="@canvas.BorderThickness.Top" Label="上边距" Variant="Variant.Outlined" Margin="Margin.Dense" />
							<MudTextField @bind-Value="@canvas.BorderThickness.Bottom" Label="下边距" Variant="Variant.Outlined" Margin="Margin.Dense" />
							<MudTextField @bind-Value="@canvas.BorderThickness.Left" Label="左边距" Variant="Variant.Outlined" Margin="Margin.Dense" />
							<MudTextField @bind-Value="@canvas.BorderThickness.Right" Label="右边距" Variant="Variant.Outlined" Margin="Margin.Dense" />
						</MudStack>
						<MudStack Row Class="mt-5" Justify="Justify.SpaceBetween" Style="display:flex;align-items:center;">
							<MudText Typo="Typo.button">启用边框等宽 (可能导致穿模)</MudText>
							<MudSwitch @bind-Value="@canvas.EnableMarginXS" Color="Color.Primary" />
						</MudStack>
						<MudStack Row Class="mt-5" Justify="Justify.SpaceBetween" Style="display:flex;align-items:center;">
							<MudText Typo="Typo.button">启用阴影</MudText>
							<MudSwitch @bind-Value="@canvas.ImageProperties.EnableShadow" Color="Color.Primary" />
						</MudStack>
						<MudColorPicker class="mt-5" Label="阴影颜色" ColorPickerView="ColorPickerView.Grid" @bind-Text="canvas.ImageProperties.ShadowColor" />
						<MudTextField class="mt-5" @bind-Value="@canvas.ImageProperties.ShadowRange" Label="深度" Variant="Variant.Outlined" Margin="Margin.Dense" />

						<MudStack Row Class="mt-5" Justify="Justify.SpaceBetween" Style="display:flex;align-items:center;">
							<MudText Typo="Typo.button">启用图片圆角</MudText>
							<MudSwitch @bind-Value="@canvas.ImageProperties.EnableRadius" Color="Color.Primary" />
						</MudStack>
						<MudTextField class="mt-5" @bind-Value="@canvas.ImageProperties.CornerRadius" Label="圆角度数" Variant="Variant.Outlined" Margin="Margin.Dense" />

						<MudStack Row Class="mt-5" Justify="Justify.SpaceBetween" Style="display:flex;align-items:center;">
							<MudText Typo="Typo.button">启用背景高斯模糊</MudText>
							<MudSwitch @bind-Value="@canvas.ImageProperties.EnableGaussianBlur" Color="Color.Primary" />
						</MudStack>
						<MudTextField class="mt-5" @bind-Value="@canvas.ImageProperties.GaussianDeep" Label="模糊深度" Variant="Variant.Outlined" Margin="Margin.Dense" />
					}
					else
					{
						<MudSelect Value="canvas.LengthWidthRatio" Dense="true" T="string" Label="画幅比例" Variant="Variant.Text" ValueChanged="ValueChanged2">
							<MudSelectItem Value="@("1:1")" />
							<MudSelectItem Value="@("16:9")" />
							<MudSelectItem Value="@("9:16")" />
							<MudSelectItem Value="@("4:3")" />
							<MudSelectItem Value="@("3:4")" />
							<MudSelectItem Value="@("21:9")" />
							<MudSelectItem Value="@("18:9")" />
							<MudSelectItem Value="@("1.85:1")" />
							<MudSelectItem Value="@("2.39:1")" />
						</MudSelect>
						<MudStack Row Class="mt-5">
							<MudTextField @bind-Value="@canvas.CustomWidth" Label="自定义宽度(px)" Variant="Variant.Outlined" Margin="Margin.Dense" />
							<MudTextField @bind-Value="@canvas.CustomHeight" Label="自定义高度(px)" Variant="Variant.Outlined" Margin="Margin.Dense" />
						</MudStack>
					}
				</MudExpansionPanel>
				@foreach (var container in canvas.Children)
				{
					<MudExpansionPanel Text="@container.Name">
						<div class="d-flex justify-space-between mt-5">
							<MudText Align="Align.Justify" Typo="Typo.button">背景图片</MudText>
							@if (ImagesBase64.TryGetValue(container.ID, out string src))
							{
								<MudImage Src="@src" ObjectFit="ObjectFit.Contain" Height="40" Width="260" Style="float:right" />
								<MudIcon Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Style="float:right;margin-top: 10px;cursor: pointer;" Size="Size.Small" @onclick="() => RemoveImage(container)" />
							}
							<MudIconButton Icon="@Icons.Material.Filled.OpenInNew" OnClick="(()=> SelectImage(container))" Style="float:right;max-width:80px;" Size="Size.Small" />
						</div>

						<MudStack Row Class="mt-5" Justify="Justify.SpaceBetween" Style="display:flex;align-items:center;">
							<MudText Typo="Typo.button">启用阴影</MudText>
							<MudSwitch @bind-Value="@container.ContainerProperties.EnableShadow" Color="Color.Primary" />
						</MudStack>
						<MudColorPicker class="mt-5" Label="阴影颜色" ColorPickerView="ColorPickerView.Grid" @bind-Text="container.ContainerProperties.ShadowColor" />
						<MudTextField class="mt-5" @bind-Value="@container.ContainerProperties.ShadowRange" Label="深度" Variant="Variant.Outlined" Margin="Margin.Dense" />

						<MudStack Row Class="mt-5" Justify="Justify.SpaceBetween" Style="display:flex;align-items:center;">
							<MudText Typo="Typo.button">启用图片圆角</MudText>
							<MudSwitch @bind-Value="@container.ContainerProperties.EnableRadius" Color="Color.Primary" />
						</MudStack>
						<MudTextField class="mt-5" @bind-Value="@container.ContainerProperties.CornerRadius" Label="圆角度数" Variant="Variant.Outlined" Margin="Margin.Dense" />

						<div class="d-flex justify-space-between mt-5">
							<MudText Typo="Typo.button">容器内组件水平对齐</MudText>
							<MudToggleGroup @bind-Value="@container.HorizontalAlignment" T="Watermark.Shared.Enums.HorizontalAlignment" Outline="true" Delimiters="true" Dense="true" Rounded="false" CheckMark="false" FixedContent="false">
								<MudToggleItem Value="@(Watermark.Shared.Enums.HorizontalAlignment.Left)">
									<MudIcon Icon="@Icons.Material.Filled.FormatAlignLeft" />
								</MudToggleItem>
								<MudToggleItem Value="@(Watermark.Shared.Enums.HorizontalAlignment.Center)">
									<MudIcon Icon="@Icons.Material.Filled.FormatAlignCenter" />
								</MudToggleItem>
								<MudToggleItem Value="@(Watermark.Shared.Enums.HorizontalAlignment.Right)">
									<MudIcon Icon="@Icons.Material.Filled.FormatAlignRight" />
								</MudToggleItem>
							</MudToggleGroup>
						</div>
						<div class="d-flex justify-space-between mt-5">
							<MudText Typo="Typo.button">容器内组件竖直对齐</MudText>
							<MudToggleGroup @bind-Value="@container.VerticalAlignment" T="Watermark.Shared.Enums.VerticalAlignment" Outline="true" Delimiters="true" Dense="true" Rounded="false" CheckMark="false" FixedContent="false">
								<MudToggleItem Value="@(Watermark.Shared.Enums.VerticalAlignment.Top)">
									<MudIcon Icon="@Icons.Material.Filled.VerticalAlignTop" />
								</MudToggleItem>
								<MudToggleItem Value="@(Watermark.Shared.Enums.VerticalAlignment.Center)">
									<MudIcon Icon="@Icons.Material.Filled.VerticalAlignCenter" />
								</MudToggleItem>
								<MudToggleItem Value="@(Watermark.Shared.Enums.VerticalAlignment.Bottom)">
									<MudIcon Icon="@Icons.Material.Filled.VerticalAlignBottom" />
								</MudToggleItem>
							</MudToggleGroup>
						</div>
						<div class="d-flex justify-space-between mt-5">
							<MudText Typo="Typo.button">容器内组件堆叠方向</MudText>
							<MudToggleGroup @bind-Value="@container.Orientation" T="Watermark.Shared.Enums.Orientation" Outline="true" Delimiters="true" Dense="true" Rounded="false" CheckMark="false" FixedContent="false">
								<MudTooltip Text="组件水平方向堆叠" Color="Color.Primary" Placement="Placement.Top">
									<MudToggleItem Value="@(Watermark.Shared.Enums.Orientation.Horizontal)">
										<MudIcon Icon="@Icons.Material.Filled.BorderHorizontal" />
									</MudToggleItem>
								</MudTooltip>
								<MudToggleItem Value="@(Watermark.Shared.Enums.Orientation.Vertical)">
									<MudTooltip Text="组件竖直方向堆叠" Color="Color.Primary" Placement="Placement.Top">
										<MudIcon Icon="@Icons.Material.Filled.BorderVertical" />
									</MudTooltip>
								</MudToggleItem>
							</MudToggleGroup>
						</div>
						<div class="d-flex justify-space-between mt-5">
							<MudText Typo="Typo.button">容器依靠方向</MudText>
							<MudToggleGroup @bind-Value="@container.ContainerAlignment" T="Watermark.Shared.Enums.ContainerAlignment" Outline="true" Delimiters="true" Dense="true" Rounded="false" CheckMark="false" FixedContent="false">
								<MudToggleItem Value="@(Watermark.Shared.Enums.ContainerAlignment.Top)">
									<MudIcon Icon="@Icons.Material.Filled.ArrowUpward" />
								</MudToggleItem>
								<MudToggleItem Value="@(Watermark.Shared.Enums.ContainerAlignment.Bottom)">
									<MudIcon Icon="@Icons.Material.Filled.ArrowDownward" />
								</MudToggleItem>
								<MudToggleItem Value="@(Watermark.Shared.Enums.ContainerAlignment.Left)">
									<MudIcon Icon="@Icons.Material.Filled.ArrowBack" />
								</MudToggleItem>
								<MudToggleItem Value="@(Watermark.Shared.Enums.ContainerAlignment.Right)">
									<MudIcon Icon="@Icons.Material.Filled.ArrowForward" />
								</MudToggleItem>
							</MudToggleGroup>
						</div>
						<MudStack Row Class=" mt-5">
							<MudTextField @bind-Value="@container.Margin.Top" Label="上边距" Variant="Variant.Outlined" Margin="Margin.Dense" />
							<MudTextField @bind-Value="@container.Margin.Bottom" Label="下边距" Variant="Variant.Outlined" Margin="Margin.Dense" />
							<MudTextField @bind-Value="@container.Margin.Left" Label="左边距" Variant="Variant.Outlined" Margin="Margin.Dense" />
							<MudTextField @bind-Value="@container.Margin.Right" Label="右边距" Variant="Variant.Outlined" Margin="Margin.Dense" />
						</MudStack>
						<MudStack Row Class=" mt-5">
							<MudTextField @bind-Value="@container.HeightPercent" Label="高(比例)" Variant="Variant.Outlined" Margin="Margin.Dense" />
							<MudTextField @bind-Value="@container.WidthPercent" Label="宽(比例)" Variant="Variant.Outlined" Margin="Margin.Dense" />
						</MudStack>

						<MudExpansionPanels DisableBorders="true" Elevation="0">
							@foreach (var ctrl in container.Controls)
							{
								@if (ctrl is WMContainer mContainer)
								{
									<MudExpansionPanel Text="@mContainer.Name">
										<div class="d-flex justify-space-between mt-5">
											<MudText Typo="Typo.button">容器内组件水平对齐</MudText>
											<MudToggleGroup @bind-Value="@mContainer.HorizontalAlignment" T="Watermark.Shared.Enums.HorizontalAlignment" Outline="true" Delimiters="true" Dense="true" Rounded="false" CheckMark="false" FixedContent="false">
												<MudToggleItem Value="@(Watermark.Shared.Enums.HorizontalAlignment.Left)">
													<MudIcon Icon="@Icons.Material.Filled.FormatAlignLeft" />
												</MudToggleItem>
												<MudToggleItem Value="@(Watermark.Shared.Enums.HorizontalAlignment.Center)">
													<MudIcon Icon="@Icons.Material.Filled.FormatAlignCenter" />
												</MudToggleItem>
												<MudToggleItem Value="@(Watermark.Shared.Enums.HorizontalAlignment.Right)">
													<MudIcon Icon="@Icons.Material.Filled.FormatAlignRight" />
												</MudToggleItem>
											</MudToggleGroup>
										</div>
										<div class="d-flex justify-space-between mt-5">
											<MudText Typo="Typo.button">容器内组件竖直对齐</MudText>
											<MudToggleGroup @bind-Value="@mContainer.VerticalAlignment" T="Watermark.Shared.Enums.VerticalAlignment" Outline="true" Delimiters="true" Dense="true" Rounded="false" CheckMark="false" FixedContent="false">
												<MudToggleItem Value="@(Watermark.Shared.Enums.VerticalAlignment.Top)">
													<MudIcon Icon="@Icons.Material.Filled.VerticalAlignTop" />
												</MudToggleItem>
												<MudToggleItem Value="@(Watermark.Shared.Enums.VerticalAlignment.Center)">
													<MudIcon Icon="@Icons.Material.Filled.VerticalAlignCenter" />
												</MudToggleItem>
												<MudToggleItem Value="@(Watermark.Shared.Enums.VerticalAlignment.Bottom)">
													<MudIcon Icon="@Icons.Material.Filled.VerticalAlignBottom" />
												</MudToggleItem>
											</MudToggleGroup>
										</div>
										<MudStack Row Class=" mt-5">
											<MudTextField @bind-Value="@mContainer.Margin.Top" Label="上边距" Variant="Variant.Outlined" Margin="Margin.Dense" />
											<MudTextField @bind-Value="@mContainer.Margin.Bottom" Label="下边距" Variant="Variant.Outlined" Margin="Margin.Dense" />
											<MudTextField @bind-Value="@mContainer.Margin.Left" Label="左边距" Variant="Variant.Outlined" Margin="Margin.Dense" />
											<MudTextField @bind-Value="@mContainer.Margin.Right" Label="右边距" Variant="Variant.Outlined" Margin="Margin.Dense" />
										</MudStack>
										<MudStack Row Class=" mt-5">
											<MudTextField @bind-Value="@mContainer.HeightPercent" Label="高(比例)" Variant="Variant.Outlined" Margin="Margin.Dense" />
											<MudTextField @bind-Value="@mContainer.WidthPercent" Label="宽(比例, 0自动计算)" Variant="Variant.Outlined" Margin="Margin.Dense" />
										</MudStack>
										<MudExpansionPanels DisableBorders="true" Elevation="0">
											@foreach (var c_comp in mContainer.Controls)
											{
												<MudExpansionPanel Text="@c_comp.Name">
													<MudStack Row Class="mt-5">
														<MudTextField @bind-Value="@c_comp.Margin.Top" Label="上边距" Variant="Variant.Outlined" Margin="Margin.Dense" />
														<MudTextField @bind-Value="@c_comp.Margin.Bottom" Label="下边距" Variant="Variant.Outlined" Margin="Margin.Dense" />
														<MudTextField @bind-Value="@c_comp.Margin.Left" Label="左边距" Variant="Variant.Outlined" Margin="Margin.Dense" />
														<MudTextField @bind-Value="@c_comp.Margin.Right" Label="右边距" Variant="Variant.Outlined" Margin="Margin.Dense" />
													</MudStack>
													<MudStack Row class="mt-5">
														<MudText Align="Align.Justify" Typo="Typo.button" Style="width:50%">组件占容器比例</MudText>
														<MudTextField @bind-Value="@c_comp.Percent" Label="%" Variant="Variant.Outlined" Margin="Margin.Dense" />
													</MudStack>
													@if (c_comp is WMLine mLine)
													{
														<MudColorPicker Label="分割线颜色" ColorPickerView="ColorPickerView.Grid" @bind-Text="mLine.Color" />
														<div class="d-flex justify-space-between mt-5">
															<MudText Typo="Typo.button">线方向</MudText>
															<MudToggleGroup @bind-Value="@mLine.Orientation" T="Watermark.Shared.Enums.Orientation" Outline="true" Delimiters="true" Dense="true" Rounded="false" CheckMark="false" FixedContent="false">
																<MudToggleItem Value="@(Watermark.Shared.Enums.Orientation.Horizontal)">
																	<MudTooltip Text="水平" Color="Color.Primary" Placement="Placement.Top">
																		<MudIcon Icon="@Icons.Material.Filled.BorderHorizontal" />
																	</MudTooltip>
																</MudToggleItem>
																<MudToggleItem Value="@(Watermark.Shared.Enums.Orientation.Vertical)">
																	<MudTooltip Text="垂直" Color="Color.Primary" Placement="Placement.Top">
																		<MudIcon Icon="@Icons.Material.Filled.BorderVertical" />
																	</MudTooltip>
																</MudToggleItem>
															</MudToggleGroup>
														</div>
														<MudStack Row class="mt-5">
															<MudText Align="Align.Justify" Typo="Typo.button" Style="width:50%">线粗细</MudText>
															<MudTextField @bind-Value="@mLine.Thickness" Label="px" Variant="Variant.Outlined" Margin="Margin.Dense" />
														</MudStack>
													}
													else if (c_comp is WMLogo mLogo)
													{

														<MudStack Row class="mt-5" Justify="Justify.SpaceBetween">
															<MudText Typo="Typo.button">白底转透明像素</MudText>
															<MudSwitch @bind-Value="@mLogo.White2Transparent" Color="Color.Primary" />
														</MudStack>
														<MudStack Row class="mt-5" Justify="Justify.SpaceBetween">
															<MudText Typo="Typo.button">自动识别品牌图标</MudText>
															<MudSwitch @bind-Value="@mLogo.AutoSetLogo" Color="Color.Primary" />
														</MudStack>
														<div Class="mt-5" Style="display:flex;align-items:center;justify-content: space-between;">
															<MudText Align="Align.Justify" Typo="Typo.button">图片</MudText>
															@if (ImagesBase64.TryGetValue(mLogo.ID, out string src))
															{
																<MudImage Src="@src" ObjectFit="ObjectFit.Contain" Width="40" Style="float:right" />
															}
															<MudIconButton Icon="@Icons.Material.Filled.OpenInNew" OnClick="(()=> SelectImage(mLogo))" Style="float:right;max-width:80px;" />
														</div>
													}
													else if (c_comp is WMText mText)
													{
														<MudColorPicker Label="字体颜色" ColorPickerView="ColorPickerView.Grid" @bind-Text="mText.FontColor" Class="mt-5" />
														<MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" Class="mt-5">
															<MudToggleIconButton @bind-Toggled="@mText.IsItalic" Icon="@Icons.Material.Filled.FormatItalic" Color="@Color.Error"
																				 ToggledIcon="@Icons.Material.Filled.FormatItalic" ToggledColor="@Color.Primary" />
															<MudToggleIconButton @bind-Toggled="@mText.IsBold" Icon="@Icons.Material.Filled.FormatBold" Color="@Color.Error"
																				 ToggledIcon="@Icons.Material.Filled.FormatBold" ToggledColor="@Color.Primary" />
														</MudButtonGroup>

														<p Class="mt-5" style="font-weight:normal">文字内容</p>
														<div Style="line-height:30px;border-bottom:1px solid #808080;height:30px;font-weight:normal">
															<div style="width:calc(100% - 80px);float:left;overflow-x:auto;white-space:nowrap">
																@(string.Join(" ", mText.Exifs.Select(x => x.Prefix + x.Value + x.Suffix)))
															</div>
															<MudIconButton Icon="@Icons.Material.Filled.OpenInNew" OnClick="(()=>OpenExifDialog(mText))" Style="float:right;max-width:80px;" Size="Size.Small" />
														</div>


														<MudTextField @bind-Value="@mText.FontSize" Label="字体大小" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mt-5" />
														<MudStack Class="mt-5">
															<MudTextField @bind-Value="@mText.FontFamily" Label="字体" Variant="Variant.Outlined" Margin="Margin.Dense" />
															<MudStack Row>
																<MudMenu Label="选择系统字体" Variant="Variant.Filled" Color="Color.Primary" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" Style="white-space: nowrap;">
																	@foreach (var font in SkiaSharp.SKFontManager.Default.FontFamilies)
																	{
																		<MudMenuItem OnClick="()=> mText.FontFamily = font">
																			@font
																		</MudMenuItem>
																	}
																</MudMenu>

																<MudButton StartIcon="@Icons.Material.Filled.FontDownload" Variant="Variant.Filled" Color="Color.Primary" Style="white-space: nowrap;" OnClick="()=>SelectLocalFont(mText)">字体库</MudButton>
																<MudButton Variant="Variant.Filled" OnClick="ImportLocalFont" Style="white-space: nowrap;">导入本地</MudButton>
															</MudStack>
														</MudStack>

														<MudStack Row class="mt-5" Style="position:relative">
															<MudText Align="Align.Justify" Typo="Typo.button">文字边框</MudText>
															<MudSwitch @bind-Value="@mText.EnableBorder" Color="Color.Primary" Style="position:absolute;right:5px" />
														</MudStack>
														<MudTextField @bind-Value="@mText.BorderWidth" Label="边框宽度" Variant="Variant.Outlined" Margin="Margin.Dense" class="mt-5" />
														<MudTextField @bind-Value="@mText.BorderRadius" Label="边框圆角度数" Variant="Variant.Outlined" Margin="Margin.Dense" class="mt-5" />
														<MudColorPicker Label="边框颜色" ColorPickerView="ColorPickerView.Grid" @bind-Text="mText.BorderColor" Class="mt-5" />
													}
												</MudExpansionPanel>
											}
										</MudExpansionPanels>
									</MudExpansionPanel>
								}
								else
								{
									<MudExpansionPanel Text="@ctrl.Name">
										<MudStack Row Class="mt-5">
											<MudTextField @bind-Value="@ctrl.Margin.Top" Label="上边距" Variant="Variant.Outlined" Margin="Margin.Dense" />
											<MudTextField @bind-Value="@ctrl.Margin.Bottom" Label="下边距" Variant="Variant.Outlined" Margin="Margin.Dense" />
											<MudTextField @bind-Value="@ctrl.Margin.Left" Label="左边距" Variant="Variant.Outlined" Margin="Margin.Dense" />
											<MudTextField @bind-Value="@ctrl.Margin.Right" Label="右边距" Variant="Variant.Outlined" Margin="Margin.Dense" />
										</MudStack>
										<MudStack Row class="mt-5">
											<MudText Align="Align.Justify" Typo="Typo.button" Style="width:50%">组件占容器比例</MudText>
											<MudTextField @bind-Value="@ctrl.Percent" Label="%" Variant="Variant.Outlined" Margin="Margin.Dense" />
										</MudStack>
										@if (ctrl is WMLine mLine)
										{
											<MudColorPicker Label="分割线颜色" ColorPickerView="ColorPickerView.Grid" @bind-Text="mLine.Color" />
											<div class="d-flex justify-space-between mt-5">
												<MudText Typo="Typo.button">线方向</MudText>
												<MudToggleGroup @bind-Value="@mLine.Orientation" T="Watermark.Shared.Enums.Orientation" Outline="true" Delimiters="true" Dense="true" Rounded="false" CheckMark="false" FixedContent="false">
													<MudToggleItem Value="@(Watermark.Shared.Enums.Orientation.Horizontal)">
														<MudIcon Icon="@Icons.Material.Filled.BorderHorizontal" />
													</MudToggleItem>
													<MudToggleItem Value="@(Watermark.Shared.Enums.Orientation.Vertical)">
														<MudIcon Icon="@Icons.Material.Filled.BorderVertical" />
													</MudToggleItem>
												</MudToggleGroup>
											</div>
											<MudStack Row class="mt-5">
												<MudText Align="Align.Justify" Typo="Typo.button" Style="width:50%">线粗细</MudText>
												<MudTextField @bind-Value="@mLine.Thickness" Label="px" Variant="Variant.Outlined" Margin="Margin.Dense" />
											</MudStack>
										}
										else if (ctrl is WMLogo mLogo)
										{
											<MudStack Row class="mt-5" Justify="Justify.SpaceBetween">
												<MudText Typo="Typo.button">白底转透明像素</MudText>
												<MudSwitch @bind-Value="@mLogo.White2Transparent" Color="Color.Primary" />
											</MudStack>
											<MudStack Row class="mt-5" Justify="Justify.SpaceBetween">
												<MudText Typo="Typo.button">自动识别品牌图标</MudText>
												<MudSwitch @bind-Value="@mLogo.AutoSetLogo" Color="Color.Primary" />
											</MudStack>
											<div Class="mt-5" Style="display:flex;align-items:center;justify-content: space-between;">
												<MudText Align="Align.Justify" Typo="Typo.button">图片</MudText>
												@if (ImagesBase64.TryGetValue(mLogo.ID, out string src))
												{
													<MudImage Src="@src" ObjectFit="ObjectFit.Contain" Width="40" Style="float:right" />
												}
												<MudIconButton Icon="@Icons.Material.Filled.OpenInNew" OnClick="(()=> SelectImage(mLogo))" Style="float:right;max-width:80px;" />
											</div>
										}
										else if (ctrl is WMText mText)
										{
											<MudColorPicker Label="字体颜色" ColorPickerView="ColorPickerView.Grid" @bind-Text="mText.FontColor" Class="mt-5" />
											<MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" Class="mt-5">
												<MudToggleIconButton @bind-Toggled="@mText.IsItalic" Icon="@Icons.Material.Filled.FormatItalic" Color="@Color.Error"
																	 ToggledIcon="@Icons.Material.Filled.FormatItalic" ToggledColor="@Color.Primary" />
												<MudToggleIconButton @bind-Toggled="@mText.IsBold" Icon="@Icons.Material.Filled.FormatBold" Color="@Color.Error"
																	 ToggledIcon="@Icons.Material.Filled.FormatBold" ToggledColor="@Color.Primary" />
											</MudButtonGroup>

											<p Class="mt-5" style="font-weight:normal">文字内容</p>
											<div Style="line-height:30px;border-bottom:1px solid #808080;height:30px;font-weight:normal">
												<div style="width:calc(100% - 80px);float:left;overflow-x:auto;white-space:nowrap">
													@(string.Join(" ", mText.Exifs.Select(x => x.Prefix + x.Value + x.Suffix)))
												</div>
												<MudIconButton Icon="@Icons.Material.Filled.OpenInNew" OnClick="(()=>OpenExifDialog(mText))" Style="float:right;max-width:80px;" Size="Size.Small" />
											</div>

											<MudTextField @bind-Value="@mText.FontSize" Label="字体大小" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mt-5" />
											<MudStack Class="mt-5">
												<MudTextField @bind-Value="@mText.FontFamily" Label="字体" Variant="Variant.Outlined" Margin="Margin.Dense" />
												<MudStack Row>
													<MudMenu Label="选择系统字体" Variant="Variant.Filled" Color="Color.Primary" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" Style="white-space: nowrap;">
														@foreach (var font in SkiaSharp.SKFontManager.Default.FontFamilies)
														{
															<MudMenuItem OnClick="()=> mText.FontFamily = font">
																@font
															</MudMenuItem>
														}
													</MudMenu>

													<MudButton StartIcon="@Icons.Material.Filled.FontDownload" Variant="Variant.Filled" Color="Color.Primary" Style="white-space: nowrap;" OnClick="()=>SelectLocalFont(mText)">字体库</MudButton>
													<MudButton Variant="Variant.Filled" OnClick="ImportLocalFont" Style="white-space: nowrap;">导入本地</MudButton>
												</MudStack>

											</MudStack>

											<MudStack Row class="mt-5" Style="position:relative">
												<MudText Align="Align.Justify" Typo="Typo.button">文字边框</MudText>
												<MudSwitch @bind-Value="@mText.EnableBorder" Color="Color.Primary" Style="position:absolute;right:5px" />
											</MudStack>
											<MudTextField @bind-Value="@mText.BorderWidth" Label="边框宽度" Variant="Variant.Outlined" Margin="Margin.Dense" class="mt-5" />
											<MudTextField @bind-Value="@mText.BorderRadius" Label="边框圆角度数" Variant="Variant.Outlined" Margin="Margin.Dense" class="mt-5" />
											<MudColorPicker Label="边框颜色" ColorPickerView="ColorPickerView.Grid" @bind-Text="mText.BorderColor" Class="mt-5" />
										}
									</MudExpansionPanel>
								}
							}
						</MudExpansionPanels>
					</MudExpansionPanel>
				}
			</MudExpansionPanels>
		</div>
	</div>
</div>

<MudDialog @bind-IsVisible="showDialog" Options="DialogOptions" Style="max-width:400px;">
	<DialogContent>
		<MudForm>
			<MudTextField @bind-Value="newTemplateName" T="string" Label="模板名称" Required="true" RequiredError="模板名称不能为空" />
		</MudForm>
	</DialogContent>
	<DialogActions>
		<MudButton FullWidth="true" Variant="Variant.Filled" OnClick="SaveAs">确定</MudButton>
	</DialogActions>
</MudDialog>


@code {
	[Inject]
	private IDialogService DialogService { get; set; }
	bool showDialog = false;
	string newTemplateName = "";
	DialogOptions DialogOptions { get; set; } = new DialogOptions() { MaxWidth = MaxWidth.Medium, NoHeader = true };

	WMThickness BorderThickness = new WMThickness();
	WMCanvas canvas;
	string url = "";
	string defaultImage = "";
	bool SrcLoading = false;
	List<string> Fonts = new List<string>();
	ConcurrentDictionary<string, string> ImagesBase64 = new();

	protected override async Task OnInitializedAsync()
	{
		ConcurrentDictionary<string, byte[]> dic = new();
		canvas = CurrentCanvas;
		if (canvas.ImageProperties == null) canvas.ImageProperties = new WMImage();
		var p = Path.Combine(Global.AppPath.TemplatesFolder, canvas.ID, "default.jpg");
		Global.ImageFile2Base64(dic, p, "default");
		var folder = Global.AppPath.TemplatesFolder + canvas.ID + System.IO.Path.DirectorySeparatorChar;
		canvas.Children.ForEach(c =>
		{
			if (!string.IsNullOrEmpty(c.Path)) Global.ImageFile2Base64(dic, folder + c.Path, c.ID);
			c.Controls.ForEach(x =>
			{
				if (x is WMLogo mLogo) Global.ImageFile2Base64(dic, folder + mLogo.Path, mLogo.ID);
				else if (x is WMContainer mContainer)
				{
					mContainer.Controls.ForEach(z =>
					{
						if (z is WMLogo logo1) Global.ImageFile2Base64(dic, folder + logo1.Path, logo1.ID);
					});

				};
			});
		});
		foreach(var e in dic)
		{
			ImagesBase64[e.Key] = await JSRuntime.InvokeAsync<string>("byteToUrl", e.Value);
		}
		InitLocalFonts();
		PreviewImageRefresh();

		HotkeyManager.Current.AddOrReplace("Increment", Key.R, ModifierKeys.Control, OnIncrementOrDecrement);
		var api = new APIHelper();
		var _ = api.PageVisitRecord(ProgramPage.Design, Platform.Win);
	}

	private async void PreviewImageRefresh()
	{
		SrcLoading = true;
		var b64 = await helper.GenerationAsync(canvas, null, true, true);
		url = await JSRuntime.InvokeAsync<string>("byteToUrl", b64);
		SrcLoading = false;
		StateHasChanged();

	}

	async void OpenExifDialog(WMText mText)
	{
		var parameters = new DialogParameters<ExifConfig>();
		parameters.Add(x => x.Exifs, mText.Exifs);
		var option = new DialogOptions() { NoHeader = true, MaxWidth = MaxWidth.Medium };
		var rst = DialogService.Show<ExifConfig>("", parameters, option);
		var dialogResult = await rst.Result;
		if (!dialogResult.Canceled)
		{
			mText.Exifs = (List<WMExifConfigInfo>)dialogResult.Data;
			PreviewImageRefresh();
		}
	}

	async void OpenEditDialog()
	{
		var parameters = new DialogParameters<EditComponentDialog>();
		parameters.Add(x => x.mCanvas, canvas);
		var option = new DialogOptions() { NoHeader = true, MaxWidth = MaxWidth.Medium };
		var rst = DialogService.Show<EditComponentDialog>("编辑模板", parameters, option);
		var dialogResult = await rst.Result;
		if (!dialogResult.Canceled)
		{
			StateHasChanged();
		}
	}

	async void SaveTemplate()
	{
		try
		{
			var path = Global.AppPath.TemplatesFolder + CurrentCanvas.ID;
			if (!System.IO.Directory.Exists(path))
			{
				System.IO.Directory.CreateDirectory(path);
			}
			var json = Global.CanvasSerialize(canvas);
			System.IO.File.WriteAllText(path + System.IO.Path.DirectorySeparatorChar + "config.json", json);
			if (cloud == "cloud")
			{
				APIHelper helper = new APIHelper();
				await helper.UploadToQiniu(CurrentCanvas.ID, "");
			}
		}
		catch { }
		finally
		{
			string message = "保存成功！";
			ClientInstance.ShowMsg(Snackbar, message, Severity.Success);
		}
	}

	void SaveAs()
	{
		string message = "保存成功！";
		try
		{
			if (string.IsNullOrEmpty(newTemplateName)) return;
			var ID = Guid.NewGuid().ToString("N").ToUpper();
			var path = Global.AppPath.TemplatesFolder + ID;
			if (!System.IO.Directory.Exists(path))
			{
				System.IO.Directory.CreateDirectory(path);
			}
			var source = Global.AppPath.TemplatesFolder + canvas.ID;
			DirectoryInfo info = new DirectoryInfo(source);
			foreach (var file in info.GetFiles())
			{
				if (file.Exists)
				{
					var target = path + Path.DirectorySeparatorChar + file.Name;
					file.CopyTo(target, true);
				}
			}
			var json = Global.CanvasSerialize(canvas);
			var newCanvas = Global.ReadConfig(json);
			newCanvas.ID = ID;
			newCanvas.Name = newTemplateName;
			var newJson = Global.CanvasSerialize(newCanvas);
			System.IO.File.WriteAllText(path + System.IO.Path.DirectorySeparatorChar + "config.json", newJson);
			showDialog = false;
			StateHasChanged();
		}
		catch (Exception ex)
		{
			message = ex.Message;
		}
		ClientInstance.ShowMsg(Snackbar, message, Severity.Success);
	}

	void SelectImage(WMLogo mLogo)
	{
		var dic = new ConcurrentDictionary<string, byte[]>();
		var action = new Action(async() =>
		{
			ClientInstance.SelectImageAction?.Invoke(canvas, mLogo, dic);
			foreach (var e in dic)
			{
				ImagesBase64[e.Key] = await JSRuntime.InvokeAsync<string>("byteToUrl", e.Value);
			}
			PreviewImageRefresh();
		});
		OpenWinHelper.Open(action);
	}

	void SelectImage(WMContainer mContainer)
	{
		var dic = new ConcurrentDictionary<string, byte[]>();
		var action = new Action(async () =>
		{
			ClientInstance.SelectContainerImageAction?.Invoke(canvas, mContainer, dic);
		foreach (var e in dic)
		{
			ImagesBase64[e.Key] = await JSRuntime.InvokeAsync<string>("byteToUrl", e.Value);
		}
		PreviewImageRefresh();
		});
		OpenWinHelper.Open(action);
	}

	void SelectDefaultImage()
	{
		var dic = new ConcurrentDictionary<string, byte[]>();
		var action = new Action(async () =>
		{
			ClientInstance.SelectDefaultImage(canvas.ID, dic);
			foreach (var e in dic)
			{
				ImagesBase64[e.Key] = await JSRuntime.InvokeAsync<string>("byteToUrl", e.Value);
			}
			PreviewImageRefresh();
		});
		OpenWinHelper.Open(action);
	}

	void ImportLocalFont()
	{
		var action = new Action(() =>
		{
			ClientInstance.ImportLocalFontAction?.Invoke(Fonts);
			PreviewImageRefresh();
		});
		OpenWinHelper.Open(action);
	}

	void InitLocalFonts()
	{
		var action = new Action(() =>
		{
			ClientInstance.InitLocalFontsAction?.Invoke(Fonts);
			PreviewImageRefresh();
		});
		OpenWinHelper.Open(action);
	}

	async void SelectLocalFont(WMText mText)
	{
		var dialog = DialogService.Show<FontsDialog>(string.Empty, new DialogOptions() { MaxWidth = MaxWidth.ExtraLarge, NoHeader = true });
		var result = await dialog.Result;
		if (!result.Canceled && result.Data is KeyValuePair<string, string> pair)
		{
			mText.FontFamily = pair.Key;
			PreviewImageRefresh();
		}
	}

	void RemoveImage(WMContainer container)
	{
		var filename = Global.AppPath.TemplatesFolder + canvas.ID + Path.DirectorySeparatorChar + container.Path;
		if (File.Exists(filename))
		{
			File.Delete(filename);
			container.Path = string.Empty;
			ImagesBase64.Remove(container.ID, out string v);
			PreviewImageRefresh();
		}
	}

	private void OnIncrementOrDecrement(object sender, HotkeyEventArgs e)
	{
		PreviewImageRefresh();
	}

	void ValueChanged2(string v)
	{
		canvas.LengthWidthRatio = v;
		var wh = v.Split(":");
		var w = Convert.ToDouble(wh[0]);
		var h = Convert.ToDouble(wh[1]);
		var xs = 6000 / w;
		canvas.CustomWidth = 6000;
		canvas.CustomHeight = (int)(xs * h);
		StateHasChanged();
	}
}