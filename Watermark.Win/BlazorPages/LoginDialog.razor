@using Watermark.Win.Models
@inject ISnackbar Snackbar

<MudDialog Style="width:400px;background:#F9FAFC">
    <DialogContent>
        <MudForm>
            <MudTextField @bind-Value="UserName" T="string" Label="邮箱" Required="true" RequiredError="邮箱不能为空" AutoFocus />
            <MudTextField @bind-Value="Password" T="string" Label="密码" Required="true" RequiredError="密码不能为空" Class="mt-5" InputType="InputType.Password" />
        </MudForm>
        <MudOverlay Visible="@Loading" DarkBackground="true" Absolute="false" ZIndex="999">
            <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
        </MudOverlay>

    </DialogContent>
    <DialogActions>
        <MudButton FullWidth="true" Variant="Variant.Filled" OnClick="LoginOK">确定</MudButton>
    </DialogActions>
</MudDialog>




@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    string UserName { get; set; }
    string Password { get; set; }
    bool Loading = false;




    public async void LoginOK()
    {
        Loading = true;
        APIHelper helper = new APIHelper();
        var result = await helper.LoginIn(UserName, Password);
        string message = "";
        Severity severity = Severity.Success;
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;

        if (result.success)
        {
            Global.CurrentUser = new WMLoginChildModel
                {
                    ID = result.data.data.ID,
                    IMG = result.data.data.IMG,
                    DISPLAY_NAME = result.data.data.DISPLAY_NAME,
                    USER_NAME = result.data.data.USER_NAME,
                    EXPIRE_DATE = result.data.data.EXPIRE_DATE
                };
            message = "登录成功";
            severity = Severity.Success;
            await Global.WriteAccount2LocalAsync(UserName, helper.GetMD5(Password));
            MudDialog.Close(true);
            StateHasChanged();
        }
        else
        {
            severity = Severity.Error;
            message = result.message?.content ?? result.data.Message;
        }

        Snackbar.Add(message, severity, config =>
        {
            config.ShowCloseIcon = false;
        });
        Loading = false;
        StateHasChanged();
    }
}
