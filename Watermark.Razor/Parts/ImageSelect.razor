@using System.Collections.Concurrent
@using Masa.Blazor
@using Watermark.Shared.Models

<style>
    .image-select {
        border-radius: 5px;
        border: 1px dashed lightgrey;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 2px auto
    }

    image-select:hover
    img:hover {
        cursor:pointer;
    }
</style>

<div style="height:100%;width:100%;display:flex;flex-direction:column;justify-content:center;">
    @if (ImagesBase64.TryGetValue(Key, out string? src) && !string.IsNullOrEmpty(src))
    {
        <MCard style="display:flex;justify-content:space-between;align-items:center;position:relative" class="pa-1 my-1" Flat Color="@ICONS.Colors.Gray.Light4">
            @if (!Simple)
            {
                <Label Name="图片" Small="false" />
            }
            
            <div style="@($"width:{Size + 5}px;height:{Size + 5}px;border-radius:5px;")">
                <MIcon Size="Simple ? 25: 15" OnClick="Del" Style="position:absolute;top:0px;right:0px;" Color="error">@ICONS.Delete</MIcon>
                <img style="@($"object-fit:{ObjectFit};width:{Size - 5}px;height:{Size - 5}px;margin:auto;width:100%;height:100%;")" src="@src" @onclick="SelectDefaultImage" />
            </div>
        </MCard>
        
    }
    else
    {
        <div style="@($"width:{Size}px;height:{Size}px;")" @onclick="SelectDefaultImage" class="image-select">
            <MIcon Size="@($"{Size / 2}px")" Style="color:lightgrey">mdi-image-plus</MIcon>
        </div>
    }
</div>


@code {
    [Parameter]
    public bool Simple { get; set; }
    [Parameter]
    public ConcurrentDictionary<string, string> ImagesBase64 { get; set; } = [];
    [Parameter]
    public string Key { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> SelectDefaultImage { get; set; }

    [Parameter]
    public EventCallback Delete { get; set; }
    [Parameter]
    public int Size { get; set; } = 250;
    [Parameter]
    public string ObjectFit { get; set; } = "cover";

    void Del()
    {
        if(Delete.HasDelegate)
        {
            Delete.InvokeAsync();
        }
    }
}
