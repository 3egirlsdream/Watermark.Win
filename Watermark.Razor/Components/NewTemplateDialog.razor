@using Masa.Blazor
@using Microsoft.JSInterop
@using MudBlazor
@using System.Collections.Concurrent
@using Watermark.Razor.Parts
@using Watermark.Shared.Models
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime

<style>
    .image-select1 {
        border-radius: 5px;
        border: 1px dashed lightgrey;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 2px auto
    }
</style>

<Masa.Blazor.MCard Flat>
    <MTextField @bind-Value="TemplateName" TValue="string" Label="模板名称" Required="true" RequiredMessage="模板名称不能为空" />
    <div style="display: flex; align-items: center; justify-content: center;">
        @if (!string.IsNullOrEmpty(Base64Src))
        {
            <MImage Width="250" Contain Src="@Base64Src" @onclick="SelectExampleImage"/>
        }
        else
        {
            <div style="@($"width:{250}px;height:{250}px;")" @onclick="SelectExampleImage" class="image-select1">
                <MIcon Size="@("8rem")" Style="color:lightgrey">mdi-image-plus</MIcon>
            </div>
        }
    </div>
    <MCardActions>
        <MSpacer/>
        <MButton OnClick="OK" Color="primary">
            @if (_processing)
            {
                <MProgressCircular Size="12" Indeterminate="true" />
            }
            else
            {
                <span>确定</span>
            }
        </MButton>
    </MCardActions>
</Masa.Blazor.MCard>




@code {
    [Parameter]
    public Action<WMCanvas> Ok { get; set; }
    [Parameter]
    public Func<Task<string>> SelectDefaultImageAction { get; set; }
    [Parameter]
    public string ID { get; set; }
    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    bool _processing = false;
    string TemplateName;
    string Base64Src;
    void OK()
    {
        if (string.IsNullOrEmpty(TemplateName) || string.IsNullOrEmpty(Base64Src)) return;
        var canvas = new WMCanvas() { Name = TemplateName, ID = ID };
        var basePath = Global.AppPath.TemplatesFolder + canvas.ID;
        if (!Directory.Exists(basePath))
        {
            Directory.CreateDirectory(basePath);
        }
        Ok?.Invoke(canvas);
        if (OnClose.HasDelegate)
        {
            OnClose.InvokeAsync(true);
        }
    }

    async void SelectExampleImage()
    {
        if (SelectDefaultImageAction is null) return;
        var p = await SelectDefaultImageAction!.Invoke();
        if (string.IsNullOrEmpty(p)) return;
        _processing = true;
        StateHasChanged();
        var dic = new ConcurrentDictionary<string, byte[]>();
        var destFolder = Global.AppPath.TemplatesFolder + ID;
        if (!System.IO.Directory.Exists(destFolder))
        {
            System.IO.Directory.CreateDirectory(destFolder);
        }

        var name = p.Substring(p.LastIndexOf('\\') + 1);
        var destFile = destFolder + System.IO.Path.DirectorySeparatorChar + "default.jpg";
        await Task.Run(() =>
        {
            Global.ImageFile2Base64(dic, p, "default");
            SkiaSharp.SKBitmap bitmap = SkiaSharp.SKBitmap.Decode(p);
            Global.WriteThumbnailImage(bitmap, destFile);
        });

        Base64Src = await JSRuntime.InvokeAsync<string>("byteToUrl", dic.First().Value);
        _processing = false;
        StateHasChanged();
    }
}