@using Masa.Blazor
@using System.Collections.Concurrent
@using Microsoft.JSInterop
@using SkiaSharp
@using Watermark.Shared.Models
@using Watermark.Win.Models
@using Shared.Enums
@inject IJSRuntime JSRuntime
@inject IPopupService PopupService
<div style="@Style">
    <MTabs @bind-Value="tab" Height="30" FixedTabs>
        @foreach (var sub in tabs)
        {
            <MTab Value="sub" Style="min-width:0px;">
                @sub
            </MTab>
        }
    </MTabs>
    <div style="overflow-y: auto; scrollbar-width: none; height:calc(100% - 30px);">
        <MTabsItems Value="@tab">
            <MTabItem Value="@("大纲")">
                <EditComponentDialog mCanvas="canvas"/>
            </MTabItem>
            <MTabItem Value="@("画布")" Class="pa-1">
                <MCard Flat>
                    <Watermark.Razor.Parts.InputField Name="模板名称" @bind-Value="@canvas.Name" />
                    <Watermark.Razor.Parts.ColorPicker Name="背景颜色" @bind-Color="@canvas.BackgroundColor" />

                    <MRadioGroup @bind-Value="canvas.CanvasType" Column>
                        <MRadio Label="单图" TValue="CanvasType" Value="@(CanvasType.Normal)" />
                        <MRadio Label="拼图" TValue="CanvasType" Value="@(CanvasType.Split)" />
                    </MRadioGroup>

                    @if (canvas.CanvasType == CanvasType.Normal)
                    {
                        <Watermark.Razor.Parts.ExpandPanel Desc="基本图片" @bind-Expanded="canvas.ImageProperties.Show" Class="my-1">
                            <Watermark.Razor.Parts.ImageSelect ImagesBase64="@ImagesBase64" Key="default" Size="250" />
                        </Watermark.Razor.Parts.ExpandPanel>
                        <Watermark.Razor.Parts.ExpandPanel Desc="边距" Expanded="true" Class="my-1" ShowSwitch="false">
                            <Watermark.Razor.Parts.SliderInput @bind-Value="@canvas.BorderThickness.Top" Step="1" Name="上边距" />
                            <Watermark.Razor.Parts.SliderInput @bind-Value="@canvas.BorderThickness.Bottom" Step="1" Name="下边距" />
                            <Watermark.Razor.Parts.SliderInput @bind-Value="@canvas.BorderThickness.Left" Step="1" Name="左边距" />
                            <Watermark.Razor.Parts.SliderInput @bind-Value="@canvas.BorderThickness.Right" Step="1" Name="右边距" />
                        </Watermark.Razor.Parts.ExpandPanel>
                        <Watermark.Razor.Parts.ExpandPanel Desc="边框等宽" Expanded="true" Class="my-1" ShowSwitch="false" FlexStart="true">
                            <MCheckbox @bind-Value="canvas.BorderSameWidth.Top" Dense HideDetails="true" Label="上"></MCheckbox>
                            <MCheckbox @bind-Value="canvas.BorderSameWidth.Bottom" Dense HideDetails="true" Label="下"></MCheckbox>
                            <MCheckbox @bind-Value="canvas.BorderSameWidth.Left" Dense HideDetails="true" Label="左"></MCheckbox>
                            <MCheckbox @bind-Value="canvas.BorderSameWidth.Right" Dense HideDetails="true" Label="右"></MCheckbox>
                        </Watermark.Razor.Parts.ExpandPanel>

                        <Watermark.Razor.Parts.ExpandPanel Desc="阴影" @bind-Expanded="canvas.ImageProperties.EnableShadow" Class="my-1">
                            <Watermark.Razor.Parts.ColorPicker Name="颜色" @bind-Color="@canvas.ImageProperties.ShadowColor" />
                            <Watermark.Razor.Parts.SliderInput @bind-Value="@canvas.ImageProperties.ShadowRange" Step="1" Name="深度" Unit="" />
                        </Watermark.Razor.Parts.ExpandPanel>

                        <Watermark.Razor.Parts.ExpandPanel Desc="圆角" @bind-Expanded="canvas.ImageProperties.EnableRadius" Class="my-1">
                            <Watermark.Razor.Parts.SliderInput @bind-Value="@canvas.ImageProperties.CornerRadius" Step="1" Name="度数" Unit="" />
                        </Watermark.Razor.Parts.ExpandPanel>

                        <Watermark.Razor.Parts.ExpandPanel Desc="背景高斯模糊" @bind-Expanded="canvas.ImageProperties.EnableGaussianBlur" Class="my-1">
                            <Watermark.Razor.Parts.SliderInput @bind-Value="@canvas.ImageProperties.GaussianDeep" Step="1" Name="深度" Unit="" />
                        </Watermark.Razor.Parts.ExpandPanel>




                    }
                    else
                    {
                        <MSelect Value="canvas.LengthWidthRatio" Dense Items="Radioes" ItemText="e=>e" ItemValue="e=>e" ValueChanged="Changed" />
                        <Watermark.Razor.Parts.SliderInput @bind-Value="@canvas.CustomWidth" Step="1" Name="自定义宽度" Unit="px" />
                        <Watermark.Razor.Parts.SliderInput @bind-Value="@canvas.CustomHeight" Step="1" Name="自定义高度" Unit="px" />
                    }
                </MCard>
            </MTabItem>
            <MTabItem Value="@("画幅")">
                <Watermark.Razor.Parts.ExpandPanel Desc="画幅" @bind-Expanded="canvas.FrameProperties.Enabled" Color="@ICONS.Colors.Gray.Light1" Class="ma-1 pa-1">
                    <MSelect Items="Radioes"
                             ItemText="e => e"
                             ItemValue="u => u"
                             TItem="string"
                             TValue="string"
                             TItemValue="string"
                             @bind-Value="canvas.LengthWidthRatio"
                             Dense
                             HideDetails="true"
                             PersistentHint
                             Label="" Class="ma-1">
                    </MSelect>
                    <Watermark.Razor.Parts.SliderInput @bind-Value="@canvas.FrameProperties.BorderPadding" Step="1" Name="内边距" Unit="%" />
                    <Watermark.Razor.Parts.ExpandPanel Desc="阴影" @bind-Expanded="canvas.FrameProperties.EnableShadow" Class="my-1">
                        <Watermark.Razor.Parts.ColorPicker Name="颜色" @bind-Color="@canvas.FrameProperties.ShadowColor" />
                        <Watermark.Razor.Parts.SliderInput @bind-Value="@canvas.FrameProperties.ShadowRange" Step="1" Name="深度" Unit="" />
                    </Watermark.Razor.Parts.ExpandPanel>


                    <Watermark.Razor.Parts.ExpandPanel Desc="圆角" @bind-Expanded="canvas.FrameProperties.EnableRadius" Class="my-1">
                        <Watermark.Razor.Parts.SliderInput @bind-Value="@canvas.FrameProperties.CornerRadius" Step="1" Name="度数" Unit="" />
                    </Watermark.Razor.Parts.ExpandPanel>
                    <Watermark.Razor.Parts.ExpandPanel Desc="背景高斯模糊" @bind-Expanded="canvas.FrameProperties.EnableGaussianBlur" Class="my-1">
                        <Watermark.Razor.Parts.SliderInput @bind-Value="@canvas.FrameProperties.GaussianDeep" Step="1" Name="深度" Unit="" />
                    </Watermark.Razor.Parts.ExpandPanel>

                    <Watermark.Razor.Parts.ExpandPanel Desc="原背景透明" @bind-Expanded="canvas.FrameProperties.BeforeBkTransparent" Class="my-1" />
                </Watermark.Razor.Parts.ExpandPanel>
            </MTabItem>
            <MTabItem Value="@("图层")">
                <DesignConfigurationLayers canvas="@canvas" ImagesBase64="@ImagesBase64" RemoveImageEvt="RemoveImage" SelectImageEvt="SelectImage" />
            </MTabItem>
        </MTabsItems>
    </div>

    
</div>

<MDialog @bind-Value="showLogoStore" ContentStyle="height: 90%;overflow:hidden;scrollbar-width: none;border: 15px solid #fff;">
    @if (showLogoStore)
    {
        <LogoDialogContent OnClick="(e) => SelectLogoCallback(e)"/>
    }
</MDialog>

@code {
    [Parameter]
    public string Style { get; set; }
    StringNumber tab = "画布";
    List<string> tabs = ["大纲", "画布", "画幅", "图层"];
    [Parameter]
    public WMCanvas canvas { get; set; } = new();
    WMLogo Logo;
    [Parameter]
    public EventCallback<string> Changed { get; set; }

    public ConcurrentDictionary<string, string> ImagesBase64 { get; set; } = [];

    List<string> Radioes = new() { "1:1", "16:9", "9:16", "3:2", "2:3", "4:3", "3:4", "21:9", "18:9", "2.39:1" };
    bool showLogoStore = false;
    [Parameter]
    public Func<Task<string>> SelectDefaultImageEvt { get; set; }
    [Parameter]
    public Func<WMContainer, Task> SelectContainer { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ConcurrentDictionary<string, byte[]> dic = new();
            if (canvas.ImageProperties == null) canvas.ImageProperties = new WMImage();
            var p = Path.Combine(Global.AppPath.TemplatesFolder, canvas.ID, "default.jpg");
            Global.ImageFile2Base64(dic, p, "default");
            var folder = Global.AppPath.TemplatesFolder + canvas.ID + System.IO.Path.DirectorySeparatorChar;
            canvas.Children.ForEach(c =>
            {
                if (!string.IsNullOrEmpty(c.Path)) Global.ImageFile2Base64(dic, folder + c.Path, c.ID);
                c.Controls.ForEach(x =>
                {
                    if (x is WMLogo mLogo) Global.ImageFile2Base64(dic, folder + mLogo.Path, mLogo.ID);
                    else if (x is WMContainer mContainer)
                    {
                        mContainer.Controls.ForEach(z =>
                        {
                            if (z is WMLogo logo1) Global.ImageFile2Base64(dic, folder + logo1.Path, logo1.ID);
                        });

                    };
                });
            });
            foreach (var e in dic)
            {
                ImagesBase64[e.Key] = await JSRuntime.InvokeAsync<string>("byteToUrl", e.Value);
            }
        }
        catch (Exception err)
        {
            Common.ShowMsg(PopupService, err.Message, AlertTypes.Error);
        }
    }

    async void SelectDefaultImage()
    {
        var p = await SelectDefaultImageEvt.Invoke();
        if (string.IsNullOrEmpty(p)) return;
        ConcurrentDictionary<string, byte[]> dic = new();
        var destFolder = Global.AppPath.TemplatesFolder + canvas.ID;
        var destFile = destFolder + System.IO.Path.DirectorySeparatorChar + "default.jpg";
        SkiaSharp.SKBitmap bitmap = SkiaSharp.SKBitmap.Decode(p);
        var codec = SKCodec.Create(p);
        bitmap = WatermarkHelper.AutoOrient(codec, bitmap, bitmap.Info);
        Global.WriteThumbnailImage(bitmap, destFile);
        Global.ImageFile2Base64(dic, destFile, "default");
        ImagesBase64["default"] = await JSRuntime.InvokeAsync<string>("byteToUrl", dic.First().Value);
    }

    void RemoveImage(WMContainer container)
    {
        var filename = Global.AppPath.TemplatesFolder + canvas.ID + Path.DirectorySeparatorChar + container.Path;
        if (File.Exists(filename))
        {
            File.Delete(filename);
            container.Path = string.Empty;
            ImagesBase64.Remove(container.ID, out string v);
        }
    }

    async void SelectImage(IWMControl ctrl)
    {
        if (ctrl is WMLogo mLogo)
        {
            Logo = mLogo;
            showLogoStore = true;
        }
        else if (ctrl is WMContainer mContainer)
        {
            var rs = SelectContainer.Invoke(mContainer);
            await rs;
            var destFile = Global.AppPath.TemplatesFolder + canvas.ID + Path.DirectorySeparatorChar + Path.GetFileName(mContainer.Path);
            using var bitmap = SKBitmap.Decode(mContainer.Path);
            if (bitmap is null) return;
            var codec = SKCodec.Create(mContainer.Path);
            using var bitmap2 = WatermarkHelper.AutoOrient(codec, bitmap, bitmap.Info);
            Global.WriteThumbnailImage(bitmap2, destFile);
            ConcurrentDictionary<string, byte[]> dic = [];
            Global.ImageFile2Base64(dic, destFile, mContainer.ID);
            mContainer.Path = Path.GetFileName(mContainer.Path);
            ImagesBase64[mContainer.ID] = await JSRuntime.InvokeAsync<string>("byteToUrl", dic.First().Value);
        }
    }

    async void SelectLogoCallback(KeyValuePair<string, string> pair)
    {
        Logo.Path = pair.Key;
        var destFile = Global.AppPath.LogoesFolder + Path.DirectorySeparatorChar + Logo.Path;
        ConcurrentDictionary<string, byte[]> dic = [];
        Global.ImageFile2Base64(dic, destFile, Logo.ID);
        ImagesBase64[Logo.ID] = await JSRuntime.InvokeAsync<string>("byteToUrl", dic.First().Value);
        showLogoStore = false;
        StateHasChanged();
    }
}
