@using MudBlazor
@using Watermark.Win.Models
@inject APIHelper api
<MudDialog Options="DialogOptions" Style="width:400px;">
    <DialogContent>
        <MudForm>
            <MudTextField T="string" @bind-Value="Name" Label="模板名称" Required RequiredError="模板名称不能为空" />
            <MudTextField T="string" @bind-Value="Desc" Label="模板描述" />
            <MudText Typo="Typo.subtitle2" Style="font-size: 0.75rem">标签</MudText>
            <MudChipSet>
                @foreach (var tag in Tags)
                {
                    <MudChip Label OnClose="()=> Close(tag)">
                        @tag
                    </MudChip>
                }
            </MudChipSet>
            <Masa.Blazor.MTextField TValue="string" @bind-Value="label" Label="回车添加标签" OnKeyUp="(e) => OnKeyUp(e)">
            </Masa.Blazor.MTextField>
            <MudTextField @bind-Value="Coin" T="int" Required Label="下载点数" />
            <MudCheckBox Required ErrorText="@("请同意用户协议")" @bind-Value="agreeUserProtocol" T="bool"><a> <span @onclick="() => _expanded = !_expanded">同意用户协议</span> </a></MudCheckBox>
            <MudCollapse Expanded="_expanded">
                •请勿使用含有版权的图片或者图标(使用可商用代替)<br>
                •请勿使用商用付费的字体文件<br>
                •若发现侵权作品或资源，管理员将直接删除
            </MudCollapse>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton FullWidth="true" Variant="Variant.Filled" OnClick="OK">确定</MudButton>
    </DialogActions>
</MudDialog>
@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    DialogOptions DialogOptions { get; set; } = new DialogOptions() { MaxWidth = MaxWidth.Medium, NoHeader = true };


    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public string Name { get; set; }
    string Desc { get; set; }
    List<string> Tags { get; set; } = [];
    int Coin { get; set; } = 0;
    bool _expanded { get; set; }
    bool agreeUserProtocol = false;
    string label { get; set; }
    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            var rst = await api.GetInfoById(Id);
            if (rst.success && rst.data != null)
            {
                Desc = rst.data.DESC;
                Coin = rst.data.COINS;
                Tags = rst.data.TAGS_LIST;
            }

            var canvas = await Global.GetCanvasSerialize(Id);
            if(canvas != null)
            {
                var t = canvas.Logos.Any(x => x.AutoSetLogo);
                if (t)
                {
                    if(!Tags.Any(x=>x =="自动图标"))
                    {
                        Tags.Insert(0, "自动图标");
                    }
                }
                else
                {
                    if (Tags.Any(x => x =="自动图标"))
                    {
                        Tags.Remove("自动图标");
                    }
                }
            }
        }
    }

    void OK()
    {
        if (string.IsNullOrEmpty(Name) || !agreeUserProtocol) return;
        MudDialog.Close(new { Name, Desc, Coin, Tags = string.Join(';', Tags) });
    }

    void OnKeyUp(KeyboardEventArgs evt)
    {
        if(evt.Code == "Enter")
        {
            Tags.Add(label);
            label = "";
            StateHasChanged();
        }
    }

    void Close(string tag)
    {
        Tags = Tags.Where(x => x != tag).ToList();
        StateHasChanged();
    }
}
