@using Masa.Blazor
@using Watermark.Shared.Models
@inject APIHelper api
<Masa.Blazor.MCard Flat>
    <MTextField TValue="string" @bind-Value="Name" Label="模板名称" Required RequiredMessage="模板名称不能为空" />
    <MTextField TValue="string" @bind-Value="Desc" Label="模板描述" />
    <Watermark.Razor.Parts.ExpandPanel Desc="标签" ShowSwitch="false" Expanded="@(Tags.Any())">
        <MChipGroup Style="display:flex;flex-wrap:wrap" Column Class="mx-1">
            @foreach (var tag in Tags)
            {
                <MChip Label Close OnCloseClick="()=> Close(tag)">
                    @tag
                </MChip>
            }
        </MChipGroup>
    </Watermark.Razor.Parts.ExpandPanel>
    
    <Masa.Blazor.MTextField TValue="string" @bind-Value="label" Label="回车添加标签" OnKeyUp="(e) => OnKeyUp(e)">
    </Masa.Blazor.MTextField>
    <MTextField @bind-Value="Coin" TValue="int" Required Label="下载点数" />
    <MCheckbox Required @bind-Value="agreeUserProtocol" TValue="bool" Label="同意用户协议"/>
    <Watermark.Razor.Parts.ExpandVisiblePanel Desc="注意事项" ShowIcon="false">
        •请勿使用含有版权的图片或者图标(使用可商用代替)<br>
        •请勿使用商用付费的字体文件<br>
        •若发现侵权作品或资源，管理员将直接删除
    </Watermark.Razor.Parts.ExpandVisiblePanel>
    <Masa.Blazor.MCardActions>
        <MSpacer/>
        <MButton OnClick="OK" Color="primary">确定</MButton>
    </Masa.Blazor.MCardActions>
</Masa.Blazor.MCard>
@code {

    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public string Name { get; set; }
    string Desc { get; set; }
    List<string> Tags { get; set; } = [];
    int Coin { get; set; } = 0;
    bool _expanded { get; set; }
    bool agreeUserProtocol = false;
    string label { get; set; }

    [Parameter]
    public EventCallback<dynamic> OnClose { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            var rst = await api.GetInfoById(Id);
            if (rst.success && rst.data != null)
            {
                Desc = rst.data.DESC;
                Coin = rst.data.COINS;
                Tags = rst.data.TAGS_LIST;
            }

            var canvas = await Global.GetCanvasSerialize(Id);
            if(canvas != null)
            {
                var t = canvas.Logos.Any(x => x.AutoSetLogo);
                if (t)
                {
                    if(!Tags.Any(x => x == "自动图标"))
                    {
                        Tags.Insert(0, "自动图标");
                    }
                }
                else
                {
                    if (Tags.Any(x => x == "自动图标"))
                    {
                        Tags.Remove("自动图标");
                    }
                }
            }
        }
    }

    void OK()
    {
        if (string.IsNullOrEmpty(Name) || !agreeUserProtocol) return;
        if(OnClose.HasDelegate)
        {
            OnClose.InvokeAsync(new { Name, Desc, Coin, Tags = string.Join(';', Tags) });
        }
    }

    void OnKeyUp(KeyboardEventArgs evt)
    {
        if(evt.Code == "Enter")
        {
            Tags.Add(label);
            label = "";
            StateHasChanged();
        }
    }

    void Close(string tag)
    {
        Tags = Tags.Where(x => x != tag).ToList();
        StateHasChanged();
    }

    public class UploadParameter
    {
        public bool Show { get; set; } = false;
        public string Id { get; set; }
        public string Name { get; set; }
    }
}
