@using System.Diagnostics
@using System.IO
@using Masa.Blazor
@using Masa.Blazor.Presets
@using Watermark.Razor
@using Watermark.Razor.Parts
@using Watermark.Shared.Enums
@using Watermark.Win.Models
@using Watermark.Shared.Models
@inject APIHelper api

@inject IPopupService PopupService
@implements IDisposable

<style>
    .flex-vertical-center {
        display: flex;
        align-items: center;
    }



    .fullscreen {
        opacity: 0;
        position: absolute;
    }

        .fullscreen:hover {
            opacity: 1;
            z-index: 10;
        }

    .fullscreen-icon {
    }

        .fullscreen-icon:hover
        .fullscreen {
            opacity: 1;
            cursor: pointer;
            z-index: 10;
        }

    .dfm-card-name {
        text-overflow: ellipsis;
        white-space: nowrap;
        overflow-x: hidden
    }

    .dfm-card-user-name {
        position: relative;
        display: flex;
        align-items: center;
        text-overflow: ellipsis;
        white-space: nowrap;
        overflow-x: hidden;
        height: 24px;
    }

    .dfm-card-footer {
        position: relative;
        height: 30px;
        display: flex;
        align-items: center;
    }
</style>
<MCard Flat Style="height:100%">
    <MToolbar Flat
              Color="primary"
              Dark>
        <MToolbarTitle Style="position:absolute">模板市场</MToolbarTitle>
        <MSpacer />
        <div style="width:220px" class="mr-2">
            <MTextField Color="secondary" @bind-Value="Search" Label="搜索" HideDetails="true" Dense AppendIcon="@ICONS.Search" @onkeyup="OnKeyDown" />
        </div>
    </MToolbar>
    <div style="height:calc(100% - 64px); overflow:auto;scrollbar-width: none;border:10px solid #fff">
        @if (!string.IsNullOrEmpty(Search) && SearchList != null)
        {
            @RenderProductList(SearchList.ToList())
        }
        else
        {
            @foreach (var sub in subscribed)
            {
                <MCol Cols="12">
                    <div style="font-size:1.5rem"><b>@sub.Item1</b></div>
                </MCol>
                @RenderProductList(sub.Item2)
            }
            <MPagination Value="@start" ValueChanged="PageChanged" Length="@pageCount" TotalVisible="7" Class="mt-2"></MPagination>
        }

    </div>


    <MOverlay @bind-Value="@loading" Dark="false" Absolute="false" ZIndex="9999" Color="#e6e6e6" Opacity="1">
        <div Style="display:flex;flex-direction:column;height:160px;width:160px;align-items:center;justify-content:center">
            <MProgressCircular Indeterminate="true" Color="primary" Class="my-1" />
            <Label Name="@loadingMessage" />
        </div>
    </MOverlay>
    <MDialog @bind-Value="@FocusImageShow" ContentStyle="height:80%;max-width:60%;overflow:hidden;">
        <MCard Style="position:relative; background:#E5E5E5;margin:auto;padding:30px" Elevation="25" Width="@("100%")" Height="@("100%")">
            <IconButton Icon="@ICONS.FullScreenExit" Color="#747474" Text="true" OnClick="()=>FocusImageShow = false" Style="position:absolute;right:0px;top:0px;" />
            <MImage Contain Src="@FocusImage" Style="height: 100%; width:100%; " Class="rounded-lg" />
        </MCard>
    </MDialog>

    <MDialog ContentStyle="width:350px;padding:10px;" @bind-Value="showLogin">
        <LoginContent CloseEvent="() => showLogin = false" />
    </MDialog>
</MCard>



@code {
    [Parameter]
    public Func<string, Task> ClipboardAction { get; set; }
    [Parameter]
    public EventCallback OnCloseEvt { get; set; }
    bool showLogin = false;
    bool loading = false;
    string loadingMessage = "正在加载模板...";
    string Search = "";
    bool FocusImageShow = false;
    string FocusImage = "";
    List<WMZipedTemplate> ZipedTemplates;
    IEnumerable<WMZipedTemplate> SearchList;
    List<WMZipedTemplate> newest;
    List<Tuple<string, List<WMZipedTemplate>>> subscribed = [];
    int start = 1;
    int pageCount;
    string sortType = "最热门";
    string sortCode => sortType == "最热门" ? "countDesc" : "timeDesc";
    List<string> subUser = [];
    protected override async Task OnInitializedAsync()
    {
        try
        {
            loading = true;
            StateHasChanged();
            var date = Global.ReadDate();
            if ((DateTime.Now - date).TotalDays > 5)
            {
                if (Directory.Exists(Global.AppPath.MarketFolder))
                {
                    Directory.Delete(Global.AppPath.MarketFolder, true);
                }
                Global.WriteDate();
            }

            await LoadTemplates();
            await api.PageVisitRecord(ProgramPage.Market, Global.DeviceType == DeviceType.Mac ? Platform.Mac : Platform.Win);
        }
        catch (Exception ex)
        {
            Common.ShowMsg(PopupService, ex.Message, AlertTypes.Error);
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    async Task LoadTemplates()
    {
        var allTemplates = (await api.GetWatermarks("", 1, 999)).Where(x => x.Visible);
        var recommend = allTemplates.Where(x => x.Recommend);
        var hottest = allTemplates.Where(x => !x.Recommend && x.CanvasType == CanvasType.Normal).Take(36).ToList();
        newest = allTemplates.OrderByDescending(x => x.DateTimeCreated).Where(x => !x.Recommend && x.CanvasType == CanvasType.Normal).ToList();
        pageCount = newest.Count / 12;
        var splits = allTemplates.Where(x => x.CanvasType == CanvasType.Split).ToList();
        ZipedTemplates = recommend.UnionBy(hottest, x => x.WatermarkId).UnionBy(newest, x => x.WatermarkId).UnionBy(splits, x => x.WatermarkId).ToList();
        subUser = await IntiSubscribedUserList();
        subscribed = new List<Tuple<string, List<WMZipedTemplate>>>();
        foreach (var su in subUser)
        {
            var tp = ZipedTemplates.Where(x => x.UserId == su).ToList();
            if (tp.Count > 0)
            {
                var tup = Tuple.Create(tp[0].UserDisplayName, tp);
                subscribed.Add(tup);
            }
        }
        subscribed.Add(Tuple.Create("推荐", ZipedTemplates.Where(x => x.Recommend).ToList()));

        subscribed.Add(Tuple.Create("热门", hottest.Where(x => !subUser.Contains(x.UserId)).ToList()));
        subscribed.Add(Tuple.Create("拼图", splits));

        subscribed.Add(Tuple.Create("最新", newest.Where(x => !subUser.Contains(x.UserId)).Skip((start - 1) * 12).Take(12).ToList()));
        ZipedTemplates.ForEach(x => x.Src = Global.GetSrc(x.WatermarkId));
        StateHasChanged();
    }

    internal RenderFragment RenderProductList(List<WMZipedTemplate> products) => __builder =>
       {
           <MRow Dense>
               @foreach (var t in products)
               {
                   <MCol Cols="2">
                       <MCard Class="pa-2 fullscreen-icon" style="background:#E5E5E5;" Elevation="0" Flat>
                           <IconButton Text="true" Icon="@ICONS.FullScreen" Class="fullscreen" OnClick="@(()=> { FocusImageShow = true; FocusImage = t.Src; })" Style="right: 5px;top:5px;" IconColor="#747474" />

                           <div class="dfm-card-footer fullscreen" style="position:absolute;right:10px;bottom: 10px;">
                               <IconButton Elevation="5" Icon="@ICONS.Bell" IconColor="@(subscribed.Any(x=>x.Item1 == t.UserDisplayName) ? "#747474" :"warning")" OnClick="()=>Subscribe(t.UserId)" Style="margin-right:10px" />

                               <IconButton Elevation="5" Icon="@ICONS.Download" OnClick="()=>Download(t.WatermarkId, t.UserId)" Style="@($"margin-right:10px")" IconColor="#747474"></IconButton>
                               <IconButton Elevation="5" Icon="@ICONS.Share" OnClick="()=>Share(t.WatermarkId)" IconColor="#747474"></IconButton>
                           </div>
                           @if (!string.IsNullOrEmpty(t.Src))
                           {
                               <MImage Style="@($"width:100%;height:{(t.Tags != null && t.Tags.Any() ? "215px" : "232px")};")" Src="@t.Src" Contain />
                           }
                           else
                           {
                               <MProgressCircular Color="secondary" Indeterminate="true" Style="margin-left:calc(50% - 20px)" />
                           }

                           <Watermark.Razor.Parts.CardTitle t="t" ShowDesc="false" Small="true" Tags="GetTags(t.Tags)" />
                           <div class="dfm-card-user-name">
                               @if (t.UserId == "0BECCA9A-6F10-4A88-8753-921195D08853" || t.UserId == "9DEBF7DC-F58C-4667-BACF-A6BFD18352EB")
                               {
                                   <MIcon Color="orange" Size="12">mdi-check-decagram</MIcon>
                               }
                               else
                               {
                                   <MIcon Icon="@ICONS.Account" Size="12" />
                               }

                               <span style="@($"color:#9E9E9E;padding-top: 2px;margin-left:2px;font-size:0.55rem")">
                                   @t.UserDisplayName
                               </span>
                           </div>
                       </MCard>
                   </MCol>
               }
           </MRow>
       };

    async void Share(string id)
    {
        var t = ClipboardAction.Invoke(id);
        await t;
        string message = "已复制ID到剪贴板";
        Common.ShowMsg(PopupService, message, AlertTypes.Success);
    }

    async void Download(string watermarkId, string userId)
    {
        if (Global.DeviceType != DeviceType.Mac && (Global.CurrentUser == null || string.IsNullOrEmpty(Global.CurrentUser.ID)))
        {
            showLogin = true;
            return;
        }
        string message = "";
        AlertTypes Severity = AlertTypes.Success;
        var result = await api.Download(watermarkId, userId);
        if (result)
        {
            Severity = AlertTypes.Success;
            message = "下载成功";
            if (Global.CurrentUser != null && !string.IsNullOrEmpty(Global.CurrentUser.ID))
            {
                var _ = api.AddILike(Global.CurrentUser.ID, watermarkId);
            }
        }
        else
        {
            Severity = AlertTypes.Error;
            message = "下载失败";
        }
        Common.ShowMsg(PopupService, message, Severity);
    }

    void OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            SearchList = ZipedTemplates.AsEnumerable();
            if (!string.IsNullOrEmpty(Search))
            {
                SearchList = ZipedTemplates.Where(x => x.Desc.Contains(Search) || x.WatermarkId == Search || x.UserDisplayName.Contains(Search));
            }
            StateHasChanged();
        }
    }

    async Task<List<string>> IntiSubscribedUserList()
    {
        if (Global.CurrentUser == null || string.IsNullOrEmpty(Global.CurrentUser.ID)) return [];
        var result = await api.GetISubscribed(Global.CurrentUser.ID);
        if (result.success)
        {
            return result.data;
        }
        else
        {
            Common.ShowMsg(PopupService, result.message?.content, AlertTypes.Error);
        }
        return [];
    }

    async void Subscribe(string userId)
    {
        if (Global.CurrentUser == null || string.IsNullOrEmpty(Global.CurrentUser.ID)) return;
        var r = await api.SubscribeUser(Global.CurrentUser.ID, userId);
        await LoadTemplates();
    }

    public void Dispose()
    {
        ZipedTemplates = null;
        newest = null;
        subscribed = null;

        if (OnCloseEvt.HasDelegate)
        {
            OnCloseEvt.InvokeAsync();
        }
    }
    public List<BlockTextTag> GetTags(List<string> tags)
    {
        return tags.Select(x => new BlockTextTag(x, "#1976d2", "white")).ToList();
    }

    void PageChanged(int t)
    {
        start = t;
        subscribed.RemoveAt(subscribed.Count - 1);
        subscribed.Add(Tuple.Create("最新", newest.Where(x => !subUser.Contains(x.UserId)).Skip((start - 1) * 12).Take(12).ToList()));
    }
}