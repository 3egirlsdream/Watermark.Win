@using Masa.Blazor
@using Microsoft.AspNetCore.Components.Forms
@using Watermark.Razor.Parts
@using Watermark.Shared.Models
@using Watermark.Win.Models
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations

<style>
    .edit-content-style {
        width:400px;
        padding:4px
    }

    .edit-subtitle-font {
        font-size: 0.75rem;
        font-weight: 300;
    }

    .edit-subtitle-box {
        display: grid;
        grid-template-columns: 1fr auto;
        align-items: center;
        width: calc(100% - 12px);
        min-height: 36px;
    }
</style>

<div class="pa-1">
    <div style="display:flex;justify-content:flex-start;width:100%;align-items:center;font-weight:700;">
        <IconButton OnClick="OpenAddControl" Elevation="0" Class="my-2 mr-1" Icon="@ICONS.Add" />
        新增组件或者图层
    </div>
    
    @foreach (var container in mCanvas.Children)
    {
        <ExpandVisiblePanel Desc="图层" Class="my-1 pa-1" @bind-Visible="container.Enabled">
            <div class="edit-subtitle-box">
                <MTextField @bind-Value="@container.Name" Label="名称" Required="true" HideDetails="true"/>
                <div style="justify-self: end;">
                    <IconButton Icon="@ICONS.ArrowUpward" Color="Color.Inherit" OnClick="()=>Upward(container.ID)" />
                    <IconButton Icon="@ICONS.ArrowDownward" Color="Color.Inherit" OnClick="()=>Downward(container.ID)" />
                    <IconButton Icon="@ICONS.Delete" Color="Color.Error" OnClick="()=>mCanvas.Children.Remove(container) " />
                </div>
            </div>
            @foreach (var comp in container.Controls)
            {

                @if (comp is WMContainer wc)
                {
                    <div>
                        <div class="edit-subtitle-box">
                            <span class="edit-subtitle-font">@wc.Name</span>
                            <div style="justify-self: end;">
                                <IconButton Icon="@ICONS.Edit" Color="Color.Inherit" OnClick="()=>Move(container.ID, wc, ContainerLv.Lv2)" />
                                <IconButton Icon="@ICONS.ArrowUpward" Color="Color.Inherit" OnClick="()=>Upward(wc.ID)" />
                                <IconButton Icon="@ICONS.ArrowDownward" Color="Color.Inherit" OnClick="()=>Downward(wc.ID)" />
                                <IconButton Icon="@ICONS.Delete" Color="Color.Error" OnClick="()=>container.Controls.Remove(comp) " />
                            </div>
                        </div>
                        @foreach (var cld_c in wc.Controls)
                        {
                            <div class="edit-subtitle-box ml-3">
                                <span class="edit-subtitle-font">@cld_c.Name</span>
                                <div style="justify-self: end;">
                                    <IconButton Icon="@ICONS.Edit" OnClick="()=>Move(wc.ID, cld_c, ContainerLv.Lv1)" />
                                    <IconButton Icon="@ICONS.ArrowUpward" OnClick="()=>Upward(cld_c.ID)" />
                                    <IconButton Icon="@ICONS.ArrowDownward" OnClick="()=>Downward(cld_c.ID)" />
                                    <IconButton Icon="@ICONS.Delete" OnClick="()=>wc.Controls.Remove(cld_c) " />
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="edit-subtitle-box">
                        <span class="edit-subtitle-font">@comp.Name</span>
                        <div style="justify-self: end;">
                            <IconButton Icon="@ICONS.Edit" Color="Color.Inherit" OnClick="() => Move(container.ID, comp, ContainerLv.Lv1)" />
                            <IconButton Icon="@ICONS.ArrowUpward" Color="Color.Inherit" OnClick="()=>Upward(comp.ID)" />
                            <IconButton Icon="@ICONS.ArrowDownward" Color="Color.Inherit" OnClick="()=>Downward(comp.ID)" />
                            <IconButton Icon="@ICONS.Delete" Color="Color.Error" OnClick="()=>container.Controls.Remove(comp) " />
                        </div>
                    </div>
                }

            }

        </ExpandVisiblePanel>
    }

    <MDialog @bind-Value="MoveContainer" ContentClass="edit-content-style">
        <div style="font-weight:700; font-size:1rem;">
            选择父级容器
        </div>
        <MDivider />
        @if (MoveContainer)
        {
            <MTextField @bind-Value="@MoveConntainerCtrl.Name" Label="名称" Required="true" />
            <MSelect Items="MoveContainers"
                     @bind-Value="MoveForwardConntainerId"
                     TItem="WMContainer"
                     TItemValue="string"
                     TValue="string"
                     Label="父级容器"
                     Dense
                     ItemText="e => e.Name"
                     ItemValue="u => u.ID">
            </MSelect>


        }
        <MButton Elevation="0" OnClick="MoveOK" Small>确定</MButton>
    </MDialog>
    <MDialog @bind-Value="param.AddControl" ContentClass="edit-content-style">
        <div style="font-weight:700; font-size:1rem;">
            新增组件
        </div>
        <MDivider/>
        @if (param.AddControl)
        {
            <div>
                <MRadioGroup @bind-Value="param.CtrlType" Row>
                    <MRadio Value="@CtrlEnum.Container" TValue="CtrlEnum" Label="容器"></MRadio>
                    <MRadio Value="@CtrlEnum.Image" TValue="CtrlEnum" Label="图片"></MRadio>
                    <MRadio Value="@CtrlEnum.Text" TValue="CtrlEnum" Label="文本"></MRadio>
                    <MRadio Value="@CtrlEnum.Line" TValue="CtrlEnum" Label="线"></MRadio>
                </MRadioGroup>
                <MTextField @bind-Value="@param.CtrlName" Label="名称" Required="true" Dense />
                <MSelect @bind-Value="param.ParentContainerId"
                         Items="mContainers"
                         TValue="string"
                         TItemValue="string"
                         TItem="WMContainer"
                         Label="父级容器"
                         ItemText="e => e.Name"
                         ItemValue="u => u.ID"
                         Dense
                         Required>
                </MSelect>
            </div>
        }
        <MButton OnClick="Add" Small Elevation="0">确定</MButton>
    </MDialog>
</div>




@code {
    [Parameter]
    public WMCanvas mCanvas { get; set; }
    AddParam param;

    void Add()
    {
        if (string.IsNullOrEmpty(param.CtrlName) || string.IsNullOrEmpty(param.ParentContainerId))
        {
            return;
        }
        IWMControl control;
        if (param.CtrlType == CtrlEnum.Container)
        {
            control = new WMContainer();
        }
        else if (param.CtrlType == CtrlEnum.Image)
        {
            control = new WMLogo();
        }
        else if (param.CtrlType ==  CtrlEnum.Line)
        {
            control = new WMLine();
        }
        else
        {
            control = new WMText();
        }
        control.Name = param.CtrlName;
        control.Margin = new WMThickness(0);
        control.Percent = 70;

        if (param.ParentContainerId == "0")
        {
            if (param.CtrlType == CtrlEnum.Container)
                mCanvas.Children.Add((WMContainer)control);
        }
        else
        {
            var ct = mContainers.FirstOrDefault(c => c.ID == param.ParentContainerId);
            if (ct != null)
            {
                ct.Controls.Add(control);
            }
        }

        InitAllContainer();
    }

    List<WMContainer> mContainers;
    List<IWMControl> controls;

    void InitAllContainer()
    {
        param = new AddParam();
        mContainers = new List<WMContainer>();
        mContainers.Add(new WMContainer() { Name = "根节点", ID = "0" });
        mContainers.AddRange(mCanvas.Children);
        mCanvas.Children.Select(c => c.Controls.Where(x => x is WMContainer)).ToList().ForEach(z =>
        {
            if (z != null)
                z.ToList().ForEach(v => mContainers.Add((WMContainer)v));


        });
    }

    protected override void OnInitialized()
    {
        InitAllContainer();

        controls = new List<IWMControl>();
        mCanvas.Children.Select(c => c.Controls.Where(x => !(x is WMContainer))).ToList().ForEach(x =>
        {
            if (x != null)
            {
                controls.AddRange(x);
            }
        });
    }


    void Upward(string id)
    {
        foreach (var container in mCanvas.Children)
        {
            if (container.ID == id)
            {
                var idx = mCanvas.Children.IndexOf(container);
                if (idx > 0)
                {
                    Swap(mCanvas.Children, idx - 1, idx);
                }
                break;
            }
            foreach (var child in container.Controls)
            {
                if (child.ID == id)
                {
                    var wcIdx = container.Controls.IndexOf(child);
                    if (wcIdx > 0)
                    {
                        Swap(container.Controls, wcIdx - 1, wcIdx);
                    }
                    break;
                }
                if (child is WMContainer wc)
                {
                    foreach (var cc in wc.Controls)
                    {
                        if (cc.ID == id)
                        {
                            var ccIdx = wc.Controls.IndexOf(cc);
                            if (ccIdx > 0)
                            {
                                Swap(wc.Controls, ccIdx - 1, ccIdx);
                            }
                            break;
                        }
                    }
                }
            }
        }
    }

    void Downward(string id)
    {
        foreach (var container in mCanvas.Children)
        {
            if (container.ID == id)
            {
                var idx = mCanvas.Children.IndexOf(container);
                if (idx < mCanvas.Children.Count - 1)
                {
                    Swap(mCanvas.Children, idx, idx + 1);
                }
                break;
            }
            foreach (var child in container.Controls)
            {
                if (child.ID == id)
                {
                    var wcIdx = container.Controls.IndexOf(child);
                    if (wcIdx < container.Controls.Count - 1)
                    {
                        Swap(container.Controls, wcIdx, wcIdx + 1);
                    }
                    break;
                }
                if (child is WMContainer wc)
                {
                    foreach (var cc in wc.Controls)
                    {
                        if (cc.ID == id)
                        {
                            var ccIdx = wc.Controls.IndexOf(cc);
                            if (ccIdx < wc.Controls.Count - 1)
                            {
                                Swap(wc.Controls, ccIdx, ccIdx + 1);
                            }
                            break;
                        }
                    }
                }
            }
        }
    }
    void Move(string parentId, IWMControl ctrl, ContainerLv lv)
    {
        MoveContainer = true;
        MoveForwardConntainerId = parentId;
        MoveConntainerCtrl = ctrl;
        MoveLv = lv;
        if (lv == ContainerLv.Lv2)
        {
            MoveContainers = mCanvas.Children;
        }
        else
        {
            MoveContainers = new List<WMContainer>(mContainers.Where(c => c.ID != "0"));
        }
        StateHasChanged();
    }
    void MoveOK()
    {
        MoveContainer = false;
        if (MoveLv == ContainerLv.Lv2) // container
        {
            WMContainer mContainer = null;
            foreach (var c in mCanvas.Children)
            {
                foreach (var child in c.Controls)
                {
                    if (child.ID == MoveConntainerCtrl.ID)
                    {
                        mContainer = child as WMContainer;
                        c.Controls.Remove(child);
                        break;
                    }
                }
            }

            if (mContainer != null)
            {
                var c = mCanvas.Children.Find(c => c.ID == MoveForwardConntainerId);
                if (c!=null)
                {
                    c.Controls.Add(mContainer);
                }
            }
        }
        else
        {
            IWMControl mCtrl = null;
            foreach (var c in mCanvas.Children)
            {
                foreach (var child in c.Controls)
                {
                    if (child.ID == MoveConntainerCtrl.ID)
                    {
                        mCtrl = child;
                        c.Controls.Remove(child);
                        break;
                    }
                    if (child is WMContainer wc)
                    {
                        foreach (var cc in wc.Controls)
                        {
                            if (cc.ID == MoveConntainerCtrl.ID)
                            {
                                mCtrl = cc;
                                wc.Controls.Remove(cc);
                                break;
                            }
                        }
                    }
                }
            }
            if (mCtrl != null)
            {
                var c = MoveContainers.FirstOrDefault(c => c.ID == MoveForwardConntainerId);
                if (c!=null)
                {
                    c.Controls.Add(mCtrl);
                }
            }
        }
    }
    bool MoveContainer = false;
    IWMControl MoveConntainerCtrl;
    string MoveForwardConntainerId;
    ContainerLv MoveLv;

    List<WMContainer> MoveContainers;
    void OpenAddControl()
    {
        param.AddControl = true;
        StateHasChanged();
    }
    public enum CtrlEnum
    {
        Container,
        Line,
        Text,
        Image
    }

    public class AddParam
    {
        public bool AddControl { get; set; } = false;
        public CtrlEnum CtrlType { get; set; }
        public string CtrlName { get; set; }
        public string ParentContainerId { get; set; }
    }
    public static List<T> Swap<T>(List<T> list, int index1, int index2)
    {
        var temp = list[index1];
        list[index1] = list[index2];
        list[index2] = temp;
        return list;
    }

    enum ContainerLv
    {
        Lv1,
        Lv2
    }
}