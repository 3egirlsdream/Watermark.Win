@page "/appsetting"
@using Masa.Blazor.Presets
@using Watermark.Razor.Components.Layout
@using Watermark.Razor.Parts
@using Watermark.Shared.Models
@using Masa.Blazor
@layout MainLayout
@inject APIHelper api
@inject IPopupService PopupService
@inherits PStackPageBase
@inject IClientInstance ClientInstance
@inject PageStackNavController NavController

<PStackPageBarInit Title="设置" Dense Flat CenterTitle>
</PStackPageBarInit>

<div Style="text-align:center">
    <MCard Flat Style="@cardStyle" Elevation="0" Class="pa-3">
        <SettingPanel OnClick="@(() => NavController.Push("/logout"))" Text="注销账号" Icon="@ICONS.ArrowRight" />
    </MCard>
    <MCard Flat Style="@cardStyle" Elevation="0" Class="pa-3">
        <SettingPanel Text="增强EXIF解析" @bind-Value="@GlobalConfig.SECOND_EXIF" MSwith="true" />
    </MCard>
    <MCard Flat Style="@cardStyle" Elevation="0" Class="pa-3">
        <SettingPanel OnClick="()=> DeleteCache(Global.AppPath.TemplatesFolder)" Text="下载缓存" Icon="@ICONS.ArrowRight" />
        <MDivider Class="my-2" />
        <SettingPanel OnClick="()=> DeleteCache(Global.AppPath.LogoesFolder)" Text="图标缓存" Icon="@ICONS.ArrowRight" />
    </MCard>

    <MCard Flat Style="@cardStyle" Elevation="0" Class="pa-3">
        <SettingPanel Icon="@ICONS.ArrowRight">
            <div style="flex: 1; display: flex;" onclick="window.location.href='http://thankful.top/private';">
                隐私协议
            </div>
        </SettingPanel>
        <MDivider Class="my-2" />
        <SettingPanel OnClick="RevertArgreement" Text="撤回隐私协议" Icon="@ICONS.ArrowRight" />
    </MCard>
</div>




@code {
    [Parameter]
    public EventCallback<bool> CloseEvent { get; set; }
    string UserName { get; set; }
    string Password { get; set; }
    bool Loading = false;
    bool sheet;
    string cardStyle => $"margin:20px 16px;background:{Colors.Grey.Lighten4}";

    protected override void OnInitialized()
    {
        ClientInstance.SetColor();
    }

    public async void LoginOK()
    {
        Loading = true;
        APIHelper helper = new APIHelper();
        var result = await helper.LoginIn(UserName, Password);
        string message = "";
        AlertTypes severity = AlertTypes.Success;
        if (result.success)
        {
            Global.CurrentUser = Global.SetUserInfo(result.data.data);
            message = "登录成功";
            severity = AlertTypes.Success;
            await Global.WriteAccount2LocalAsync(UserName, helper.GetMD5(Password));
            if (CloseEvent.HasDelegate) await CloseEvent.InvokeAsync(true);
            StateHasChanged();
        }
        else
        {
            severity = AlertTypes.Error;
            message = result.message?.content ?? result.data.Message;
        }

        Common.ShowMsg(PopupService, message, severity);
        Loading = false;
        StateHasChanged();
    }

    void DeleteCache(string p)
    {
        if (Directory.Exists(p))
        {
            Directory.Delete(p, true);
            Common.ShowMsg(PopupService, "清除完成", AlertTypes.Success);
        }
    }

    void DeleteAccount()
    {
        NavController.Push("/logout");
    }

    async void RevertArgreement()
    {
        GlobalConfig.AGREE_PRIVATE = false;
        Global.CurrentUser = null;
        await Global.WriteAccount2LocalAsync("", "");
        Common.ShowMsg(PopupService, "撤销完成，当前仅浏览。", AlertTypes.Success);
    }
}


<style scoped>
    .d-space-between {
        align-items: center;
        display: flex;
        justify-content: space-between;
    }
</style>