@page "/appsetting"
@using Masa.Blazor.Presets
@using Watermark.Shared.Models
@using Masa.Blazor
@using MudBlazor
@inject APIHelper api 
@inject IPopupService PopupService
@inherits PStackPageBase

<PStackPageBarInit Title="设置" Dense Flat CenterTitle>
</PStackPageBarInit>

<MudForm Style="text-align:center">
    <MudPaper Style="@cardStyle" Elevation="0" class="pa-3">
        <MBottomSheet @bind-Value="sheet">
            <ActivatorContent>
                <MudStack Row Justify="Justify.SpaceBetween" Style="align-items: center;">
                    <MudText Typo="Typo.button"> 注销账号 </MudText>
                    <MudIcon Icon="@Icons.Material.Filled.Delete" Size="Size.Small" />
                </MudStack>
            </ActivatorContent>
            <ChildContent>
                <MSheet Class="text-center" Height="200">
                    <MudTextField @bind-Value="UserName" T="string" Label="邮箱" Required="true" RequiredError="邮箱不能为空" AutoFocus Class="mt-10" />
                    <MudTextField @bind-Value="Password" T="string" Label="密码" Required="true" RequiredError="密码不能为空" Class="mt-5" InputType="InputType.Password" />
                    <MudButton Variant="Variant.Filled" OnClick="DeleteAccount" FullWidth Class="mt-5" DisableElevation>注销</MudButton>
                </MSheet>
            </ChildContent>
        </MBottomSheet>
    </MudPaper>
    <MudPaper Style="@cardStyle" Elevation="0" class="pa-3">
        <MudStack Row Justify="Justify.SpaceBetween" Style="align-items: center;">
            <MudText Typo="Typo.button"> 增强EXIF解析 </MudText>
            <MudSwitch @bind-Value="@Global.SECOND_EXIF" Color="Color.Primary" Size="Size.Small" />
        </MudStack>
    </MudPaper>
    <MudPaper Style="@cardStyle" Elevation="0" class="pa-3">
        <MudStack Row Justify="Justify.SpaceBetween" style="align-items: center" @onclick="()=> DeleteCache(Global.AppPath.TemplatesFolder)">
            <MudText Typo="Typo.button">下载缓存</MudText>
            <MudIcon Icon="@Icons.Material.Filled.Delete" Size="Size.Small" />
        </MudStack>

        <MudDivider Class="my-2" />
        <MudStack Row Justify="Justify.SpaceBetween" style="align-items: center" @onclick="()=> DeleteCache(Global.AppPath.LogoesFolder)">
            <MudText Typo="Typo.button">图标缓存</MudText>
            <MudIcon Icon="@Icons.Material.Filled.Delete" Size="Size.Small" />
        </MudStack>
    </MudPaper>

</MudForm>




@code {
    [Parameter]
    public EventCallback<bool> CloseEvent { get; set; }
    string UserName { get; set; }
    string Password { get; set; }
    bool Loading = false;
    bool sheet;
    string cardStyle => $"margin:20px 16px;background:{Colors.Grey.Lighten4}";



    public async void LoginOK()
    {
        Loading = true;
        APIHelper helper = new APIHelper();
        var result = await helper.LoginIn(UserName, Password);
        string message = "";
        AlertTypes severity = AlertTypes.Success;
        if (result.success)
        {
            Global.CurrentUser = Global.SetUserInfo(result.data.data);
            message = "登录成功";
            severity = AlertTypes.Success;
            await Global.WriteAccount2LocalAsync(UserName, helper.GetMD5(Password));
            if (CloseEvent.HasDelegate) await CloseEvent.InvokeAsync(true);
            StateHasChanged();
        }
        else
        {
            severity = AlertTypes.Error;
            message = result.message?.content ?? result.data.Message;
        }

        Common.ShowMsg(PopupService, message, severity);
        Loading = false;
        StateHasChanged();
    }

    void DeleteCache(string p)
    {
        if (Directory.Exists(p))
        {
            Directory.Delete(p, true);
            Common.ShowMsg(PopupService, "清除完成", AlertTypes.Success);
        }
    }

    async void DeleteAccount()
    {
        if (string.IsNullOrEmpty(UserName) || string.IsNullOrEmpty(Password)) return;
        var confirmed = await PopupService.ConfirmAsync("确认", "删除后不可还原！确认删除？", AlertTypes.Warning);
        if (confirmed == true)
        {
            var result = await api.DeleteAccount(UserName, Password);
            if (result != null && result.success)
            {
                sheet = false;
                Global.CurrentUser = null;
                Common.ShowMsg(PopupService, "注销成功。", AlertTypes.Success);
            }
            else
            {
                Common.ShowMsg(PopupService, result?.message?.content ?? "注销失败，请稍后重试。", AlertTypes.Error);
            }
        }
    }
}
