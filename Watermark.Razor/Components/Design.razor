@using System.IO
@using Masa.Blazor
@using Microsoft.JSInterop
@using System.Collections.Concurrent
@using MudBlazor
@using SkiaSharp
@using Watermark.Razor
@using Watermark.Shared.Enums
@using Watermark.Shared.Models
@using Watermark.Win.Models
@using Watermark.Razor.Parts
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject WMDesignFunc designFunc


<MApp Style="background:#e3e3e3; overflow:hidden">
        <MToolbar>
            <IconButton Icon="@("mdi-content-save-outline")" OnClick="SaveTemplate"></IconButton>
            <IconButton Icon="@("mdi-plus-box")" OnClick="OpenEditDialog"></IconButton>
            <MButton Color="Color.Secondary" Class="mr-5" OnClick="()=>showDialog = true">另存为</MButton>
            <MDialog Style="width:300px;" @bind-Value="@showDialog" Class="pa-4">
                <MTextField @bind-Value="newTemplateName" T="string" Label="模板名称" Required="true" HideDetails="true" />
                <MButton OnClick="SaveAs" Class="mt-2" Elevation="0">确定</MButton>
            </MDialog>
            <MButton Color="Color.Error" OnClick="PreviewImageRefresh">刷 新</MButton>
            @if (SrcLoading)
            {
                <MProgressCircular Color="Color.Secondary" Indeterminate="true" Class="ma-4" />
            }
            <MSpacer />
            @if (designFunc is null || Global.DeviceType == DeviceType.Mac)
            {
                <MButton Color="Color.Error" OnClick="Submit">退出</MButton>
            }
        </MToolbar>
    <div Style="height:calc(100vh - 40px);width:100%;display: flex;" @onclick="()=>{showDialog = false;}">
        <div style="width:calc(100% - 500px);height:100%;position:fixed;">
            <div style="background:#e3e3e3;width:100%;height:100%;padding:10px;">
                @if (!string.IsNullOrEmpty(url))
                {
                    <MImage Contain Src="@url" Elevation="0" Style="width: 100%; height: 100%; padding-left: 5%; padding-right: 5%; padding-top: 100px; padding-bottom: 100px;" />
                }

            </div>
        </div>


        <DesignConfiguration canvas="canvas"
                             Changed="ValueChanged2"
                             ImagesBase64="ImagesBase64"
                             SelectDefaultImage="SelectDefaultImage"
                             OpenExifDialogFontEvt="OpenExifDialog"
                             RemoveImageEvt="RemoveImage"
                             SelectImageEvt="SelectImage"
                             SelectLocalFontEvt="SelectLocalFont" />
    </div>
</MApp>


@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }
    [Inject]
    private IDialogService DialogService { get; set; }
    [Parameter]
    public WMCanvas CurrentCanvas { get; set; }
    [Parameter]
    public Func<WMLogo, Task> SelectLogo { get; set; }
    [Parameter]
    public Func<WMContainer, Task> SelectContainer { get; set; }
    [Parameter]
    public Func<Task<string>> SelectDefaultImageEvt { get; set; }
    [Parameter]
    public Func<Task> ImportFontEvt { get; set; }
    [Parameter]
    public Action<Action> HotKeyEvt { get; set; }

    bool showDialog = false;
    string newTemplateName = "";
    DialogOptions DialogOptions { get; set; } = new DialogOptions() { MaxWidth = MaxWidth.Medium, NoHeader = true };
    void Submit() => MudDialog.Close(DialogResult.Ok(true));

    WMThickness BorderThickness = new WMThickness();
    WMCanvas canvas;
    string url = "";
    bool SrcLoading = false;
    List<string> Fonts = new List<string>();
    ConcurrentDictionary<string, string> ImagesBase64 = new();
    string cardStyle => $"margin:8px 0px;background:{Colors.Grey.Lighten4}";
    List<string> Radioes = ["1:1", "16:9", "9:16", "3:2", "2:3", "4:3", "3:4", "21:9", "18:9", "2.39:1"];

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (designFunc != null && Global.DeviceType != DeviceType.Mac)
            {
                CurrentCanvas = designFunc.CurrentCanvas;
                SelectLogo = designFunc.SelectLogo;
                SelectContainer = designFunc.SelectContainer;
                SelectDefaultImageEvt = designFunc.SelectDefaultImageEvt;
                ImportFontEvt = designFunc.ImportFontEvt;
                HotKeyEvt = designFunc.HotKeyEvt;
            }

            ConcurrentDictionary<string, byte[]> dic = new();
            canvas = CurrentCanvas;
            if (canvas.ImageProperties == null) canvas.ImageProperties = new WMImage();
            var p = Path.Combine(Global.AppPath.TemplatesFolder, canvas.ID, "default.jpg");
            Global.ImageFile2Base64(dic, p, "default");
            var folder = Global.AppPath.TemplatesFolder + canvas.ID + System.IO.Path.DirectorySeparatorChar;
            canvas.Children.ForEach(c =>
            {
                if (!string.IsNullOrEmpty(c.Path)) Global.ImageFile2Base64(dic, folder + c.Path, c.ID);
                c.Controls.ForEach(x =>
                {
                    if (x is WMLogo mLogo) Global.ImageFile2Base64(dic, folder + mLogo.Path, mLogo.ID);
                    else if (x is WMContainer mContainer)
                    {
                        mContainer.Controls.ForEach(z =>
                        {
                            if (z is WMLogo logo1) Global.ImageFile2Base64(dic, folder + logo1.Path, logo1.ID);
                        });

                    };
                });
            });
            foreach (var e in dic)
            {
                ImagesBase64[e.Key] = await JSRuntime.InvokeAsync<string>("byteToUrl", e.Value);
            }

            PreviewImageRefresh();
            try
            {
                HotKeyEvt?.Invoke(PreviewImageRefresh);
            }
            catch (Exception ex)
            {
                Common.ShowMsg(Snackbar, ex.Message, Severity.Error);
            }
            var api = new APIHelper();
            var _ = api.PageVisitRecord(ProgramPage.Design, Global.DeviceType == DeviceType.Mac ? Platform.Mac : Platform.Win);
        }
        catch (Exception err)
        {
            Common.ShowMsg(Snackbar, err.Message, Severity.Error);
        }
    }

    private async void PreviewImageRefresh()
    {
        SrcLoading = true;
        var helper = new WatermarkHelper();
        var b64 = await helper.GenerationAsync(canvas, null, true, true);
        url = await JSRuntime.InvokeAsync<string>("byteToUrl", b64);
        SrcLoading = false;
        StateHasChanged();

    }

    async void OpenExifDialog(WMText mText)
    {
        var parameters = new DialogParameters<ExifConfig>();
        parameters.Add(x => x.mText, mText);
        var dic = CurrentCanvas.Children.Where(x => !x.ContainerProperties.FixImage).ToDictionary((k) => k.ID, (v) => v.Name);
        dic[CurrentCanvas.ID] = CurrentCanvas.Name;
        parameters.Add(x => x.ContainerId2Name, dic.Reverse().ToDictionary());
        parameters.Add(x => x.CanvasType, CurrentCanvas.CanvasType);
        var option = new DialogOptions() { NoHeader = true, MaxWidth = MaxWidth.Medium };
        var rst = DialogService.Show<ExifConfig>("", parameters, option);
        var dialogResult = await rst.Result;
        if (!dialogResult.Canceled)
        {
            WMText text = (WMText)dialogResult.Data;
            mText.Exifs = text.Exifs;
            mText.BindedContainerId = text.BindedContainerId;
            PreviewImageRefresh();
        }
    }

    async void OpenEditDialog()
    {
        var parameters = new DialogParameters<EditComponentDialog>();
        parameters.Add(x => x.mCanvas, canvas);
        var option = new DialogOptions() { NoHeader = true, MaxWidth = MaxWidth.Medium };
        var rst = DialogService.Show<EditComponentDialog>("编辑模板", parameters, option);
        var dialogResult = await rst.Result;
        if (!dialogResult.Canceled)
        {
            StateHasChanged();
        }
    }

    void SaveTemplate()
    {
        try
        {
            var path = Global.AppPath.TemplatesFolder + CurrentCanvas.ID;
            if (!System.IO.Directory.Exists(path))
            {
                System.IO.Directory.CreateDirectory(path);
            }
            var json = Global.CanvasSerialize(canvas);
            System.IO.File.WriteAllText(path + System.IO.Path.DirectorySeparatorChar + "config.json", json);
        }
        catch { }
        finally
        {
            string message = "保存成功！";
            Common.ShowMsg(Snackbar, message, Severity.Success);
        }
    }

    void SaveAs()
    {
        string message = "保存成功！";
        try
        {
            if (string.IsNullOrEmpty(newTemplateName)) return;
            var ID = Guid.NewGuid().ToString("N").ToUpper();
            var path = Global.AppPath.TemplatesFolder + ID;
            if (!System.IO.Directory.Exists(path))
            {
                System.IO.Directory.CreateDirectory(path);
            }
            var source = Global.AppPath.TemplatesFolder + canvas.ID;
            DirectoryInfo info = new DirectoryInfo(source);
            foreach (var file in info.GetFiles())
            {
                if (file.Exists)
                {
                    var target = path + Path.DirectorySeparatorChar + file.Name;
                    file.CopyTo(target, true);
                }
            }
            var json = Global.CanvasSerialize(canvas);
            var newCanvas = Global.ReadConfig(json);
            newCanvas.ID = ID;
            newCanvas.Name = newTemplateName;
            var newJson = Global.CanvasSerialize(newCanvas);
            System.IO.File.WriteAllText(path + System.IO.Path.DirectorySeparatorChar + "config.json", newJson);
            showDialog = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            message = ex.Message;
        }
        Common.ShowMsg(Snackbar, message, Severity.Success);
    }

    async void SelectImage(IWMControl ctrl)
    {
        if (SelectLogo is null) return;
        if (ctrl is WMLogo mLogo)
        {
            await SelectLogo.Invoke(mLogo);
            var destFile = Global.AppPath.TemplatesFolder + canvas.ID + Path.DirectorySeparatorChar + mLogo.Path;
            ConcurrentDictionary<string, byte[]> dic = [];
            Global.ImageFile2Base64(dic, destFile, mLogo.ID);
            ImagesBase64[mLogo.ID] = await JSRuntime.InvokeAsync<string>("byteToUrl", dic.First().Value);
            PreviewImageRefresh();
        }
        else if (ctrl is WMContainer mContainer)
        {
            var rs = SelectContainer.Invoke(mContainer);
            await rs;
            var destFile = Global.AppPath.TemplatesFolder + canvas.ID + Path.DirectorySeparatorChar + Path.GetFileName(mContainer.Path);
            using var bitmap = SKBitmap.Decode(mContainer.Path);
            if (bitmap is null) return;
            var codec = SKCodec.Create(mContainer.Path);
            using var bitmap2 = WatermarkHelper.AutoOrient(codec, bitmap, bitmap.Info);
            Global.WriteThumbnailImage(bitmap2, destFile);
            ConcurrentDictionary<string, byte[]> dic = [];
            Global.ImageFile2Base64(dic, destFile, mContainer.ID);
            mContainer.Path = Path.GetFileName(mContainer.Path);
            ImagesBase64[mContainer.ID] = await JSRuntime.InvokeAsync<string>("byteToUrl", dic.First().Value);
            PreviewImageRefresh();
        }
    }


    async void SelectDefaultImage()
    {
        var p = await SelectDefaultImageEvt.Invoke();
        if (string.IsNullOrEmpty(p)) return;
        ConcurrentDictionary<string, byte[]> dic = new();
        var destFolder = Global.AppPath.TemplatesFolder + CurrentCanvas.ID;
        var destFile = destFolder + System.IO.Path.DirectorySeparatorChar + "default.jpg";
        SkiaSharp.SKBitmap bitmap = SkiaSharp.SKBitmap.Decode(p);
        var codec = SKCodec.Create(p);
        bitmap = WatermarkHelper.AutoOrient(codec, bitmap, bitmap.Info);
        Global.WriteThumbnailImage(bitmap, destFile);
        Global.ImageFile2Base64(dic, destFile, "default");
        ImagesBase64["default"] = await JSRuntime.InvokeAsync<string>("byteToUrl", dic.First().Value);
        PreviewImageRefresh();
    }

    async void SelectLocalFont(WMText mText)
    {
        var param = new DialogParameters<FontsDialog>();
        param.Add(x => x.ImportFontEvt, ImportFontEvt);
        var dialog = DialogService.Show<FontsDialog>(string.Empty, param, new DialogOptions() { MaxWidth = MaxWidth.ExtraLarge, NoHeader = true });
        var result = await dialog.Result;
        if (!result.Canceled && result.Data is KeyValuePair<string, string> pair)
        {
            mText.FontFamily = pair.Key;
            PreviewImageRefresh();
        }
    }

    void RemoveImage(WMContainer container)
    {
        var filename = Global.AppPath.TemplatesFolder + canvas.ID + Path.DirectorySeparatorChar + container.Path;
        if (File.Exists(filename))
        {
            File.Delete(filename);
            container.Path = string.Empty;
            ImagesBase64.Remove(container.ID, out string v);
            PreviewImageRefresh();
        }
    }


    void ValueChanged2(string v)
    {
        canvas.LengthWidthRatio = v;
        if (string.IsNullOrEmpty(v)) return;
        var wh = v.Split(":");
        var w = Convert.ToDouble(wh[0]);
        var h = Convert.ToDouble(wh[1]);
        var xs = 6000 / w;
        canvas.CustomWidth = 6000;
        canvas.CustomHeight = (int)(xs * h);
        PreviewImageRefresh();
    }
}