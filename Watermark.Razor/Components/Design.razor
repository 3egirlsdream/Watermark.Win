@page "/design/{cid}"
@using System.IO
@using Masa.Blazor
@using Masa.Blazor.Presets.PageStack.NavController
@using Microsoft.JSInterop
@using System.Collections.Concurrent
@using SkiaSharp
@using System.ComponentModel
@using Watermark.Razor
@using Watermark.Razor.Components.Layout
@using Watermark.Shared.Enums
@using Watermark.Shared.Models
@using Watermark.Razor.Parts
@inject IJSRuntime JSRuntime
@inject IPopupService PopupService
@inject WMDesignFunc designFunc
@inject IClientInstance ClientInstance
@inject IWMWatermarkHelper helper
@inject APIHelper api
@inherits PPageStack
@layout MainLayout
@inject PageStackNavController NavController
<MApp Style="background:#e3e3e3; overflow:hidden;display:flex">
    @if (Global.DeviceType != DeviceType.IOS && Global.DeviceType != DeviceType.Andorid)
    {
        <MToolbar Dense Height="36" Flat>
            <Masa.Blazor.MMenu OffsetY>
                <ActivatorContent>
                    <Masa.Blazor.MButton Color="@ICONS.Colors.Black.Light1" @attributes="@context.Attrs" Plain Small>文件</Masa.Blazor.MButton>
                </ActivatorContent>
                <ChildContent>
                    <Masa.Blazor.MList>
                        <Masa.Blazor.MListItem OnClick="SaveTemplate" Title="保存" PrependIcon="@("mdi-content-save-outline")" />
                        <Masa.Blazor.MListItem OnClick="() => showDialog = true" Title="另存为" PrependIcon="@ICONS.SaveAs" />
                        @if (designFunc is null || Global.DeviceType == DeviceType.Mac)
                        {
                            <Masa.Blazor.MDivider />
                            <Masa.Blazor.MListItem OnClick="Submit" Title="退出" PrependIcon="@ICONS.Exit" />
                        }
                    </Masa.Blazor.MList>
                </ChildContent>
            </Masa.Blazor.MMenu>

            <MSpacer />
            <MButton Color="error" OnClick="PreviewImageRefresh" Small Plain>
                @if (SrcLoading)
                {
                    <MProgressCircular Color="error" Indeterminate="true" Class="ma-4" Size="24" Width="2" />
                }
                else
                {
                    <MIcon>@ICONS.Refresh</MIcon>
                    @("刷新")
                }
            </MButton>

        </MToolbar>
        <div style="height:calc(100vh - 36px);width:100%;display: flex;justify-content:space-between" @onclick="()=>{showDialog = false;}">
            <div style="width:calc(100% - 300px);height:calc(100% - 36px);background:#e3e3e3;padding:10px;">
                @if (!string.IsNullOrEmpty(url))
                {
                    <MImage Contain Src="@url" Style="height:100%;width:100%" />
                }
            </div>


            <DesignConfiguration canvas="CurrentCanvas" Style="width:300px;height:100%;background:#fff" PropertyChanged="PropertyChanged" SelectContainer="SelectContainer" SelectDefaultImageEvt="SelectDefaultImageEvt" />
        </div>
    }
    else
    {
        <PStackPageBarInit Title="模板设计" Dense Flat CenterTitle>
            <ActionContent>
                <IconButton OnClick="SaveTemplate" Icon="@ICONS.Save" IconColor="green" />
                <IconButton OnClick="() => showDialog = true" Icon="@ICONS.SaveAs"/>
                <MButton IconName="@ICONS.Setting" OnClick="() => openSetting = true"/>
            </ActionContent>
            <GoBackContent>
                <MIcon OnClick="@(()=>NavController.Pop())">mdi-arrow-left</MIcon>
            </GoBackContent>
        </PStackPageBarInit>
        <div style="text-align:center" class="pa-2">
            @if (!string.IsNullOrEmpty(url))
            {
                <MImage Contain Src="@url" Style="height:100%;width:100%" />
            }
            @if(CurrentCanvas != null) 
            {
                <MNavigationDrawer @bind-Value="@openSetting" App Absolute>
                    <DesignConfiguration canvas="CurrentCanvas" Style="width:100%;height:calc(100% - 50px);background:#fff" PropertyChanged="PropertyChanged" SelectContainer="SelectContainer" SelectDefaultImageEvt="SelectDefaultImageEvt" />
                </MNavigationDrawer>
            }
        </div>
    }


    <MDialog ContentStyle="width:300px;" @bind-Value="@showDialog" ContentClass="pa-2">
        <MTextField @bind-Value="newTemplateName" TValue="string" Label="模板名称" Required="true" HideDetails="true" />
        <MButton OnClick="SaveAs" Class="mt-2" Elevation="0">确定</MButton>
    </MDialog>
</MApp>


@code {
    [Parameter]
    public string cid { get; set; }
    [Parameter]
    public WMCanvas CurrentCanvas { get; set; }
    [Parameter]
    public Func<WMLogo, Task> SelectLogo { get; set; }
    [Parameter]
    public Func<WMContainer, Task> SelectContainer { get; set; }
    [Parameter]
    public Func<Task<string>> SelectDefaultImageEvt { get; set; }
    [Parameter]
    public Action<Action> HotKeyEvt { get; set; }
    [Parameter]
    public EventCallback OnClose { get; set; }
    bool showDialog = false;
    string newTemplateName = "";
    Debouncer debouncedAction = null;
    bool? openSetting = false;
    void Submit()
    {
        if (OnClose.HasDelegate) OnClose.InvokeAsync();
    }

    WMThickness BorderThickness = new WMThickness();
    string url = "";
    bool SrcLoading = false;
    List<string> Fonts = new List<string>();
    List<string> Radioes = ["1:1", "16:9", "9:16", "3:2", "2:3", "4:3", "3:4", "21:9", "18:9", "2.39:1"];
    protected override async Task OnInitializedAsync()
    {
        try
        {
            ClientInstance.SetColor();
            if (!string.IsNullOrEmpty(cid))
            {
                designFunc = await ClientInstance.GetWMDesignFunc(cid);
            }

            if (designFunc != null && Global.DeviceType != DeviceType.Mac)
            {
                CurrentCanvas = designFunc.CurrentCanvas;
                SelectLogo = designFunc.SelectLogo;
                SelectContainer = designFunc.SelectContainer;
                SelectDefaultImageEvt = designFunc.SelectDefaultImageEvt;
                HotKeyEvt = designFunc.HotKeyEvt;
            }
            Global.Subscribe(CurrentCanvas, PropertyChanged);
            PreviewImageRefresh();
            try
            {
                HotKeyEvt?.Invoke(PreviewImageRefresh);
            }
            catch (Exception ex)
            {
                Common.ShowMsg(PopupService, ex.Message, AlertTypes.Error);
            }
            var _ = api.PageVisitRecord(ProgramPage.Design, Global.DeviceType);
            NavController.StackPop += Poped;
        }
        catch (Exception err)
        {
            Common.ShowMsg(PopupService, err.Message, AlertTypes.Error);
        }
    }

    private async void PreviewImageRefresh()
    {
        if (debouncedAction is null)
        {
            debouncedAction = new(async () =>
            {
                SrcLoading = true;
                await InvokeAsync(StateHasChanged);
                var b64 = await helper.GenerationAsync(CurrentCanvas, null, true, true);
                url = await JSRuntime.InvokeAsync<string>("byteToUrl", b64);
                SrcLoading = false;
                await InvokeAsync(StateHasChanged);
            }, 1000);
        }
        await debouncedAction.InvokeAsync();

    }


    void SaveTemplate()
    {
        try
        {
            var path = Global.AppPath.TemplatesFolder + CurrentCanvas.ID;
            if (!System.IO.Directory.Exists(path))
            {
                System.IO.Directory.CreateDirectory(path);
            }
            var json = Global.CanvasSerialize(CurrentCanvas);
            System.IO.File.WriteAllText(path + System.IO.Path.DirectorySeparatorChar + "config.json", json);
        }
        catch { }
        finally
        {
            string message = "保存成功！";
            Common.ShowMsg(PopupService, message, AlertTypes.Success);
        }
    }

    async void SaveAs()
    {
        string message = "保存成功！";
        try
        {
            if (string.IsNullOrEmpty(newTemplateName)) return;
            var ID = Guid.NewGuid().ToString("N").ToUpper();
            var path = Global.AppPath.TemplatesFolder + ID;
            if (!System.IO.Directory.Exists(path))
            {
                System.IO.Directory.CreateDirectory(path);
            }
            var source = Global.AppPath.TemplatesFolder + CurrentCanvas.ID;
            DirectoryInfo info = new DirectoryInfo(source);
            foreach (var file in info.GetFiles())
            {
                if (file.Exists)
                {
                    var target = path + Path.DirectorySeparatorChar + file.Name;
                    file.CopyTo(target, true);
                }
            }
            var json = Global.CanvasSerialize(CurrentCanvas);
            var newCanvas = Global.ReadConfig(json);
            newCanvas.ID = ID;
            newCanvas.Name = newTemplateName;
            var newJson = Global.CanvasSerialize(newCanvas);
            System.IO.File.WriteAllText(path + System.IO.Path.DirectorySeparatorChar + "config.json", newJson);

            WMZipedTemplate dirct = new();
            dirct.WatermarkId = ID;
            dirct.WMCanvas = newCanvas;
            dirct.WMCanvas.Exif[dirct.WMCanvas.ID] = ExifHelper.DefaultMeta;
            dirct.CanvasType = dirct.WMCanvas.CanvasType;
            var b64 = await helper.GenerationAsync(dirct.WMCanvas, null, true, false);
            dirct.Src = await JSRuntime.InvokeAsync<string>("byteToUrl", b64);
            GlobalCache.DownloadedTemplates.Add(dirct);
            showDialog = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            message = ex.Message;
        }
        Common.ShowMsg(PopupService, message, AlertTypes.Success);
    }

    void PropertyChanged(object sender, PropertyChangedEventArgs args)
    {
        PreviewImageRefresh();
    }

    async void Poped(object obj, PageStackPopEventArgs args)
    {
        var idx = GlobalCache.DownloadedTemplates.FindIndex(x => x.WatermarkId == cid);
        if(idx >= 0) 
        {
            var item = GlobalCache.DownloadedTemplates[idx];
            GlobalCache.DownloadedTemplates.Remove(item);
            var b64 = await helper.GenerationAsync(CurrentCanvas, null, true, false);
            item.Src = await JSRuntime.InvokeAsync<string>("byteToUrl", b64);
            GlobalCache.DownloadedTemplates.Insert(idx, item);
            await InvokeAsync(StateHasChanged);
        }
        Global.Callback?.Invoke();
        NavController.StackPop -= Poped;
    }
}