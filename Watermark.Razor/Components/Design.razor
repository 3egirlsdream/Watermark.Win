@using System.IO
@using Microsoft.JSInterop
@using System.Collections.Concurrent
@using MudBlazor
@using SkiaSharp
@using Watermark.Razor
@using Watermark.Shared.Enums
@using Watermark.Shared.Models
@using Watermark.Win.Models
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject WMDesignFunc designFunc

@if (designFunc != null && Global.DeviceType != DeviceType.Mac)
{
    <MudThemeProvider />
    <MudDialogProvider />
    <MudSnackbarProvider />
}

<div Style="background:#e3e3e3;">
    <div style="height:40px;position:fixed;width:100%;top:0;left:0;z-index:999;background:#fff;">
        <MudToolBar Style="height:40px;padding-left:5px;">
            <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Save" Color="Color.Primary" Class="mr-5" OnClick="SaveTemplate">保存</MudButton>
            <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Add" Class="mr-5" OnClick="OpenEditDialog">编辑/新增组件</MudButton>
            <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.SaveAs" Color="Color.Secondary" Class="mr-5" OnClick="()=>showDialog = true">另存为</MudButton>
            <MudPopover Style="width:300px;" OverflowBehavior="OverflowBehavior.FlipNever" Open="@showDialog" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopRight" Class="pa-4">
                <MudTextField @bind-Value="newTemplateName" T="string" Label="模板名称" Required="true" RequiredError="模板名称不能为空" />
                <MudButton FullWidth="true" Variant="Variant.Filled" OnClick="SaveAs" Class="mt-2" DisableElevation>确定</MudButton>
            </MudPopover>
            <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Refresh" Color="Color.Error" OnClick="PreviewImageRefresh">刷 新</MudButton>
            @if (SrcLoading)
            {
                <MudProgressCircular Color="Color.Secondary" Indeterminate="true" Size="Size.Small" Class="ma-4" />
            }
            <MudSpacer />
            @if(designFunc is null || Global.DeviceType == DeviceType.Mac) 
            {
                <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.ExitToApp" Color="Color.Error" OnClick="Submit">退出</MudButton>
            }
        </MudToolBar>
    </div>
    <div Style="height:calc(100vh - 40px);width:100%;display: flex;margin-top:40px;" @onclick="()=>{showDialog = false;}">
        <div style="width:calc(100% - 500px);height:100%;position:fixed;">
            <div style="background:#e3e3e3;width:100%;height:100%;padding:10px;">
                @if (!string.IsNullOrEmpty(url))
                {
                    <MudImage ObjectFit="@ObjectFit.Contain" Src="@url" Elevation="0" Style="width: 100%; height: 100%; padding-left: 5%; padding-right: 5%; padding-top: 100px; padding-bottom: 100px;" />
                }

            </div>
        </div>
        <div style="width:500px;height:100%;margin-left:calc(100% - 500px);overflow-y: auto; scrollbar-width: none;">
            <MudExpansionPanels DisableBorders="true" Elevation="0" Style="font-weight: 700;">
                <MudExpansionPanel Text="画布">
                    <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                        <MudTextField @bind-Value="@canvas.Name" Label="模板名称" Required ErrorText="模板名称不能为空" Variant="Variant.Outlined" Margin="Margin.Dense" />
                        <MudColorPicker Label="背景颜色" ColorPickerView="ColorPickerView.Grid" @bind-Text="@canvas.BackgroundColor" />
                    </MudPaper>
                    <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                        <MudRadioGroup @bind-Value="canvas.CanvasType" Class="mx-2">
                            <MudRadio Value="CanvasType.Normal" Color="Color.Secondary" Dense="true">固定主要图片模式</MudRadio>
                            <MudRadio Value="CanvasType.Split" Color="Color.Secondary" Dense="true">自定义比例模式</MudRadio>
                        </MudRadioGroup>
                    </MudPaper>
                    @if (canvas.CanvasType == CanvasType.Normal)
                    {
                        <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                            <MudStack Row Justify="Justify.FlexStart" Style="display:flex;align-items:center;">
                                <MudIconButton Icon="@Icons.Material.Filled.OpenInNew" Variant="Variant.Filled" Size="Size.Small" Color="Color.Primary" OnClick="SelectDefaultImage" />
                                <MudToggleIconButton @bind-Toggled="@canvas.ImageProperties.Show" Size="Size.Small" ToggledSize="Size.Small" Variant="Variant.Filled" Icon="@Icons.Material.Filled.VisibilityOff" Color="@Color.Error" ToggledIcon="@Icons.Material.Filled.Visibility" ToggledColor="@Color.Primary" />
                            </MudStack>
                            <MudDivider Class="my-2" />
                            @if (ImagesBase64.TryGetValue("default", out string src))
                            {
                                <MudImage Height="250" ObjectFit="ObjectFit.Contain" Src="@src" />
                            }
                        </MudPaper>
                        <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                            <MudStack Row>
                                <MudTextField @bind-Value="@canvas.BorderThickness.Top" Label="上边距" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                <MudTextField @bind-Value="@canvas.BorderThickness.Bottom" Label="下边距" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                <MudTextField @bind-Value="@canvas.BorderThickness.Left" Label="左边距" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                <MudTextField @bind-Value="@canvas.BorderThickness.Right" Label="右边距" Variant="Variant.Outlined" Margin="Margin.Dense" />
                            </MudStack>
                            <MudDivider Class="my-2" />
                            <MudStack Row Justify="Justify.SpaceBetween" Style="display:flex;align-items:center;">
                                <MudText Typo="Typo.button">边框等宽 (可能导致穿模)</MudText>
                                <MudSwitch @bind-Value="@canvas.EnableMarginXS" Color="Color.Primary" />
                            </MudStack>
                        </MudPaper>
                        <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                            <MudStack Row Justify="Justify.SpaceBetween" Style="display:flex;align-items:center;">
                                <MudText Typo="Typo.button">阴影</MudText>
                                <MudSwitch @bind-Value="@canvas.ImageProperties.EnableShadow" Color="Color.Primary" />
                            </MudStack>
                            <MudDivider Class="my-2" />
                            <MudColorPicker Label="阴影颜色" ColorPickerView="ColorPickerView.Grid" @bind-Text="canvas.ImageProperties.ShadowColor" />
                            <MudTextField Class="my-2" @bind-Value="@canvas.ImageProperties.ShadowRange" Label="深度" Variant="Variant.Text" Margin="Margin.Dense" />
                        </MudPaper>
                        <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                            <MudStack Row Justify="Justify.SpaceBetween" Style="display:flex;align-items:center;">
                                <MudText Typo="Typo.button">图片圆角</MudText>
                                <MudSwitch @bind-Value="@canvas.ImageProperties.EnableRadius" Color="Color.Primary" />
                            </MudStack>
                            <MudDivider Class="my-2" />
                            <MudTextField Class="my-2" @bind-Value="@canvas.ImageProperties.CornerRadius" Label="圆角度数" Variant="Variant.Text" Margin="Margin.Dense" />
                        </MudPaper>
                        <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                            <MudStack Row Justify="Justify.SpaceBetween" Style="display:flex;align-items:center;">
                                <MudText Typo="Typo.button">背景高斯模糊</MudText>
                                <MudSwitch @bind-Value="@canvas.ImageProperties.EnableGaussianBlur" Color="Color.Primary" />
                            </MudStack>
                            <MudDivider Class="my-2" />
                            <MudTextField @bind-Value="@canvas.ImageProperties.GaussianDeep" Label="模糊深度" Variant="Variant.Text" Margin="Margin.Dense" />
                        </MudPaper>
                    }
                    else
                    {
                        <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                            <MudSelect Value="canvas.LengthWidthRatio" Dense="true" T="string" Label="画幅比例" Variant="Variant.Text" ValueChanged="ValueChanged2">
                                <MudSelectItem Value="@("1:1")" />
                                <MudSelectItem Value="@("16:9")" />
                                <MudSelectItem Value="@("9:16")" />
                                <MudSelectItem Value="@("4:3")" />
                                <MudSelectItem Value="@("3:4")" />
                                <MudSelectItem Value="@("21:9")" />
                                <MudSelectItem Value="@("18:9")" />
                                <MudSelectItem Value="@("1.85:1")" />
                                <MudSelectItem Value="@("2.39:1")" />
                            </MudSelect>
                            <MudStack Row Class="mt-5">
                                <MudTextField @bind-Value="@canvas.CustomWidth" Label="自定义宽度(px)" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                <MudTextField @bind-Value="@canvas.CustomHeight" Label="自定义高度(px)" Variant="Variant.Outlined" Margin="Margin.Dense" />
                            </MudStack>
                        </MudPaper>
                    }
                </MudExpansionPanel>
                @foreach (var container in canvas.Children)
                {
                    <MudExpansionPanel Text="@container.Name">
                        <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                            <MudStack Row="true" Justify="Justify.FlexStart" Style="align-items: center;">
                                <MudText Align="Align.Justify" Typo="Typo.button">背景图片</MudText>
                                <MudIconButton Icon="@Icons.Material.Filled.OpenInNew" Variant="Variant.Filled" Color="Color.Primary" Class="ml-1" OnClick="(()=> SelectImage(container))" Size="Size.Small" />
                                @if (ImagesBase64.TryGetValue(container.ID, out string _))
                                {
                                    <MudDivider Vertical="true" FlexItem="true" Class="mx-2" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Variant="Variant.Filled" Size="Size.Small" OnClick="() => RemoveImage(container)" />
                                }
                                @if (canvas.CanvasType == CanvasType.Split)
                                {
                                    <MudDivider Vertical="true" FlexItem="true" Class="mx-2" />
                                    <MudText Align="Align.Justify" Typo="Typo.button">固定图片</MudText>
                                    <MudSwitch @bind-Value="@container.ContainerProperties.FixImage" Color="Color.Primary" />
                                }
                            </MudStack>
                            <MudDivider Class="my-2" />
                            @if (ImagesBase64.TryGetValue(container.ID, out string src))
                            {
                                <MudImage Src="@src" ObjectFit="ObjectFit.Contain" Height="100" />
                                <MudDivider Class="my-2" />
                            }
                            else
                            {
                                <MudColorPicker Label="背景颜色" ColorPickerView="ColorPickerView.Grid" @bind-Text="@container.BackgroundColor" Margin="Margin.Dense" />
                            }
                        </MudPaper>
                        <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                            <MudStack Row Justify="Justify.SpaceBetween" Style="display:flex;align-items:center;">
                                <MudText Typo="Typo.button">阴影</MudText>
                                <MudSwitch @bind-Value="@container.ContainerProperties.EnableShadow" Color="Color.Primary" />
                            </MudStack>
                            <MudDivider Class="my-2" />
                            <MudColorPicker Label="阴影颜色" ColorPickerView="ColorPickerView.Grid" @bind-Text="container.ContainerProperties.ShadowColor" />
                            <MudTextField class="mt-2" @bind-Value="@container.ContainerProperties.ShadowRange" Label="深度" Variant="Variant.Text" Margin="Margin.Dense" />
                        </MudPaper>
                        <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                            <MudStack Row Justify="Justify.SpaceBetween" Style="display:flex;align-items:center;">
                                <MudText Typo="Typo.button">图片圆角</MudText>
                                <MudSwitch @bind-Value="@container.ContainerProperties.EnableRadius" Color="Color.Primary" />
                            </MudStack>
                            <MudDivider Class="my-2" />
                            <MudTextField class="mt-2" @bind-Value="@container.ContainerProperties.CornerRadius" Label="圆角度数" Variant="Variant.Text" Margin="Margin.Dense" />
                        </MudPaper>
                        <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                            <MudTextField @bind-Value="@container.Angle" Label="旋转角度" Variant="Variant.Text" Margin="Margin.Dense" />
                        </MudPaper>
                        <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                            <div class="d-flex justify-space-between" style="align-items:center;">
                                <MudText Typo="Typo.button">容器内组件水平对齐</MudText>
                                <MudToggleGroup @bind-Value="@container.HorizontalAlignment" T="Watermark.Shared.Enums.HorizontalAlignment" Outline="true" Delimiters="true" Dense="true" Rounded="false" CheckMark="false" FixedContent="false">
                                    <MudToggleItem Value="@(Watermark.Shared.Enums.HorizontalAlignment.Left)">
                                        <MudIcon Icon="@Icons.Material.Filled.FormatAlignLeft" />
                                    </MudToggleItem>
                                    <MudToggleItem Value="@(Watermark.Shared.Enums.HorizontalAlignment.Center)">
                                        <MudIcon Icon="@Icons.Material.Filled.FormatAlignCenter" />
                                    </MudToggleItem>
                                    <MudToggleItem Value="@(Watermark.Shared.Enums.HorizontalAlignment.Right)">
                                        <MudIcon Icon="@Icons.Material.Filled.FormatAlignRight" />
                                    </MudToggleItem>
                                </MudToggleGroup>
                            </div>
                            <MudDivider Class="my-2" />
                            <div class="d-flex justify-space-between" style="align-items:center;">
                                <MudText Typo="Typo.button">容器内组件竖直对齐</MudText>
                                <MudToggleGroup @bind-Value="@container.VerticalAlignment" T="Watermark.Shared.Enums.VerticalAlignment" Outline="true" Delimiters="true" Dense="true" Rounded="false" CheckMark="false" FixedContent="false">
                                    <MudToggleItem Value="@(Watermark.Shared.Enums.VerticalAlignment.Top)">
                                        <MudIcon Icon="@Icons.Material.Filled.VerticalAlignTop" />
                                    </MudToggleItem>
                                    <MudToggleItem Value="@(Watermark.Shared.Enums.VerticalAlignment.Center)">
                                        <MudIcon Icon="@Icons.Material.Filled.VerticalAlignCenter" />
                                    </MudToggleItem>
                                    <MudToggleItem Value="@(Watermark.Shared.Enums.VerticalAlignment.Bottom)">
                                        <MudIcon Icon="@Icons.Material.Filled.VerticalAlignBottom" />
                                    </MudToggleItem>
                                </MudToggleGroup>
                            </div>
                            <MudDivider Class="my-2" />
                            <div class="d-flex justify-space-between" style="align-items:center;">
                                <MudText Typo="Typo.button">容器内组件堆叠方向</MudText>
                                <MudToggleGroup @bind-Value="@container.Orientation" T="Watermark.Shared.Enums.Orientation" Outline="true" Delimiters="true" Dense="true" Rounded="false" CheckMark="false" FixedContent="false">
                                    <MudToggleItem Value="@(Watermark.Shared.Enums.Orientation.Horizontal)">
                                        <MudIcon Icon="@Icons.Material.Filled.BorderHorizontal" />
                                    </MudToggleItem>
                                    <MudToggleItem Value="@(Watermark.Shared.Enums.Orientation.Vertical)">
                                        <MudIcon Icon="@Icons.Material.Filled.BorderVertical" />
                                    </MudToggleItem>
                                </MudToggleGroup>
                            </div>
                            <MudDivider Class="my-2" />
                            <div class="d-flex justify-space-between" style="align-items:center;">
                                <MudText Typo="Typo.button">容器依靠方向</MudText>
                                <MudToggleGroup @bind-Value="@container.ContainerAlignment" T="Watermark.Shared.Enums.ContainerAlignment" Outline="true" Delimiters="true" Dense="true" Rounded="false" CheckMark="false" FixedContent="false">
                                    <MudToggleItem Value="@(Watermark.Shared.Enums.ContainerAlignment.Top)">
                                        <MudIcon Icon="@Icons.Material.Filled.ArrowUpward" />
                                    </MudToggleItem>
                                    <MudToggleItem Value="@(Watermark.Shared.Enums.ContainerAlignment.Bottom)">
                                        <MudIcon Icon="@Icons.Material.Filled.ArrowDownward" />
                                    </MudToggleItem>
                                    <MudToggleItem Value="@(Watermark.Shared.Enums.ContainerAlignment.Left)">
                                        <MudIcon Icon="@Icons.Material.Filled.ArrowBack" />
                                    </MudToggleItem>
                                    <MudToggleItem Value="@(Watermark.Shared.Enums.ContainerAlignment.Right)">
                                        <MudIcon Icon="@Icons.Material.Filled.ArrowForward" />
                                    </MudToggleItem>
                                </MudToggleGroup>
                            </div>
                        </MudPaper>
                        <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                            <MudStack Row>
                                <MudTextField @bind-Value="@container.Margin.Top" Label="上边距" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                <MudTextField @bind-Value="@container.Margin.Bottom" Label="下边距" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                <MudTextField @bind-Value="@container.Margin.Left" Label="左边距" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                <MudTextField @bind-Value="@container.Margin.Right" Label="右边距" Variant="Variant.Outlined" Margin="Margin.Dense" />
                            </MudStack>
                            <MudDivider Class="my-2" />
                            <MudStack Row>
                                <MudTextField @bind-Value="@container.HeightPercent" Label="高(比例)" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                <MudTextField @bind-Value="@container.WidthPercent" Label="宽(比例)" Variant="Variant.Outlined" Margin="Margin.Dense" />
                            </MudStack>
                        </MudPaper>
                        <MudExpansionPanels DisableBorders="true" Elevation="0">
                            @foreach (var ctrl in container.Controls)
                            {
                                @if (ctrl is WMContainer mContainer)
                                {
                                    <MudExpansionPanel Text="@mContainer.Name">
                                        <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                                            <div class="d-flex justify-space-between" style="align-items:center;">
                                                <MudText Typo="Typo.button">容器内组件水平对齐</MudText>
                                                <MudToggleGroup @bind-Value="@mContainer.HorizontalAlignment" T="Watermark.Shared.Enums.HorizontalAlignment" Outline="true" Delimiters="true" Dense="true" Rounded="false" CheckMark="false" FixedContent="false">
                                                    <MudToggleItem Value="@(Watermark.Shared.Enums.HorizontalAlignment.Left)">
                                                        <MudIcon Icon="@Icons.Material.Filled.FormatAlignLeft" />
                                                    </MudToggleItem>
                                                    <MudToggleItem Value="@(Watermark.Shared.Enums.HorizontalAlignment.Center)">
                                                        <MudIcon Icon="@Icons.Material.Filled.FormatAlignCenter" />
                                                    </MudToggleItem>
                                                    <MudToggleItem Value="@(Watermark.Shared.Enums.HorizontalAlignment.Right)">
                                                        <MudIcon Icon="@Icons.Material.Filled.FormatAlignRight" />
                                                    </MudToggleItem>
                                                </MudToggleGroup>
                                            </div>

                                            <MudDivider Class="my-2" />
                                            <div class="d-flex justify-space-between" style="align-items:center;">
                                                <MudText Typo="Typo.button">容器内组件竖直对齐</MudText>
                                                <MudToggleGroup @bind-Value="@mContainer.VerticalAlignment" T="Watermark.Shared.Enums.VerticalAlignment" Outline="true" Delimiters="true" Dense="true" Rounded="false" CheckMark="false" FixedContent="false">
                                                    <MudToggleItem Value="@(Watermark.Shared.Enums.VerticalAlignment.Top)">
                                                        <MudIcon Icon="@Icons.Material.Filled.VerticalAlignTop" />
                                                    </MudToggleItem>
                                                    <MudToggleItem Value="@(Watermark.Shared.Enums.VerticalAlignment.Center)">
                                                        <MudIcon Icon="@Icons.Material.Filled.VerticalAlignCenter" />
                                                    </MudToggleItem>
                                                    <MudToggleItem Value="@(Watermark.Shared.Enums.VerticalAlignment.Bottom)">
                                                        <MudIcon Icon="@Icons.Material.Filled.VerticalAlignBottom" />
                                                    </MudToggleItem>
                                                </MudToggleGroup>
                                            </div>
                                        </MudPaper>
                                        <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                                            <MudStack Row>
                                                <MudTextField @bind-Value="@mContainer.Margin.Top" Label="上边距" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                                <MudTextField @bind-Value="@mContainer.Margin.Bottom" Label="下边距" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                                <MudTextField @bind-Value="@mContainer.Margin.Left" Label="左边距" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                                <MudTextField @bind-Value="@mContainer.Margin.Right" Label="右边距" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                            </MudStack>

                                            <MudDivider Class="my-2" />
                                            <MudStack Row>
                                                <MudTextField @bind-Value="@mContainer.HeightPercent" Label="高(比例)" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                                <MudTextField @bind-Value="@mContainer.WidthPercent" Label="宽(比例, 0自动计算)" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                            </MudStack>
                                        </MudPaper>
                                        <MudExpansionPanels DisableBorders="true" Elevation="0">
                                            @foreach (var c_comp in mContainer.Controls)
                                            {
                                                <MudExpansionPanel Text="@c_comp.Name">
                                                    <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                                                        <MudStack Row>
                                                            <MudTextField @bind-Value="@c_comp.Margin.Top" Label="上边距" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                                            <MudTextField @bind-Value="@c_comp.Margin.Bottom" Label="下边距" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                                            <MudTextField @bind-Value="@c_comp.Margin.Left" Label="左边距" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                                            <MudTextField @bind-Value="@c_comp.Margin.Right" Label="右边距" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                                        </MudStack>
                                                        <MudDivider Class="my-2" />
                                                        <MudStack Row Style="align-items:center;">
                                                            <MudText Align="Align.Justify" Typo="Typo.button" Style="width:50%">组件占容器比例</MudText>
                                                            <MudTextField @bind-Value="@c_comp.Percent" Label="%" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                                        </MudStack>
                                                    </MudPaper>
                                                    @if (c_comp is WMLine mLine)
                                                    {
                                                        <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                                                            <MudColorPicker Label="分割线颜色" ColorPickerView="ColorPickerView.Grid" @bind-Text="mLine.Color" />
                                                            <div class="d-flex justify-space-between mt-5" style="align-items:center;">
                                                                <MudText Typo="Typo.button">线方向</MudText>
                                                                <MudToggleGroup @bind-Value="@mLine.Orientation" T="Watermark.Shared.Enums.Orientation" Outline="true" Delimiters="true" Dense="true" Rounded="false" CheckMark="false" FixedContent="false">
                                                                    <MudToggleItem Value="@(Watermark.Shared.Enums.Orientation.Horizontal)">
                                                                        <MudIcon Icon="@Icons.Material.Filled.BorderHorizontal" />
                                                                    </MudToggleItem>
                                                                    <MudToggleItem Value="@(Watermark.Shared.Enums.Orientation.Vertical)">
                                                                        <MudIcon Icon="@Icons.Material.Filled.BorderVertical" />
                                                                    </MudToggleItem>
                                                                </MudToggleGroup>
                                                            </div>
                                                            <MudDivider Class="my-2" />
                                                            <MudStack Row Style="align-items:center;">
                                                                <MudText Align="Align.Justify" Typo="Typo.button" Style="width:50%">线粗细</MudText>
                                                                <MudTextField @bind-Value="@mLine.Thickness" Label="px" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                                            </MudStack>
                                                        </MudPaper>
                                                    }
                                                    else if (c_comp is WMLogo mLogo)
                                                    {
                                                        <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                                                            <MudStack Row Justify="Justify.SpaceBetween" Style="align-items:center;">
                                                                <MudText Typo="Typo.button">白底转透明像素</MudText>
                                                                <MudSwitch @bind-Value="@mLogo.White2Transparent" Color="Color.Primary" />
                                                            </MudStack>
                                                            <MudDivider Class="my-2" />
                                                            <MudStack Row Justify="Justify.SpaceBetween" Style="align-items:center;">
                                                                <MudText Typo="Typo.button">自动识别品牌图标</MudText>
                                                                <MudSwitch @bind-Value="@mLogo.AutoSetLogo" Color="Color.Primary" />
                                                            </MudStack>
                                                            <MudDivider Class="my-2" />
                                                            <div Style="display:flex;align-items:center;justify-content: space-between;">
                                                                <MudText Align="Align.Justify" Typo="Typo.button">图片</MudText>
                                                                @if (ImagesBase64.TryGetValue(mLogo.ID, out string src))
                                                                {
                                                                    <MudImage Src="@src" ObjectFit="ObjectFit.Contain" Width="40" Style="float:right" />
                                                                }
                                                                <MudIconButton Icon="@Icons.Material.Filled.OpenInNew" Variant="Variant.Filled" Color="Color.Primary" OnClick="(()=> SelectImage(mLogo))" Style="float:right;max-width:80px;" />
                                                            </div>
                                                        </MudPaper>
                                                    }
                                                    else if (c_comp is WMText mText)
                                                    {

                                                        <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                                                            <MudColorPicker Label="字体颜色" ColorPickerView="ColorPickerView.Grid" @bind-Text="mText.FontColor" />
                                                            <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" Class="mt-5">
                                                                <MudToggleIconButton @bind-Toggled="@mText.IsItalic" Icon="@Icons.Material.Filled.FormatItalic" Color="@Color.Error"
                                                                                     ToggledIcon="@Icons.Material.Filled.FormatItalic" ToggledColor="@Color.Primary" />
                                                                <MudToggleIconButton @bind-Toggled="@mText.IsBold" Icon="@Icons.Material.Filled.FormatBold" Color="@Color.Error"
                                                                                     ToggledIcon="@Icons.Material.Filled.FormatBold" ToggledColor="@Color.Primary" />
                                                            </MudButtonGroup>
                                                            <MudDivider Class="my-2" />
                                                            <p style="font-weight:normal">文字内容</p>
                                                            <div Style="line-height:30px;border-bottom:1px solid #808080;height:30px;font-weight:normal">
                                                                <div style="width:calc(100% - 80px);float:left;overflow-x:auto;white-space:nowrap">
                                                                    @(string.Join(" ", mText.Exifs.Select(x => x.Prefix + x.Value + x.Suffix)))
                                                                </div>
                                                                <MudIconButton Icon="@Icons.Material.Filled.OpenInNew" OnClick="(()=>OpenExifDialog(mText))" Style="float:right;max-width:80px;" Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary" />
                                                            </div>


                                                            <MudTextField @bind-Value="@mText.FontSize" Label="字体大小" Variant="Variant.Text" Margin="Margin.Dense" Class="mt-5" />
                                                            <MudStack Class="mt-5">
                                                                <MudTextField @bind-Value="@mText.FontFamily" Label="字体" Variant="Variant.Text" Margin="Margin.Dense" />
                                                                <MudStack Row>
                                                                    <MudMenu Label="选择系统字体" Variant="Variant.Filled" Color="Color.Primary" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" Style="white-space: nowrap;">
                                                                        @foreach (var font in SkiaSharp.SKFontManager.Default.FontFamilies)
                                                                        {
                                                                            <MudMenuItem OnClick="()=> mText.FontFamily = font">
                                                                                @font
                                                                            </MudMenuItem>
                                                                        }
                                                                    </MudMenu>

                                                                    <MudButton StartIcon="@Icons.Material.Filled.FontDownload" Variant="Variant.Filled" Color="Color.Primary" Style="white-space: nowrap;" OnClick="()=>SelectLocalFont(mText)">字体库</MudButton>
                                                                </MudStack>
                                                            </MudStack>

                                                        </MudPaper>
                                                        <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                                                            <MudStack Row Style="position:relative">
                                                                <MudText Align="Align.Justify" Typo="Typo.button">文字边框</MudText>
                                                                <MudSwitch @bind-Value="@mText.EnableBorder" Color="Color.Primary" Style="position:absolute;right:5px" />
                                                            </MudStack>
                                                            <MudTextField @bind-Value="@mText.BorderPadding" Label="内边距" Variant="Variant.Text" Margin="Margin.Dense" class="mt-5" />
                                                            <MudTextField @bind-Value="@mText.BorderWidth" Label="边框宽度" Variant="Variant.Text" Margin="Margin.Dense" class="mt-5" />
                                                            <MudTextField @bind-Value="@mText.BorderRadius" Label="边框圆角度数" Variant="Variant.Text" Margin="Margin.Dense" class="mt-5" />
                                                            <MudColorPicker Label="边框颜色" ColorPickerView="ColorPickerView.Grid" @bind-Text="mText.BorderColor" Class="mt-5" />

                                                        </MudPaper>
                                                    }
                                                </MudExpansionPanel>
                                            }
                                        </MudExpansionPanels>
                                    </MudExpansionPanel>
                                }
                                else
                                {
                                    <MudExpansionPanel Text="@ctrl.Name">
                                        <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                                            <MudStack Row>
                                                <MudTextField @bind-Value="@ctrl.Margin.Top" Label="上边距" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                                <MudTextField @bind-Value="@ctrl.Margin.Bottom" Label="下边距" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                                <MudTextField @bind-Value="@ctrl.Margin.Left" Label="左边距" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                                <MudTextField @bind-Value="@ctrl.Margin.Right" Label="右边距" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                            </MudStack>
                                            <MudDivider Class="my-2" />
                                            <MudStack Row Style="align-items:center;">
                                                <MudText Align="Align.Justify" Typo="Typo.button" Style="width:50%">组件占容器比例</MudText>
                                                <MudTextField @bind-Value="@ctrl.Percent" Label="%" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                            </MudStack>

                                        </MudPaper>
                                        @if (ctrl is WMLine mLine)
                                        {
                                            <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                                                <MudColorPicker Label="分割线颜色" ColorPickerView="ColorPickerView.Grid" @bind-Text="mLine.Color" />
                                                <div class="d-flex justify-space-between mt-5" style="align-items:center;">
                                                    <MudText Typo="Typo.button">线方向</MudText>
                                                    <MudToggleGroup @bind-Value="@mLine.Orientation" T="Watermark.Shared.Enums.Orientation" Outline="true" Delimiters="true" Dense="true" Rounded="false" CheckMark="false" FixedContent="false">
                                                        <MudToggleItem Value="@(Watermark.Shared.Enums.Orientation.Horizontal)">
                                                            <MudIcon Icon="@Icons.Material.Filled.BorderHorizontal" />
                                                        </MudToggleItem>
                                                        <MudToggleItem Value="@(Watermark.Shared.Enums.Orientation.Vertical)">
                                                            <MudIcon Icon="@Icons.Material.Filled.BorderVertical" />
                                                        </MudToggleItem>
                                                    </MudToggleGroup>
                                                </div>

                                                <MudDivider Class="my-2" />
                                                <MudStack Row Style="align-items:center;">
                                                    <MudText Align="Align.Justify" Typo="Typo.button" Style="width:50%">线粗细</MudText>
                                                    <MudTextField @bind-Value="@mLine.Thickness" Label="px" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                                </MudStack>
                                            </MudPaper>
                                        }
                                        else if (ctrl is WMLogo mLogo)
                                        {
                                            <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                                                <MudStack Row Justify="Justify.SpaceBetween" Style="align-items:center;">
                                                    <MudText Typo="Typo.button">白底转透明像素</MudText>
                                                    <MudSwitch @bind-Value="@mLogo.White2Transparent" Color="Color.Primary" />
                                                </MudStack>
                                                <MudDivider Class="my-2" />
                                                <MudStack Row Justify="Justify.SpaceBetween" Style="align-items:center;">
                                                    <MudText Typo="Typo.button">自动识别品牌图标</MudText>
                                                    <MudSwitch @bind-Value="@mLogo.AutoSetLogo" Color="Color.Primary" />
                                                </MudStack>
                                                <MudDivider Class="my-2" />
                                                <div Style="display:flex;align-items:center;justify-content: space-between;">
                                                    <MudText Align="Align.Justify" Typo="Typo.button">图片</MudText>
                                                    @if (ImagesBase64.TryGetValue(mLogo.ID, out string src))
                                                    {
                                                        <MudImage Src="@src" ObjectFit="ObjectFit.Contain" Width="40" Style="float:right" />
                                                    }
                                                    <MudIconButton Icon="@Icons.Material.Filled.OpenInNew" OnClick="(()=> SelectImage(mLogo))" Variant="Variant.Filled" Color="Color.Primary" Style="float:right;max-width:80px;" />
                                                </div>
                                            </MudPaper>
                                        }
                                        else if (ctrl is WMText mText)
                                        {
                                            <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                                                <MudColorPicker Label="字体颜色" ColorPickerView="ColorPickerView.Grid" @bind-Text="mText.FontColor" />
                                                <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" Class="mt-5">
                                                    <MudToggleIconButton @bind-Toggled="@mText.IsItalic" Icon="@Icons.Material.Filled.FormatItalic" Color="@Color.Error"
                                                                         ToggledIcon="@Icons.Material.Filled.FormatItalic" ToggledColor="@Color.Primary" />
                                                    <MudToggleIconButton @bind-Toggled="@mText.IsBold" Icon="@Icons.Material.Filled.FormatBold" Color="@Color.Error"
                                                                         ToggledIcon="@Icons.Material.Filled.FormatBold" ToggledColor="@Color.Primary" />
                                                </MudButtonGroup>

                                                <MudDivider Class="my-2" />
                                                <p style="font-weight:normal">文字内容</p>
                                                <div Style="line-height:30px;border-bottom:1px solid #808080;height:30px;font-weight:normal">
                                                    <div style="width:calc(100% - 80px);float:left;overflow-x:auto;white-space:nowrap">
                                                        @(string.Join(" ", mText.Exifs.Select(x => x.Prefix + x.Value + x.Suffix)))
                                                    </div>
                                                    <MudIconButton Icon="@Icons.Material.Filled.OpenInNew" OnClick="(()=>OpenExifDialog(mText))" Style="float:right;max-width:80px;" Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary" />
                                                </div>

                                                <MudTextField @bind-Value="@mText.FontSize" Label="字体大小" Variant="Variant.Text" Margin="Margin.Dense" Class="mt-5" />
                                                <MudStack Class="mt-5">
                                                    <MudTextField @bind-Value="@mText.FontFamily" Label="字体" Variant="Variant.Text" Margin="Margin.Dense" />
                                                    <MudStack Row>
                                                        <MudMenu Label="选择系统字体" Variant="Variant.Filled" Color="Color.Primary" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" Style="white-space: nowrap;">
                                                            @foreach (var font in SkiaSharp.SKFontManager.Default.FontFamilies)
                                                            {
                                                                <MudMenuItem OnClick="()=> mText.FontFamily = font">
                                                                    @font
                                                                </MudMenuItem>
                                                            }
                                                        </MudMenu>
                                                        <MudButton StartIcon="@Icons.Material.Filled.FontDownload" Variant="Variant.Filled" Color="Color.Primary" Style="white-space: nowrap;" OnClick="()=>SelectLocalFont(mText)">字体库</MudButton>
                                                    </MudStack>
                                                </MudStack>
                                            </MudPaper>
                                            <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                                                <MudStack Row Style="position:relative">
                                                    <MudText Align="Align.Justify" Typo="Typo.button">文字边框</MudText>
                                                    <MudSwitch @bind-Value="@mText.EnableBorder" Color="Color.Primary" Style="position:absolute;right:5px" />
                                                </MudStack>
                                                <MudTextField @bind-Value="@mText.BorderPadding" Label="内边距" Variant="Variant.Text" Margin="Margin.Dense" class="mt-5" />
                                                <MudTextField @bind-Value="@mText.BorderWidth" Label="边框宽度" Variant="Variant.Text" Margin="Margin.Dense" class="mt-5" />
                                                <MudTextField @bind-Value="@mText.BorderRadius" Label="边框圆角度数" Variant="Variant.Text" Margin="Margin.Dense" class="mt-5" />
                                                <MudColorPicker Label="边框颜色" ColorPickerView="ColorPickerView.Grid" @bind-Text="mText.BorderColor" Class="mt-5" />
                                            </MudPaper>
                                        }
                                    </MudExpansionPanel>
                                }
                            }
                        </MudExpansionPanels>
                    </MudExpansionPanel>
                }
            </MudExpansionPanels>
        </div>
    </div>
</div>


@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }
    [Inject]
    private IDialogService DialogService { get; set; }
    [Parameter]
    public WMCanvas CurrentCanvas { get; set; }
    [Parameter]
    public Action<WMLogo> SelectLogo { get; set; }
    [Parameter]
    public Func<WMContainer, Task> SelectContainer { get; set; }
    [Parameter]
    public Func<Task<string>> SelectDefaultImageEvt { get; set; }
    [Parameter]
    public Func<Task> ImportFontEvt { get; set; }
    [Parameter]
    public Action<Action> HotKeyEvt { get; set; }

    bool showDialog = false;
    string newTemplateName = "";
    DialogOptions DialogOptions { get; set; } = new DialogOptions() { MaxWidth = MaxWidth.Medium, NoHeader = true };
    void Submit() => MudDialog.Close(DialogResult.Ok(true));

    WMThickness BorderThickness = new WMThickness();
    WMCanvas canvas;
    string url = "";
    bool SrcLoading = false;
    List<string> Fonts = new List<string>();
    ConcurrentDictionary<string, string> ImagesBase64 = new();
    string cardStyle => $"margin:8px 0px;background:{Colors.Grey.Lighten4}";

    protected override async Task OnInitializedAsync()
    {
        if (designFunc != null && Global.DeviceType != DeviceType.Mac)
        {
            CurrentCanvas = designFunc.CurrentCanvas;
            SelectLogo = designFunc.SelectLogo;
            SelectContainer = designFunc.SelectContainer;
            SelectDefaultImageEvt = designFunc.SelectDefaultImageEvt;
            ImportFontEvt = designFunc.ImportFontEvt;
            HotKeyEvt = designFunc.HotKeyEvt;
        }

        ConcurrentDictionary<string, byte[]> dic = new();
        canvas = CurrentCanvas;
        if (canvas.ImageProperties == null) canvas.ImageProperties = new WMImage();
        var p = Path.Combine(Global.AppPath.TemplatesFolder, canvas.ID, "default.jpg");
        Global.ImageFile2Base64(dic, p, "default");
        var folder = Global.AppPath.TemplatesFolder + canvas.ID + System.IO.Path.DirectorySeparatorChar;
        canvas.Children.ForEach(c =>
        {
            if (!string.IsNullOrEmpty(c.Path)) Global.ImageFile2Base64(dic, folder + c.Path, c.ID);
            c.Controls.ForEach(x =>
            {
                if (x is WMLogo mLogo) Global.ImageFile2Base64(dic, folder + mLogo.Path, mLogo.ID);
                else if (x is WMContainer mContainer)
                {
                    mContainer.Controls.ForEach(z =>
                    {
                        if (z is WMLogo logo1) Global.ImageFile2Base64(dic, folder + logo1.Path, logo1.ID);
                    });

                };
            });
        });
        foreach (var e in dic)
        {
            ImagesBase64[e.Key] = await JSRuntime.InvokeAsync<string>("byteToUrl", e.Value);
        }
        PreviewImageRefresh();

        HotKeyEvt?.Invoke(PreviewImageRefresh);
        var api = new APIHelper();
        var _ = api.PageVisitRecord(ProgramPage.Design, Global.DeviceType == DeviceType.Mac ? Platform.Mac : Platform.Win);
    }

    private async void PreviewImageRefresh()
    {
        SrcLoading = true;
        var helper = new WatermarkHelper();
        var b64 = await helper.GenerationAsync(canvas, null, true, true);
        url = await JSRuntime.InvokeAsync<string>("byteToUrl", b64);
        SrcLoading = false;
        StateHasChanged();

    }

    async void OpenExifDialog(WMText mText)
    {
        var parameters = new DialogParameters<ExifConfig>();
        parameters.Add(x => x.Exifs, mText.Exifs);
        var option = new DialogOptions() { NoHeader = true, MaxWidth = MaxWidth.Medium };
        var rst = DialogService.Show<ExifConfig>("", parameters, option);
        var dialogResult = await rst.Result;
        if (!dialogResult.Canceled)
        {
            mText.Exifs = (List<WMExifConfigInfo>)dialogResult.Data;
            PreviewImageRefresh();
        }
    }

    async void OpenEditDialog()
    {
        var parameters = new DialogParameters<EditComponentDialog>();
        parameters.Add(x => x.mCanvas, canvas);
        var option = new DialogOptions() { NoHeader = true, MaxWidth = MaxWidth.Medium };
        var rst = DialogService.Show<EditComponentDialog>("编辑模板", parameters, option);
        var dialogResult = await rst.Result;
        if (!dialogResult.Canceled)
        {
            StateHasChanged();
        }
    }

    void SaveTemplate()
    {
        try
        {
            var path = Global.AppPath.TemplatesFolder + CurrentCanvas.ID;
            if (!System.IO.Directory.Exists(path))
            {
                System.IO.Directory.CreateDirectory(path);
            }
            var json = Global.CanvasSerialize(canvas);
            System.IO.File.WriteAllText(path + System.IO.Path.DirectorySeparatorChar + "config.json", json);
        }
        catch { }
        finally
        {
            string message = "保存成功！";
            Common.ShowMsg(Snackbar, message, Severity.Success);
        }
    }

    void SaveAs()
    {
        string message = "保存成功！";
        try
        {
            if (string.IsNullOrEmpty(newTemplateName)) return;
            var ID = Guid.NewGuid().ToString("N").ToUpper();
            var path = Global.AppPath.TemplatesFolder + ID;
            if (!System.IO.Directory.Exists(path))
            {
                System.IO.Directory.CreateDirectory(path);
            }
            var source = Global.AppPath.TemplatesFolder + canvas.ID;
            DirectoryInfo info = new DirectoryInfo(source);
            foreach (var file in info.GetFiles())
            {
                if (file.Exists)
                {
                    var target = path + Path.DirectorySeparatorChar + file.Name;
                    file.CopyTo(target, true);
                }
            }
            var json = Global.CanvasSerialize(canvas);
            var newCanvas = Global.ReadConfig(json);
            newCanvas.ID = ID;
            newCanvas.Name = newTemplateName;
            var newJson = Global.CanvasSerialize(newCanvas);
            System.IO.File.WriteAllText(path + System.IO.Path.DirectorySeparatorChar + "config.json", newJson);
            showDialog = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            message = ex.Message;
        }
        Common.ShowMsg(Snackbar, message, Severity.Success);
    }

    async void SelectImage(WMLogo mLogo)
    {
        SelectLogo?.Invoke(mLogo);
        var destFile = Global.AppPath.TemplatesFolder + canvas.ID + Path.DirectorySeparatorChar + mLogo.Path;
        ConcurrentDictionary<string, byte[]> dic = [];
        Global.ImageFile2Base64(dic, destFile, mLogo.ID);
        ImagesBase64[mLogo.ID] = await JSRuntime.InvokeAsync<string>("byteToUrl", dic.First().Value);
        PreviewImageRefresh();
    }

    async void SelectImage(WMContainer mContainer)
    {
        var rs = SelectContainer.Invoke(mContainer);
        await rs;
        var destFile = Global.AppPath.TemplatesFolder + canvas.ID + Path.DirectorySeparatorChar + Path.GetFileName(mContainer.Path);
        using var bitmap = SKBitmap.Decode(mContainer.Path);
        Global.WriteThumbnailImage(bitmap, destFile);
        ConcurrentDictionary<string, byte[]> dic = [];
        Global.ImageFile2Base64(dic, destFile, mContainer.ID);
        mContainer.Path = Path.GetFileName(mContainer.Path);
        ImagesBase64[mContainer.ID] = await JSRuntime.InvokeAsync<string>("byteToUrl", dic.First().Value);
        PreviewImageRefresh();
    }

    async void SelectDefaultImage()
    {
        var p = await SelectDefaultImageEvt.Invoke();
        if (string.IsNullOrEmpty(p)) return;
        ConcurrentDictionary<string, byte[]> dic = new();
        var destFolder = Global.AppPath.TemplatesFolder + CurrentCanvas.ID;
        var destFile = destFolder + System.IO.Path.DirectorySeparatorChar + "default.jpg";
        SkiaSharp.SKBitmap bitmap = SkiaSharp.SKBitmap.Decode(p);
        Global.WriteThumbnailImage(bitmap, destFile);
        Global.ImageFile2Base64(dic, destFile, "default");
        ImagesBase64["default"] = await JSRuntime.InvokeAsync<string>("byteToUrl", dic.First().Value);
        PreviewImageRefresh();
    }

    async void SelectLocalFont(WMText mText)
    {
        var param = new DialogParameters<FontsDialog>();
        param.Add(x => x.ImportFontEvt, ImportFontEvt);
        var dialog = DialogService.Show<FontsDialog>(string.Empty, param, new DialogOptions() { MaxWidth = MaxWidth.ExtraLarge, NoHeader = true });
        var result = await dialog.Result;
        if (!result.Canceled && result.Data is KeyValuePair<string, string> pair)
        {
            mText.FontFamily = pair.Key;
            PreviewImageRefresh();
        }
    }

    void RemoveImage(WMContainer container)
    {
        var filename = Global.AppPath.TemplatesFolder + canvas.ID + Path.DirectorySeparatorChar + container.Path;
        if (File.Exists(filename))
        {
            File.Delete(filename);
            container.Path = string.Empty;
            ImagesBase64.Remove(container.ID, out string v);
            PreviewImageRefresh();
        }
    }


    void ValueChanged2(string v)
    {
        canvas.LengthWidthRatio = v;
        var wh = v.Split(":");
        var w = Convert.ToDouble(wh[0]);
        var h = Convert.ToDouble(wh[1]);
        var xs = 6000 / w;
        canvas.CustomWidth = 6000;
        canvas.CustomHeight = (int)(xs * h);
        PreviewImageRefresh();
    }
}