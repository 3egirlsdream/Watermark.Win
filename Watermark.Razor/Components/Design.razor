@using System.IO
@using Masa.Blazor
@using Microsoft.JSInterop
@using System.Collections.Concurrent
@using SkiaSharp
@using Watermark.Razor
@using Watermark.Shared.Enums
@using Watermark.Shared.Models
@using Watermark.Win.Models
@using Watermark.Razor.Parts
@inject IJSRuntime JSRuntime
@inject IPopupService PopupService
@inject WMDesignFunc designFunc


<MApp Style="background:#e3e3e3; overflow:hidden">
    <MToolbar Dense>
        <IconButton Icon="@("mdi-content-save-outline")" OnClick="SaveTemplate" Class="mx-1"></IconButton>

       
        <MSpacer />
        <MButton Color="Color.Secondary" Class="mr-5" OnClick="()=>showDialog = true">另存为</MButton>
        <MButton Color="Color.Error" OnClick="PreviewImageRefresh">
            @if (SrcLoading)
            {
                <MProgressCircular Color="Color.Secondary" Indeterminate="true" Class="ma-4" />
            }
            else
            {
                <MIcon>@ICONS.Refresh</MIcon>
                @("刷新")
            }
        </MButton>
        @if (designFunc is null || Global.DeviceType == DeviceType.Mac)
        {
            <MButton Color="Color.Error" OnClick="Submit">退出</MButton>
        }
    </MToolbar>
    <div Style="height:calc(100vh - 48px);width:100%;display: flex;justify-content:space-between" @onclick="()=>{showDialog = false;}">
        <div style="width:calc(100% - 300px);height:calc(100% - 48px);">
            <div style="background:#e3e3e3;width:100%;height:100%;padding:10px;">
                @if (!string.IsNullOrEmpty(url))
                {
                    <MImage Contain Src="@url" Elevation="0" Style="width: 100%; height: 100%; padding-left: 5%; padding-right: 5%; padding-top: 100px; padding-bottom: 100px;" />
                }

            </div>
        </div>


        <DesignConfiguration canvas="canvas" Style="width:300px;height:100%"
                             Changed="ValueChanged2"
                             SelectDefaultImageEvt="SelectDefaultImageEvt" />
    </div>

    <MDialog ContentStyle="width:300px;height:100px;" @bind-Value="@showDialog" Class="pa-4">
        <MTextField @bind-Value="newTemplateName" T="string" Label="模板名称" Required="true" HideDetails="true" />
        <MButton OnClick="SaveAs" Class="mt-2" Elevation="0">确定</MButton>
    </MDialog>
    
</MApp>


@code {
    [Parameter]
    public WMCanvas CurrentCanvas { get; set; }
    [Parameter]
    public Func<WMLogo, Task> SelectLogo { get; set; }
    [Parameter]
    public Func<WMContainer, Task> SelectContainer { get; set; }
    [Parameter]
    public Func<Task<string>> SelectDefaultImageEvt { get; set; }
    [Parameter]
    public Action<Action> HotKeyEvt { get; set; }
    [Parameter]
    public EventCallback OnClose { get; set; }
    bool showExifConfig = false;
    bool showDialog = false;
    string newTemplateName = "";
    void Submit()
    {
        if (OnClose.HasDelegate) OnClose.InvokeAsync();
    }

    WMThickness BorderThickness = new WMThickness();
    WMCanvas canvas;
    string url = "";
    bool SrcLoading = false;
    List<string> Fonts = new List<string>();
    //ConcurrentDictionary<string, string> ImagesBase64 = new();
    List<string> Radioes = ["1:1", "16:9", "9:16", "3:2", "2:3", "4:3", "3:4", "21:9", "18:9", "2.39:1"];
    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (designFunc != null && Global.DeviceType != DeviceType.Mac)
            {
                CurrentCanvas = designFunc.CurrentCanvas;
                SelectLogo = designFunc.SelectLogo;
                SelectContainer = designFunc.SelectContainer;
                SelectDefaultImageEvt = designFunc.SelectDefaultImageEvt;
                HotKeyEvt = designFunc.HotKeyEvt;
            }

            //ConcurrentDictionary<string, byte[]> dic = new();
            canvas = CurrentCanvas;
            // if (canvas.ImageProperties == null) canvas.ImageProperties = new WMImage();
            // var p = Path.Combine(Global.AppPath.TemplatesFolder, canvas.ID, "default.jpg");
            // Global.ImageFile2Base64(dic, p, "default");
            // var folder = Global.AppPath.TemplatesFolder + canvas.ID + System.IO.Path.DirectorySeparatorChar;
            // canvas.Children.ForEach(c =>
            // {
            //     if (!string.IsNullOrEmpty(c.Path)) Global.ImageFile2Base64(dic, folder + c.Path, c.ID);
            //     c.Controls.ForEach(x =>
            //     {
            //         if (x is WMLogo mLogo) Global.ImageFile2Base64(dic, folder + mLogo.Path, mLogo.ID);
            //         else if (x is WMContainer mContainer)
            //         {
            //             mContainer.Controls.ForEach(z =>
            //             {
            //                 if (z is WMLogo logo1) Global.ImageFile2Base64(dic, folder + logo1.Path, logo1.ID);
            //             });

            //         };
            //     });
            // });
            // foreach (var e in dic)
            // {
            //     ImagesBase64[e.Key] = await JSRuntime.InvokeAsync<string>("byteToUrl", e.Value);
            // }

            PreviewImageRefresh();
            try
            {
                HotKeyEvt?.Invoke(PreviewImageRefresh);
            }
            catch (Exception ex)
            {
                Common.ShowMsg(PopupService, ex.Message, AlertTypes.Error);
            }
            var api = new APIHelper();
            var _ = api.PageVisitRecord(ProgramPage.Design, Global.DeviceType == DeviceType.Mac ? Platform.Mac : Platform.Win);
        }
        catch (Exception err)
        {
            Common.ShowMsg(PopupService, err.Message, AlertTypes.Error);
        }
    }

    private async void PreviewImageRefresh()
    {
        SrcLoading = true;
        var helper = new WatermarkHelper();
        var b64 = await helper.GenerationAsync(canvas, null, true, true);
        url = await JSRuntime.InvokeAsync<string>("byteToUrl", b64);
        SrcLoading = false;
        StateHasChanged();

    }


    void SaveTemplate()
    {
        try
        {
            var path = Global.AppPath.TemplatesFolder + CurrentCanvas.ID;
            if (!System.IO.Directory.Exists(path))
            {
                System.IO.Directory.CreateDirectory(path);
            }
            var json = Global.CanvasSerialize(canvas);
            System.IO.File.WriteAllText(path + System.IO.Path.DirectorySeparatorChar + "config.json", json);
        }
        catch { }
        finally
        {
            string message = "保存成功！";
            Common.ShowMsg(PopupService, message, AlertTypes.Success);
        }
    }

    void SaveAs()
    {
        string message = "保存成功！";
        try
        {
            if (string.IsNullOrEmpty(newTemplateName)) return;
            var ID = Guid.NewGuid().ToString("N").ToUpper();
            var path = Global.AppPath.TemplatesFolder + ID;
            if (!System.IO.Directory.Exists(path))
            {
                System.IO.Directory.CreateDirectory(path);
            }
            var source = Global.AppPath.TemplatesFolder + canvas.ID;
            DirectoryInfo info = new DirectoryInfo(source);
            foreach (var file in info.GetFiles())
            {
                if (file.Exists)
                {
                    var target = path + Path.DirectorySeparatorChar + file.Name;
                    file.CopyTo(target, true);
                }
            }
            var json = Global.CanvasSerialize(canvas);
            var newCanvas = Global.ReadConfig(json);
            newCanvas.ID = ID;
            newCanvas.Name = newTemplateName;
            var newJson = Global.CanvasSerialize(newCanvas);
            System.IO.File.WriteAllText(path + System.IO.Path.DirectorySeparatorChar + "config.json", newJson);
            showDialog = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            message = ex.Message;
        }
        Common.ShowMsg(PopupService, message, AlertTypes.Success);
    }



    void ValueChanged2(string v)
    {
        canvas.LengthWidthRatio = v;
        if (string.IsNullOrEmpty(v)) return;
        var wh = v.Split(":");
        var w = Convert.ToDouble(wh[0]);
        var h = Convert.ToDouble(wh[1]);
        var xs = 6000 / w;
        canvas.CustomWidth = 6000;
        canvas.CustomHeight = (int)(xs * h);
        PreviewImageRefresh();
    }
}