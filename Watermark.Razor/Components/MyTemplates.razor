@using Masa.Blazor
@using Microsoft.AspNetCore.Components.Forms
@using System.Windows
@using System.IO
@using Microsoft.JSInterop
@using Watermark.Razor.Parts
@using Watermark.Shared.Enums
@using Watermark.Shared.Models
@using Watermark.Win.Models
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@inject IPopupService PopupService
@inject IJSRuntime JSRuntime
@inject IWMWatermarkHelper helper
@inject APIHelper api
<style>
    .mud-card-actions {
        position: relative;
    }
    .m-dialog-custom {
        scrollbar-width: none;
        height: 90%;
        border: 15px solid #fff;
    }

</style>
<MDialog Style="min-width:50%;min-height:50%;width:90%; overflow-y:hidden;padding:20px 0;" Value="Visible" ValueChanged="VisibleChanged" ContentClass="m-dialog-custom">
    <MRow Dense Style="overflow-y:auto;padding:5px;">
        <MCol Cols="12">
            <div style="font-size:1.5rem;">
                <b>我本地的</b><IconButton Icon="@ICONS.Refresh" OnClick="()=>InitTemplates()"></IconButton>
            </div>
        </MCol>
        @foreach (var grid in wMTemplates)
        {
            <MCol Cols="3">
                <MarketCard canvas="@grid" DownloadEvt="Download" Versions="@Versions" Name="@grid.Name" Src="@(pairs[grid.ID])">
                    <IconButton Icon="@ICONS.CloudUpload" OnClick="()=>Upload(grid.ID)" Class="mx-1" Elevation="1" />
                    <IconButton Icon="@ICONS.Edit" OnClick="(()=>EditTemplate(grid))" Class="mx-1" Elevation="1" />
                    <MSpacer />
                    <IconButton Icon="@ICONS.Delete" OnClick="()=>DeleteTemplate(grid.ID)" Class="mx-1" Color="error" Elevation="1" />
                </MarketCard>
            </MCol>
        }

        <MCol Cols="12">
            <div style="font-size:1.5rem;">
                <b>我收藏的</b>
            </div>
        </MCol>
        @foreach (var t in ILikeTemplates)
        {
            <MCol Cols="3">
                <MarketCard canvas="@t.WMCanvas" Name="@(t.Name ?? t.Desc)" Src="@(t.Src)">
                    <IconButton Icon="@ICONS.Delete" OnClick="()=>DeleteILike(t.WatermarkId)" Elevation="1" Color="error"/>
                        <MSpacer/>
                    <IconButton Icon="@ICONS.Edit" OnClick="()=>Download(t.WatermarkId)" Elevation="1" />
                </MarketCard>
            </MCol>
        }
        <MCol Cols="12">
            <div style="font-size:1.5rem;">
                <b>我上传的</b>
            </div>
        </MCol>
        @foreach (var t in ZipedTemplates)
        {
            <MCol Cols="3">
                <MarketCard canvas="@t.WMCanvas" Name="@(t.Name ?? t.Desc)" Src="@(t.Src)">
                    <MButton Color="@(t.Visible ? "" : "warning")" Style="cursor:pointer;" OnClick="()=>TakOffOnShop(t)">
                        <MIcon Left>mdi-store-off</MIcon>@(t.Visible ? "下架" : "上架")
                    </MButton>
                   <MSpacer/>
                    <IconButton Icon="@ICONS.Download" Color="Color.Default" OnClick="()=>Download(t.WatermarkId)" Class="mx-1" Elevation="1" />
                    <IconButton Icon="@ICONS.Edit" Color="Color.Default" OnClick="()=>DownloadEdit(t.WatermarkId)" Class="mx-1" Elevation="1" />
                </MarketCard>
            </MCol>
        }
        <MOverlay @bind-Value="@loading" Dark="false" Absolute="false" ZIndex="9999">
            <MCard Style="display:flex;flex-direction:column;height:160px;width:160px;align-items:center;justify-content:center">
                <MProgressCircular Indeterminate="true" Color="primary" Class="my-1"/>
                <Label Name="@loadingMessage"/>
            </MCard>
        </MOverlay>

        <MDialog ContentStyle="width:350px;padding:10px;" @bind-Value="showLogin">
            <LoginContent CloseEvent="loginClosed"/>
        </MDialog>
        <MDialog @bind-Value="showUpload.Show" ContentStyle="width:400px;padding:10px;">
            <UploadTemplateDialog OnClose="UploadClosed" Id="@showUpload.Id" Name="@showUpload.Name" />
        </MDialog>
    </MRow>
</MDialog>



@code {
    [Parameter]
    public bool Visible { get; set; }
    [Parameter]
    public EventCallback<bool> VisibleChanged { get; set; }
    [Parameter]
    public Action<WMCanvas> EditTemplateEvt { get; set; }
    bool showLogin = false;
    UploadTemplateDialog.UploadParameter showUpload = new();
    bool loading = true;
    string loadingMessage = "正在加载模板...";
    List<WMCanvas> wMTemplates { get; set; } = [];
    List<WMZipedTemplate> ZipedTemplates { get; set; } = new List<WMZipedTemplate>();
    List<WMZipedTemplate> ILikeTemplates { get; set; } = new();
    Dictionary<string, string> pairs;
    Dictionary<string, int> Versions = [];

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await InitTemplates();
            await LoadILikeTemplate();
            await LoadCloudTemplate();
            await api.PageVisitRecord(ProgramPage.MyTemplate, Platform.Win);
        }
        catch (Exception ex)
        {
            Common.ShowMsg(PopupService, ex.Message, AlertTypes.Error);
        }
    }

    async Task InitTemplates()
    {
        try
        {
            loading = true;
            pairs = new Dictionary<string, string>();
            if (!System.IO.Directory.Exists(Global.AppPath.TemplatesFolder))
            {
                System.IO.Directory.CreateDirectory(Global.AppPath.TemplatesFolder);
            }

            System.IO.DirectoryInfo directoryInfo = new System.IO.DirectoryInfo(Global.AppPath.TemplatesFolder);
            wMTemplates = new List<WMCanvas>();
            foreach (var dirct in directoryInfo.GetDirectories())
            {
                var configPath = dirct.FullName + System.IO.Path.DirectorySeparatorChar + "config.json";
                if (System.IO.File.Exists(configPath))
                {
                    var canvas = await Task.Run(() =>
                    {
                        var content = File.ReadAllText(configPath);
                        return Global.ReadConfig(content);
                    });
                    canvas.Exif[canvas.ID] = ExifHelper.DefaultMeta;
                    await Global.InitFonts([canvas]);
                    var b64 = await helper.GenerationAsync(canvas, null, true);
                    pairs[canvas.ID] = await JSRuntime.InvokeAsync<string>("byteToUrl", b64);
                    wMTemplates.Add(canvas);
                    StateHasChanged();
                }
            }

            var version = await api.GetVersions(wMTemplates.Select(x => x.ID).ToList());
            if (version.success && version.data != null)
            {
                Versions = version.data;
            }
            loading = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Common.ShowMsg(PopupService, ex.Message, AlertTypes.Error);
        }
        finally
        {
            GC.Collect();
        }
    }

    async Task LoadCloudTemplate()
    {
        try
        {
            if (string.IsNullOrEmpty(Global.CurrentUser.ID)) return;
            var helper = new APIHelper();
            ZipedTemplates = await helper.GetWatermarks(Global.CurrentUser.ID, 1, 100);
            ZipedTemplates.ForEach(x => x.Src = Global.GetSrc(x.WatermarkId));
        }
        catch (Exception ex)
        {
            Common.ShowMsg(PopupService, ex.Message, AlertTypes.Error);
        }
        finally
        {
            GC.Collect();
        }
    }

    async Task LoadILikeTemplate()
    {
        if (string.IsNullOrEmpty(Global.CurrentUser.ID)) return;
        var helper = new APIHelper();
        if (!Directory.Exists(Global.AppPath.MarketFolder))
        {
            Directory.CreateDirectory(Global.AppPath.MarketFolder);
        }
        var templateFolderInfo = new DirectoryInfo(Global.AppPath.MarketFolder);
        var downloadedTemplates = templateFolderInfo.GetDirectories().Select(x => x.Name).ToList();
        var getILike = await helper.GetILike(Global.CurrentUser.ID);
        ILikeTemplates = new List<WMZipedTemplate>();
        if (getILike != null && getILike.success)
        {
            ILikeTemplates = getILike.data;
        }
        else
        {
            Common.ShowMsg(PopupService, getILike?.message?.content, AlertTypes.Error);
        }
        ILikeTemplates.ForEach(x => x.Src = Global.GetSrc(x.WatermarkId));
    }

    void EditTemplate(WMCanvas canvas)
    {
        EditTemplateEvt.Invoke(canvas);
    }

    async void DeleteTemplate(string id)
    {

        bool? result = await PopupService.ConfirmAsync("删除", "确定删除模板？", AlertTypes.Info);
        if (result == true)
        {
            try
            {
                loadingMessage = "正在删除...";
                var path = Global.AppPath.TemplatesFolder + id;
                System.IO.Directory.Delete(path, true);
                StateHasChanged();
            }
            catch { }
            finally
            {
                loadingMessage = "正在加载...";
                await InitTemplates();
            }
        }

    }

    async void Upload(string watermarkId)
    {
        if (string.IsNullOrEmpty(Global.CurrentUser.ID))
        {
            showLogin = true;
            return;
        }

        async Task<bool> func()
        {
            APIHelper api = new APIHelper();
            var apiResult = await api.TemplateIsExsist(watermarkId, Global.CurrentUser?.ID);
            if (apiResult.Item1 && apiResult.Item2)
            {
                bool? rtl = await PopupService.ConfirmAsync("确认覆盖", "此模板已上传，确定覆盖？", AlertTypes.Info);
                return rtl == true;
            }
            else if (apiResult.Item1 && !apiResult.Item2)
            {
                await PopupService.ConfirmAsync("错误", "不能覆盖不是自己所有的模板，请另存为后再上传!", AlertTypes.Info);
                return false;
            }
            return true;
        }

        var r = await func();
        if (!r) return;
        var tp = wMTemplates.FirstOrDefault(c => c.ID == watermarkId);
        showUpload.Show = true;
        showUpload.Id = tp?.ID ?? "";
        showUpload.Name = tp?.Name ?? "";
        StateHasChanged();
    }

    async void Download(string watermarkId)
    {
        var helper = new APIHelper();
        async Task<bool> func()
        {
            if (helper!.FolderExsist(watermarkId))
            {
                bool? rtl = await PopupService.ConfirmAsync("确认覆盖", "本地已下载模板，确认覆盖？", AlertTypes.Info);
                return rtl == true;
            }
            return true;
        }

        var isOK = await func();
        if (!isOK) return;
        loading = true;
        var result = await helper.Download(watermarkId, Global.CurrentUser?.ID ?? "");
        string message = "";
        AlertTypes Severity = AlertTypes.Success;
        if (result)
        {
            Severity = AlertTypes.Success;
            message = "下载成功";
            await InitTemplates();
        }
        else
        {
            Severity = AlertTypes.Error;
            message = "下载失败";
        }
        Common.ShowMsg(PopupService, message, Severity);
        loading = false;
        StateHasChanged();
    }

    async void DownloadEdit(string watermarkId)
    {
        var helper = new APIHelper();

        async Task<bool> func()
        {
            if (helper!.FolderExsist(watermarkId))
            {
                bool? rtl = await PopupService.ConfirmAsync("确认覆盖", "本地已下载模板，确认覆盖？", AlertTypes.Info);
                return rtl == true;
            }
            return true;
        }

        var isOK = await func();
        if (!isOK) return;
        loading = true;
        var result = await helper.Download(watermarkId, Global.CurrentUser?.ID ?? "");
        string message = "";
        AlertTypes Severity = AlertTypes.Success;
        if (result)
        {
            Severity = AlertTypes.Success;
            message = "下载成功";
            await InitTemplates();
            var canvas = wMTemplates.FirstOrDefault(c => c.ID == watermarkId);
            if (canvas != null)
            {
                EditTemplate(canvas);
            }
        }
        else
        {
            Severity = AlertTypes.Error;
            message = "下载失败";
        }

        Common.ShowMsg(PopupService, message, Severity);
        loading = false;
        StateHasChanged();
    }

    void DeleteILike(string watermarkId)
    {
        if (Global.CurrentUser != null && !string.IsNullOrEmpty(Global.CurrentUser.ID))
        {
            var helper = new APIHelper();
            helper.DeleteILike(Global.CurrentUser.ID, watermarkId);
            var item = ILikeTemplates.FirstOrDefault(x => x.WatermarkId == watermarkId);
            if (item != null)
            {
                ILikeTemplates.Remove(item);
                StateHasChanged();
            }
        }
    }

    async void TakOffOnShop(WMZipedTemplate t)
    {
        if (Global.CurrentUser == null || string.IsNullOrEmpty(Global.CurrentUser.ID)) return;
        var api = new APIHelper();
        var result = await api.TakeOffOnWatermark(Global.CurrentUser.ID, t.WatermarkId);
        if (result.success && result.data)
        {
            t.Visible = !t.Visible;
            StateHasChanged();
        }
    }

    void loginClosed(bool f)
    {
        showLogin = false;
    }

    async Task UploadClosed(dynamic data)
    {
        if (data == null)
        {
            return;
        }

        loading = true;
        loadingMessage = "正在上传...";
        StateHasChanged();
        var helper = new APIHelper();
        var rst = await helper.UploadWatermark(showUpload.Id, Convert.ToString(data.Name ?? ""), Convert.ToInt32(data.Coin ?? "0"), Convert.ToString(data.Desc ?? ""), Convert.ToString(data.Tags ?? ""));
        string message = "";
        AlertTypes severity = AlertTypes.Success;

        if (rst.success)
        {
            message = $"上传成功{(!rst.data ? "(缓存刷新失败)" : "")}";
        }
        else
        {
            severity = AlertTypes.Error;
            message = rst.message?.content;
        }

        var target = Global.AppPath.TemplatesFolder + $"{showUpload.Id}.zip";
        if (File.Exists(target)) File.Delete(target);
        Common.ShowMsg(PopupService, message, severity);
        loading = false;
        StateHasChanged();
    }

}