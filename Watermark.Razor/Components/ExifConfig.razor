@using Masa.Blazor
@using Watermark.Razor.Parts
@using Watermark.Shared.Enums
@using Watermark.Shared.Models
@using Watermark.Win.Models

<style>
    .ddd {
        border: 0;
        outline: 0;
        text-decoration: 2px solid underline;
        line-height: 2;
        text-underline-offset: 10px;
        display: inline-block;
        border-bottom: 1px solid;
        width: 10px;
    }

    input {
        width: fit-content;
    }
</style>

<MCard Style="width:100%; height:100%;overflow:hidden;" Flat>
    <MToolbar Flat
              Color="primary"
              Dark>
        <MToolbarTitle>图片元数据配置</MToolbarTitle>
    </MToolbar>
    <MCard Elevation="0" Style="white-space: nowrap; overflow-x:auto;display:flex;align-items:center;height:80px;" Flat Color="#ECEFF1" Class="mx-2 mt-2">
        <MSelect Items="ContainerId2Name.ToList()"
                 TItem="KeyValuePair<string, string>"
                 TValue="string"
                 TItemValue="string"
                 ItemText="u => u.Value"
                 ItemValue="u => u.Key"
                 @bind-Value="mText.BindedContainerId"
                 Label="绑定的元数据来源图片容器"
                 Style="margin:8px"
                 HideDetails="true"
                 Readonly="@(CanvasType == CanvasType.Normal)" />
    </MCard>
    <div style="height:calc(100% - 144px);width:100%;overflow:hidden;display:flex;flex-direction: column;">
        <MCard Elevation="0" Style="flex-wrap: wrap; overflow-y:auto;justify-content:flex-start;display:flex;max-height:80px; scrollbar-width:none;min-height: 52px;" Flat Class="pa-1 mx-2 mt-1" Color="#ECEFF1">
            @foreach (var exif in mText.Exifs)
            {
                <MCard Elevation="0" Style="display:flex;align-items:center;justify-content:flex-start;gap: 0 10px;text-wrap: nowrap;" Color="#d8d8d8" Class="ma-1 pa-1">
                    <Label Name="@(exif.Prefix + exif.GetMetaValue(exif.Value, true).Result + exif.Suffix)" Small="true" />
                    <IconButton Icon="@ICONS.Edit" Elevation="0" OnClick="@(()=>{CurrentExif = exif; detailShow = true;})" Text="true" />
                </MCard>
            }
        </MCard>
        <div style="overflow:hidden;flex-direction:column; display:flex;justify-content:space-between;flex: 1;">
            <MCard Elevation="0" Flat Color="#ECEFF1" Class="mx-2 mt-1" Style="scrollbar-width:none;overflow:auto;">
                <MCard Style="display:flex; align-items:center;justify-content:flex-start;position:sticky;top:0;z-index:999;" Color="#ECEFF1">
                    <MIcon>@ICONS.Warning</MIcon>
                    <Label Name="以下均为示例数据，不可以编辑，可以添加前后缀, 导出以图片实际元数据为准" />
                </MCard>
                <MChipGroup Multiple Style="display:flex;flex-wrap:wrap" Column Class="mx-1" Values="checkedChips" ValuesChanged="CheckedChipsChanged">
                    @foreach (var exif in DefaultExifLists)
                    {
                        @if (ExifHelper.GetName.TryGetValue(exif.Key, out string? v))
                        {
                            <MChip Label Filter OnClick="() => Click(exif)">
                                @(v + $"({exif.Value})")
                            </MChip>
                        }
                    }
                </MChipGroup>
            </MCard>

            <div class="px-1 ma-1">
                <MButton Color="primary" OnClick="Submit" Elevation="0" Block Class="my-2">保存</MButton>
            </div>
        </div>
    </div>
</MCard>


<MDialog @bind-Value="detailShow" ContentStyle="@($"height:{(Global.IsMobile ? "100%" : "470px")};width:{(Global.IsMobile ? "100%" : "330px")};")">
    <MCard Flat Style="overflow:hidden;height:100%;display:flex;flex-direction:column">
        <div style="display:flex;flex-direction:column;overflow:auto;scrollbar-width:none;" class="pa-2">
            <MCard Elevation="25" Style="padding:8px">
                <MTextField @bind-Value="CurrentExif.Value" Label="参数" Readonly="true" />
                <Watermark.Razor.Components.FontStyleComp fStyle="CurrentExif.ValueStyle" />
            </MCard>
            <MCard Elevation="25" Style="padding:8px" Class="mt-1">
                <MTextField @bind-Value="CurrentExif.Prefix" Label="前缀" />
                <FontStyleComp fStyle="CurrentExif.PrefixStyle" />
            </MCard>
            <MCard Elevation="25" Style="padding:8px" Class="mt-1">
                <MTextField @bind-Value="CurrentExif.Suffix" Label="后缀" />
                <FontStyleComp fStyle="CurrentExif.SuffixStyle" />
            </MCard>
            <MCard Elevation="25" Style="padding:8px" Class="mt-1">
                <MTextField @bind-Value="CurrentExif.RemoveString" Label="删除字符" />

                @if (CurrentExif.Value.Contains(","))
                {
                    <MSelect @bind-Value="CurrentExif.LocationType"
                             Label="经纬度识别"
                             Items="XY"
                             TValue="int"
                             TItemValue="int"
                             TItem="KeyValuePair<int, string>"
                             ItemText="u=> u.Value"
                             ItemValue="u => u.Key" />
                }
                @if (DateTime.TryParse(CurrentExif.Value, out DateTime dt))
                {
                    <MTextField @bind-Value="CurrentExif.DateTimeFormat" Label="日期格式转换" Dense HideDetails="true" />

                    <MCheckbox @bind-Value="CurrentExif.GanZhi" Label="干支纪年" Dense HideDetails="true"></MCheckbox>
                }
                <MCheckbox @bind-Value="CurrentExif.ToLower" Label="全部小写" Dense HideDetails="true"></MCheckbox>
                <MCheckbox @bind-Value="CurrentExif.ToUpper" Label="全部大写" Dense HideDetails="true"></MCheckbox>
            </MCard>
        </div>

        <MButton Color="Color.Primary" Elevation="0" OnClick="()=>detailShow = false" Class="ma-2">确定</MButton>

    </MCard>
</MDialog>


@code {
    List<StringNumber> checkedChips = new();
    void CheckedChipsChanged(List<StringNumber> numbers)
    {
        checkedChips = numbers;
        for (var i = 0; i < DefaultExifLists.Count; i++)
        {
            var e = DefaultExifLists[i];
            if (numbers.Contains(i))
            {
                e.IsChecked = true;
            }
            else e.IsChecked = false;
        }
    }

    void Submit()
    {
        if (OnClose.HasDelegate)
        {
            OnClose.InvokeAsync(mText);
        }
    }
    [Parameter]
    public WMText mText { get; set; }
    [Parameter]
    public Dictionary<string, string> ContainerId2Name { get; set; }
    [Parameter]
    public CanvasType CanvasType { get; set; }
    [Parameter]
    public EventCallback<WMText> OnClose { get; set; }

    List<KeyValuePair<int, string>> XY = new()
    {
        new KeyValuePair<int, string>(-1, "默认"),
        new KeyValuePair<int, string>(0, ExifHelper.GetLocation().result.address),
        new KeyValuePair<int, string>(1, ExifHelper.GetLocation().result.ad_info.name),
        new KeyValuePair<int, string>(2, ExifHelper.GetLocation().result.ad_info.nation),
        new KeyValuePair<int, string>(3, ExifHelper.GetLocation().result.ad_info.province),
        new KeyValuePair<int, string>(4, ExifHelper.GetLocation().result.ad_info.city),
        new KeyValuePair<int, string>(5, ExifHelper.GetLocation().result.ad_info.district),
        new KeyValuePair<int, string>(6, ExifHelper.GetLocation().result.ad_info.province + " ● " + @ExifHelper.GetLocation().result.ad_info.city),
    };

    //"F##4##suffix;"
    WMExifConfigInfo CurrentExif = new();
    bool detailShow = false;
    void Click(DefaultExifs exif)
    {
        var i = new WMExifConfigInfo
            {
                Prefix = "",
                Suffix = "",
                Key = exif.Key,
                Value = exif.Value
            };
        if (exif.IsChecked && !mText.Exifs.Any(c => c.Key == exif.Key))
        {
            mText.Exifs.Add(i);
        }
        else
        {
            var e = mText.Exifs.FirstOrDefault(c => c.Key == exif.Key);
            if (e != null)
            {
                mText.Exifs.Remove(e);
            }
        }
    }

    void Delete(WMExifConfigInfo exif)
    {
        var e = DefaultExifLists.FirstOrDefault(x => x.Key == exif.Key);
        if (e != null)
        {
            e.IsChecked = false;
            mText.Exifs.Remove(exif);
            StateHasChanged();
        }
    }


    class DefaultExifs
    {
        public bool IsChecked { get; set; }
        public string Key { get; set; }
        public string Value { get; set; }
    }

    List<DefaultExifs> DefaultExifLists;


    protected override void OnInitialized()
    {
        DefaultExifLists = new List<DefaultExifs>();
        foreach (var pair in ExifHelper.DefaultMeta)
        {
            var de = new DefaultExifs
                {
                    IsChecked = false,
                    Key = pair.Key,
                    Value = pair.Value
                };
            if (mText.Exifs != null && mText.Exifs.Any(c => c.Key == pair.Key)) de.IsChecked = true;
            DefaultExifLists.Add(de);
            if (de.IsChecked)
            {
                checkedChips.Add(DefaultExifLists.IndexOf(de));
            }
        }
        if (string.IsNullOrEmpty(mText.BindedContainerId) && ContainerId2Name.Count > 0)
        {
            mText.BindedContainerId = ContainerId2Name.FirstOrDefault().Key;
        }
    }
} 