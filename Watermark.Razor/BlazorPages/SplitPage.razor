@page "/split/{names}"
@using Watermark.Razor.Components.Layout
@using Watermark.Razor.Parts
@using Watermark.Shared.Models
@inject PageStackNavController NavController
@inject IPopupService PopupService
@inject IWMWatermarkHelper helper
@inject IJSRuntime JSRuntime
@inject IClientInstance ClientInstance
@inherits PStackPageBase
@layout MainLayout
<style>
    .m-sortable {
    display: flex;
    }
</style>
<PStackPageBarInit Title="拼图" Dense Flat CenterTitle>
    <ActionContent>
        @if (SrcLoading)
        {
            <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
        }
        else
        {
            <MButton IconName="mdi-content-save" OnClick="OpenSave" />
        }
    </ActionContent>
</PStackPageBarInit>
<div style="padding: 0 24px;text-align:center;display:flex;height:100%;flex-direction:column">
    <MCard Style="padding:16px;background:#E5E5E5;transition: height 0.5s;display:flex;height:calc(100% - 60px)" Flat>
        <MImage Contain Src="@Src" style="width:100%;height:100%;" />
    </MCard>

    @if (!string.IsNullOrEmpty(Src))
    {
        <div style="height: 60px;display:flex;flex-direction:row;justify-content:flex-start;align-items:center;">
            <IconButton Color="primary" IconColor="@($"{(horizon ? "orange" : "")}")" Icon="@ICONS.DragHorizon" Style="width:48px !important;height:48px;" OnClick="ChangeDirection"/>
            <IconButton Icon="@ICONS.Add" Color="primary" Style="height:48px;width:48px !important;" Class="mx-1" OnClick="SelectSourceImageExif" />
            <MSortable Style="height:100%;align-items: center;gap:4px;overflow-x:auto;scrollbar-width:none;"
            Items="@Images"
            ItemKey="@(item => item)"
            GhostClass="accent"
            Animation="200"
            Easing="cubic-bezier(0, 0.55, 0.45, 1)"
            @bind-Order="Order"
            Context="name">
                @if (ImageUrlDic.TryGetValue(name, out string src))
                {
                    <MImage Src="@src" Style="height:48px;width:48px;object-fit:cover;border-radius:4px" />
                }

            </MSortable>
        </div>
    }
</div>


<MBottomSheet @bind-Value="@openSave">
    <MSheet>
        <Watermark.Razor.Components.SavePanel ExportEvent="Export" />
    </MSheet>
</MBottomSheet>


<MudOverlay Visible="@SrcLoading" DarkBackground="true" Absolute="true" ZIndex="99999">
    <MudPaper Width="200px" Height="200px" Elevation="0" Style="justify-content:center;display:flex;align-items:center;text-align:center;">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Style="margin: auto;" />
    </MudPaper>
</MudOverlay>

@code {
    private List<string> _order = new();
    public List<string> Order
    {
        get => _order;
        set
        {
            _order = value;
            RefreshEditImage();
        }
    }

    [Parameter]
    public string names { get; set; }

    public List<string> Images { get; set; }
    string dropzone = "1";
    bool SrcLoading = false;
    bool openSave = false;
    bool horizon = false;
    string Src = "";
    Dictionary<string, string> ImageUrlDic = new();

    private List<string> _dropzoneItems = new();

    protected override async Task OnInitializedAsync()
    {
        ClientInstance.SetColor();
        Images = names.Split(';').ToList();
        Order = names.Split(';').ToList();
        foreach (var img in Images)
        {
            var target = Global.AppPath.ThumbnailFolder + Path.GetFileName(img);
            await Global.WriteThumbnailImageAsync(img, target);
            var b64 = await Global.GetBase64(target);
            var url = await JSRuntime.InvokeAsync<string>("byteToUrl", b64);
            ImageUrlDic[img] = url;
        }
        var bs64 = await helper.SplitImages(Images, horizon, true);
        Src = await JSRuntime.InvokeAsync<string>("byteToUrl", bs64);
    }

    async void SelectSourceImageExif()
    {
        var result = await ClientInstance.PickAsync();

        if (string.IsNullOrEmpty(result)) return;
        try
        {
            var filename = Path.GetFileName(result);
            var target = Global.AppPath.ThumbnailFolder + filename;
            await Global.WriteThumbnailImageAsync(result, target);
            var b64 = await Global.GetBase64(target);
            var url = await JSRuntime.InvokeAsync<string>("byteToUrl", b64);
            ImageUrlDic[result] = url;
            Images.Add(result);
            Order.Add(result);
            await RefreshEditImage();
        }
        catch (Exception ex)
        {
            Common.ShowMsg(PopupService, $"不支持的图片格式：{ex.Message}", AlertTypes.Error);
        }
    }


    public async Task RefreshEditImage()
    {
        try
        {
            SrcLoading = true;
            StateHasChanged();
            var bs64 = await helper.SplitImages(Order, horizon, true);
            Src = await JSRuntime.InvokeAsync<string>("byteToUrl", bs64);
        }
        catch(Exception ex) 
        {
            Common.ShowMsg(PopupService, ex.Message, AlertTypes.Error);
        }
        finally
        {
            SrcLoading = false;
            StateHasChanged();
        }
    }


    async void Export()
    {
        ClientInstance.Haptic();
        SrcLoading = true;
        StateHasChanged();
        var b64 = await helper.SplitImages(Order, horizon, false);
        var fn = Guid.NewGuid().ToString();
        ClientInstance.Save(b64, "DFX_" + fn);
        SrcLoading = false;
        Common.ShowMsg(PopupService, "保存成功。", AlertTypes.Success);
        openSave = false;
        StateHasChanged();
    }

    void OpenSave()
    {
        ClientInstance.Haptic();
        openSave = true;
    }

    async void ChangeDirection() 
    {
        horizon = !horizon; 
        await RefreshEditImage();
    }
}
