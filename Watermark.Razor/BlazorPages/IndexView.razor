@page "/"
@using Components.Layout
@using Watermark.Razor
@using Watermark.Razor.Parts
@using Watermark.Shared.Enums
@using Watermark.Shared.Models
@inject IWMWatermarkHelper helper
@inject APIHelper api
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime
@inject IPopupService PopupService
@inject PageStackNavController NavController
@layout MainLayout
@inject IClientInstance ClientInstance
@inherits PStackPageBase
<style>
    .m-tab:hover {
    background: transparent !important;
    }
</style>
<div style="height:100%;">
    <MTabs SliderColor="primary" @bind-Value="tab" Height="30" ShowArrows="false" Centered>
        @foreach (var e in tab1Head)
        {
            <MTab Value="e">
                @e
            </MTab>
        }
    </MTabs>
    <div style="@($"height: calc(100% - 30px);")">
        <SwiperTabItems Value="tab1Head.IndexOf(tab.ToString())" ValueChanged="@((e) => tab = tab1Head[e])">
            <SwiperTabItem>
                <MudPaper Elevation="0" Style="padding: 8px 18px;height: 100%;overflow: auto;scrollbar-width: none;">
                    <MudGrid Class="pt-2" Justify="Justify.FlexStart">
                        @if (loading_down)
                        {
                            <MudProgressCircular Color="Color.Secondary" Indeterminate="true" Style="margin-left:calc(50% - 20px);margin-top:calc(45vh - 20px)" />
                        }
                        else
                        {
                            @foreach (var t in GlobalCache.DownloadedTemplates.Where(x => x.CanvasType == CanvasType.Normal))
                            {
                                <MudItem xs="6" Style="padding:4px;">
                                    <MudCard style="padding:16px;background:#E5E5E5;height:200px;position:relative;" class="flex-vertical-center" Elevation="0">
                                        @if (Versions.TryGetValue(t.WMCanvas.ID, out int v) && v > t.WMCanvas.Version)
                                        {
                                            <MudChip Size="Size.Small" Color="Color.Error" Style="position:absolute;top:10px;right:10px" OnClick="()=>DownloadTemplate(t.WMCanvas.ID)">有更新</MudChip>
                                        }
                                        <MudImage Style="height:100%;width:100%;" Src="@t.Src" ObjectFit="ObjectFit.Contain" @onclick="()=>OpenFocus('d',t, true)" />
                                    </MudCard>
                                </MudItem>
                            }
                            <MudItem xs="12" Style="padding:4px;">
                                <MudText Typo="Typo.h5"><b>拼图</b></MudText>
                            </MudItem>
                            <MudItem xs="6" Style="padding:4px;">
                                <MCard Style="padding:16px;background:#E5E5E5;height:200px;display:flex;align-items:center;justify-content:center" Flat OnClick="OpenSplit">
                                    <Split/>
                                </MCard>
                            </MudItem>
                            @foreach (var t in GlobalCache.DownloadedTemplates.Where(x => x.CanvasType == CanvasType.Split))
                            {
                                <MudItem xs="6" Style="padding:4px;">
                                    <MudCard style="padding:16px;background:#E5E5E5;height:200px;position:relative;" class="flex-vertical-center" Elevation="0">
                                        @if (Versions.TryGetValue(t.WMCanvas.ID, out int v) && v > t.WMCanvas.Version)
                                        {
                                            <MudChip Size="Size.Small" Color="Color.Error" Style="position:absolute;top:10px;right:10px" OnClick="()=>DownloadTemplate(t.WMCanvas.ID)">有更新</MudChip>
                                        }
                                        <MudImage Style="height:100%;width:100%;" Src="@t.Src" ObjectFit="ObjectFit.Contain" @onclick="()=>OpenFocus('d',t, true)" />
                                    </MudCard>
                                </MudItem>
                            }
                        }
                    </MudGrid>
                </MudPaper>
            </SwiperTabItem>
            <SwiperTabItem>
                <MudPaper Elevation="0" Style="padding: 8px 18px;height: 100%;overflow: auto;scrollbar-width: none;">
                    <MudGrid Class="pt-2" Justify="Justify.FlexStart">
                        @foreach (var t in GlobalCache.ILikeTemplates)
                        {
                            <MudItem xs="6" Style="padding:4px;">
                                <MudCard style="padding:16px;background:#E5E5E5;height:200px" class="flex-vertical-center" Elevation="0">
                                    @if (!string.IsNullOrEmpty(t.Src))
                                    {
                                        <MudImage Style="height:100%;width:100%;" Src="@t.Src" ObjectFit="ObjectFit.Contain" @onclick="()=>OpenFocus('r',t, true)" />
                                    }
                                </MudCard>
                            </MudItem>
                        }
                    </MudGrid>
                </MudPaper>
            </SwiperTabItem>
        </SwiperTabItems>
    </div>

    <MDialog @bind-Value="parameter.FocusImageShow" ContentClass="pa-2" ContentStyle="display:flex;align-items:center;background:#EAEAEA;outline:0px">
        <TemplateLargeView DownloadEvent="DownloadTemplate"
        downloadedTemplates="GlobalCache.DownloadedTemplates"
        FocusImage="parameter.FocusImage"
        FocusImageId="@parameter.FocusImageId"
        FocusImageSrc="@parameter.FocusImageSrc"
        FocusImageType="parameter.FocusImageType"
        GeneratePhotoEvent="GeneratePhoto"
        ILikeTemplates="parameter.ILikeTemplates"
        OpenCameraEvent="OpenCamera"
        subscribed="subscribed"
        ZipedTemplates="ZipedTemplates"
        CloseEvent="Close" />
    </MDialog>

    <MOverlay Value="loading.Show">
        <MProgressCircular indeterminate
        Size="64"></MProgressCircular>
    </MOverlay>
    <MOverlay Value="@failedBox.faildShow" DarkBackground="true" Absolute="true" ZIndex="99999">
        <MudPaper Elevation="0" Class="pa-2" Width="80vw" Style="margin:0 10vw;">
            <MudStack Style="text-align:center;">
                <MudText Typo="Typo.subtitle1" Color="Color.Default"> 失败提示</MudText>
            </MudStack>
            <br />
            <MudText Typo="Typo.subtitle2" Color="Color.Secondary">
                @failedBox.failedMessage
            </MudText>
            <br />

            <MudText Typo="Typo.subtitle2" Color="Color.Default">
                <strong>如何获取硬币</strong>
            </MudText>
            <MudText Typo="Typo.subtitle2" Color="Color.Default">
                上传模板，用户下载<br />
                开通会员
            </MudText>
            <MudButton Color="Color.Default" Variant="Variant.Filled" DisableElevation FullWidth OnClick="()=>failedBox.faildShow = false" Size="Size.Small" Class="mt-2">确定</MudButton>
        </MudPaper>
    </MOverlay>
</div>

@code {

    bool loading_down = true;
    StringNumber tab = "我的下载";
    List<string> tab1Head = ["我的下载", "我的收藏"];
    Dictionary<string, int> Versions = [];
    WMZipedTemplate FocusImage;
    char FocusImageType = ' ';
    List<Tuple<string, List<WMZipedTemplate>>> subscribed = new();
    List<WMZipedTemplate> ZipedTemplates = new();
    WMainLoading loading = new();
    WMTemplateList CurrentImage;
    List<WMTemplateList> Images = new();
    string FocusImageId = "";
    string FocusImageSrc = "";
    ViewParameter parameter = new();
    FailedBox failedBox = new();

    protected override void OnPageActivated(object state)
    {
        base.OnPageActivated(state);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await GlobalConfig.InitConfig();
            if(GlobalConfig.AGREE_PRIVATE) 
            {
                Global.PrimaryKey = ClientInstance.Key();
            }
            await Global.Login();
            if(!Path.Exists(Global.AppPath.TemplatesFolder)) 
            {
                await api.Download("B735DFC73A0B4080B11BBCFD3AE833D6", "");
            }
            await LoadTemplates();
            await LoadCollectTemplate();
            await InitVersion(GlobalCache.DownloadedTemplates.Select(x => x.WMCanvas.ID).ToList());
            navigationManager.LocationChanged += (e, q) =>
            {
                parameter.FocusImageShow = false;
                StateHasChanged();
            };
            Global.Callback = new Action(async () => await InvokeAsync(StateHasChanged));
            var _ = api.PageVisitRecord(ProgramPage.MyTemplate, DeviceType.Andorid);
            var __ = api.DownloadLogoes();
        }
        catch (Exception ex)
        {
            Common.ShowMsg(PopupService, ex.Message, AlertTypes.Error);
        }
        finally
        {
            loading_down = false;
            StateHasChanged();
        }
    }


    async Task LoadTemplates()
    {
        if (!Directory.Exists(Global.AppPath.TemplatesFolder))
        {
            Directory.CreateDirectory(Global.AppPath.TemplatesFolder);
        }

        try
        {
            GlobalCache.DownloadedTemplates = [];
            var basePath = Global.AppPath.TemplatesFolder;
            var folder = new DirectoryInfo(basePath);
            foreach (var tFolder in folder.GetDirectories())
            {
                WMZipedTemplate dirct = new();
                dirct.WatermarkId = tFolder.Name;
                var configPath = basePath + dirct.WatermarkId + System.IO.Path.DirectorySeparatorChar + "config.json";
                if (System.IO.File.Exists(configPath))
                {
                    dirct.WMCanvas = Global.ReadConfigFromPath(configPath);
                    dirct.WMCanvas.Exif[dirct.WMCanvas.ID] = ExifHelper.DefaultMeta;
                    dirct.CanvasType = dirct.WMCanvas.CanvasType;
                    GlobalCache.DownloadedTemplates.Add(dirct);
                }
            }
            foreach (var tp in GlobalCache.DownloadedTemplates)
            {
                await Global.InitFonts([tp.WMCanvas]);
                var b64 = await helper.GenerationAsync(tp.WMCanvas, null, true, false);
                tp.Src = await Global.Byte2Url(JSRuntime, b64);
            }
            ClientInstance.Haptic();
        }
        catch (Exception ex)
        {
            Common.ShowMsg(PopupService, ex.Message, AlertTypes.Error);
        }
        finally
        {
            loading_down = false;
            StateHasChanged();
        }
    }

    async Task LoadCollectTemplate()
    {
        var api = new APIHelper();
        var getILike = await api.GetILike(Global.CurrentUser?.ID ?? "");
        if (getILike != null && getILike.success && getILike.data != null)
        {
            GlobalCache.ILikeTemplates = getILike.data;
            GlobalCache.ILikeTemplates.ForEach(x => x.Src = Global.GetSrc(x.WatermarkId));
        }

    }

    async Task InitVersion(List<string> ids)
    {
        var version = await api.GetVersions(ids);
        if (version.success && version.data != null)
        {
            foreach (var e in version.data)
            {
                Versions[e.Key] = e.Value;
            }
        }
    }

    async Task<WMZipedTemplate> LoadSingleTemplates(string watermarkId)
    {
        var api = new APIHelper();
        if (!Directory.Exists(Global.AppPath.TemplatesFolder))
        {
            Directory.CreateDirectory(Global.AppPath.TemplatesFolder);
        }

        try
        {
            WMZipedTemplate dirct = new();
            dirct.WatermarkId = watermarkId;
            var configPath = Global.AppPath.TemplatesFolder + watermarkId + System.IO.Path.DirectorySeparatorChar + "config.json";
            if (!System.IO.File.Exists(configPath)) return dirct;
            var canvas = await Task.Run(() =>
            {
                return Global.ReadConfigFromPath(configPath);
            });
            dirct.WMCanvas = canvas;
            dirct.WMCanvas.Exif[canvas.ID] = ExifHelper.DefaultMeta;
            dirct.CanvasType = dirct.WMCanvas.CanvasType;
            await Global.InitFonts([canvas]);
            var b64 = await helper.GenerationAsync(canvas, null, true, false);
            dirct.Src = await Global.Byte2Url(JSRuntime, b64);
            return dirct;
        }
        catch (Exception ex)
        {
            Common.ShowMsg(PopupService, ex.Message, AlertTypes.Error);
            return new WMZipedTemplate();
        }
    }

    async Task DownloadTemplate(string watermarkId)
    {
        await ClientInstance.DownloadTemplate(
            watermarkId
            , parameter
            , PopupService
            , ZipedTemplates
            , helper
            , JSRuntime
            , Versions
            , NavController
            , failedBox);
    }

    void OpenFocus(char t, WMZipedTemplate zip, bool b)
    {
        ClientInstance.Haptic();
        parameter = new ViewParameter();
        parameter.FocusImage = zip;
        parameter.FocusImageType = t;
        parameter.FocusImageId = zip.WatermarkId;
        parameter.FocusImageSrc = zip.Src;
        parameter.FocusImageShow = b;
        StateHasChanged();
    }

    async Task GeneratePhoto(WMZipedTemplate template)
    {
        try
        {
            ClientInstance.Haptic();
            parameter.FocusImageShow = false;
            var result = await ClientInstance.PickMultipleAsync();
            if (result is null || result.Count() == 0) return;

            if (!Directory.Exists(Global.AppPath.ThumbnailFolder))
            {
                Directory.CreateDirectory(Global.AppPath.ThumbnailFolder);
            }

            if (template.CanvasType == CanvasType.Normal)
            {
                Global.VipFuncPermission(() => result.Count() > 3, "超过3张图片");
            }

            List<string> fileNames = [];
            foreach (var f in result)
            {
                fileNames.Add(Uri.EscapeDataString(f));
            }
            NavController.Push($"/preview/{string.Join(";", fileNames.ToArray())}/{template.WatermarkId}");
        }
        catch (Exception ex)
        {
            Common.ShowMsg(PopupService, ex.Message, AlertTypes.Error);
        }
    }

    async void OpenCamera(WMZipedTemplate template)
    {
        ClientInstance.Haptic();
        var result = await ClientInstance.PickAsync();

        if (result is null) return;
        parameter.FocusImageShow = false;
        if (template.CanvasType == CanvasType.Normal)
        {
            loading.Message = "正在生成图片...";
            loading.Show = true;
            StateHasChanged();
            Images = new List<WMTemplateList>();
            if (!Directory.Exists(Global.AppPath.ThumbnailFolder))
            {
                Directory.CreateDirectory(Global.AppPath.ThumbnailFolder);
            }
            var fullpath = result;
            var img = new WMTemplateList();
            var cvs = Global.ReadConfig(Global.CanvasSerialize(template.WMCanvas));
            cvs.Path = fullpath;
            img.Canvas = cvs;
            cvs.Exif[cvs.ID] = await ExifHelper.ReadImageAsync(fullpath);
            img.ID = cvs.ID;
            img.Path = fullpath;
            Global.CheckImageExtension(fullpath);
            var thumbnail = Global.AppPath.ThumbnailFolder + Path.GetFileName(fullpath);
            await Global.WriteThumbnailImageAsync(fullpath, thumbnail);
            Images.Add(img);

            CurrentImage = Images.First();
            var b64 = await helper.GenerationAsync(CurrentImage.Canvas, null, true, false);
            CurrentImage.Src = await Global.Byte2Url(JSRuntime, b64);
            loading.Show = false;
            //openDrawer = true;
            StateHasChanged();
        }
        else
        {
            loading.Message = "正在生成图片...";
            loading.Show = true;
            StateHasChanged();
            var cvs = Global.ReadConfig(Global.CanvasSerialize(template.WMCanvas));
            foreach (var container in cvs.Children)
            {
                if (!container.ContainerProperties.FixImage)
                {
                    container.Path = result;
                    cvs.Exif[container.ID] = ExifHelper.ReadImage(container.Path);
                }
            }

            CurrentImage = new();
            CurrentImage.Canvas = cvs;
            CurrentImage.ID = CurrentImage.Canvas.ID;
            var b64 = await helper.GenerationAsync(cvs, null, true, false);
            CurrentImage.Src = await Global.Byte2Url(JSRuntime, b64);
            Images = [CurrentImage];
            loading.Show = false;
            //openDrawer = true;
            StateHasChanged();
        }

    }

    async Task Close()
    {
        parameter.FocusImageShow = false;
        await InvokeAsync(StateHasChanged);
    }

    async void OpenSplit()
    {
        try
        {
            ClientInstance.Haptic();
            var result = await ClientInstance.PickMultipleAsync();
            if (result is null || result.Count() <= 1) return;

            if (!Directory.Exists(Global.AppPath.ThumbnailFolder))
            {
                Directory.CreateDirectory(Global.AppPath.ThumbnailFolder);
            }

            List<string> fileNames = [];
            foreach (var f in result)
            {
                fileNames.Add(Uri.EscapeDataString(f));
            }
            NavController.Push($"/split/{string.Join(";", fileNames.ToArray())}");
        }
        catch (Exception ex)
        {
            Common.ShowMsg(PopupService, ex.Message, AlertTypes.Error);
        }
    }
}