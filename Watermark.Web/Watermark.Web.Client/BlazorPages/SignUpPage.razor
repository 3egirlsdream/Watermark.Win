@page "/"
@using Watermark.Win.Models
@using static Watermark.Win.Models.APIHelper

<style>
    .mud-grid-spacing-xs-3 {
        width: 100%;
        margin: 0px;
    }
</style>

<MudThemeProvider />
<MudGrid>
    <MudItem xs="6">
        <MudPaper Elevation="25" Height="100%" Width="100%" Class="ma-2 pa-1">
            <MudChart ChartType="ChartType.Line" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="100%" />
        </MudPaper>
    </MudItem>
    <MudItem xs="6">
        <MudPaper Elevation="25" Height="100%" Width="100%" Class="ma-2 pa-1">
            <MudChart ChartType="ChartType.StackedBar" ChartSeries="@Series2" XAxisLabels="@XAxisLabels2" Width="100%" Height="100%" ChartOptions="@Options"></MudChart>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    public ChartOptions Options = new ChartOptions() { YAxisTicks = 200, MaxNumYAxisTicks=100 };

    public List<ChartSeries> Series = [];
    public string[] XAxisLabels = [];

    public string[] XAxisLabels2 = [];
    public List<ChartSeries> Series2 = [];

    protected override async Task OnInitializedAsync()
    {
        var api = new APIHelper();
        var result = await api.GetUserSignUpInfo();
        if (result.success)
        {
            var infoMs = result.data;
            var r = infoMs.GroupBy(x => x.Date.Month).Select(x => new
            {
                x.Key,
                MonthDetail = x.ToList()
            }).ToList();
            Series = new List<ChartSeries>();
            foreach(var e in r.OrderBy(x=>x.Key))
            {
                var cs = new ChartSeries()
                    {
                        Name = e.Key + "月",
                        Data = e.MonthDetail.OrderBy(x=>x.Date.Day).Select(x => x.Count * 1.0).ToArray()
                    };
                Series.Add(cs);
            }

            var t = new List<string>();
            for (int i = 1; i <= 31; i++)
                t.Add(i + "");
            XAxisLabels = t.ToArray();

        }

        var result2 = await api.GetVisit();
        if(result2.success)
        {
            XAxisLabels2 = result2.data.Select(x => (string)x.Date.ToString("MM-dd")).ToArray();
            Dictionary<string, List<double>> vs = new();
            foreach (var item in result2.data)
            {
                foreach (var p in item.Platform)
                {
                    foreach (var d in p.Page)
                    {
                        var name = (string)(p.Device + "-" + d.Name);
                        var val = (double)d.Count;
                        if (!vs.TryGetValue((string)name, out List<double> vvs)) vs[(string)name] = new List<double>();
                        vs[name].Add(val);
                    }
                }
            }

            foreach(var v in vs)
            {
                var cs = new ChartSeries()
                    {
                        Name = v.Key,
                        Data = v.Value.ToArray()
                    };
                    Series2.Add(cs);
            }
        }
    }
}
