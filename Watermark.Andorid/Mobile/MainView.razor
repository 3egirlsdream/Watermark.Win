@page "/"
@using System.IO
@using Watermark.Andorid.BlazorPages
@using Watermark.Andorid.Models
@using Watermark.Shared.Enums
@using Watermark.Win.Models
@using Watermark.Shared.Models
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime

<style>
	.panel-class {
		height: calc(100% - 50px);
	}

	.mud-tab-class
	::-webkit-scrollbar {
		width: 0px;
		display: none;
	}


	.mud-tab-class {
		-ms-overflow-style: none; /* IE and Edge */
		scrollbar-width: none; /* Firefox */
		padding: 0px 16px;
		height: 100%;
		overflow-y: auto;
		overflow-x: hidden;
	}

	.water-tab {
		height: 48px;
		position: absolute;
		bottom: 0;
		width: 100%;
	}

	.water-tab-text {
		width: 33.3%;
		height: 48px;
		float: left;
		display: flex;
		align-items: center;
		justify-content: center;
	}

	.water-tab-item {
		height: calc(100% - 44px);
		clear: both;
	}

	.mud-tab-class .mud-list-item-clickable:focus:not(.mud-selected-item) {
		transform: scale(1.2);
	}

	.mud-tab-class .mud-list-item-clickable {
		transition: transform 0.3s ease;
	}


	.dfm-card-name {
		text-overflow: ellipsis;
		white-space: nowrap;
		overflow-x: hidden
	}

	.dfm-card-user-name {
		position: relative;
		display: flex;
		align-items: center;
		text-overflow: ellipsis;
		white-space: nowrap;
		overflow-x: hidden
	}

	.dfm-card-footer {
		position: relative;
		height: 30px;
		display: flex;
		align-items: center;
	}

	.flex-vertical-center {
		display: flex;
		align-items: center;
	}
</style>

<MudThemeProvider IsDarkMode="@Global.DARK_MODE" />
<MudDialogProvider />
<MudSnackbarProvider />
<div Style="height:100vh;width:100%;">
	<div style="@($"height:40px;position:fixed;width:100%;top:0;left:0;z-index:999;display:{(activeTab == 3 ? "":"none")}")">
		<MudToolBar Style="height:40px;padding-left:2px;box-shadow: 0 2px 12px 0 rgb(0 0 0 / 10%);">
			<MudText Typo="Typo.subtitle1" Style="margin-left:16px;">
				你好，
				@if (Global.CurrentUser != null && !string.IsNullOrEmpty(Global.CurrentUser.DISPLAY_NAME))
				{
					<span>@Global.CurrentUser.DISPLAY_NAME</span>
				}
				else
				{
					<span>游客</span>
				}
			</MudText>
			<MudStack Row Style="position:absolute;right:15px;">
				<MudIcon Icon="@(ShowUserInfo ? Icons.Material.Filled.Clear : @Icons.Material.Filled.AddCircleOutline)" Style="margin-right: 0px;" @onclick="()=> ShowUserInfo = !ShowUserInfo" />
			</MudStack>


			<MudPopover Style="width:200px;padding: 0 !important;" OverflowBehavior="OverflowBehavior.FlipNever" Open="@ShowUserInfo" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" Class="pa-4" Elevation="25">
				<MudList Clickable="true" Dense="true">
					<MudListItem Icon="@Icons.Material.Filled.ImageAspectRatio">
						拼图
					</MudListItem>
					<MudListItem Icon="@Icons.Material.Filled.DesignServices">
						设计模板
					</MudListItem>
				</MudList>
			</MudPopover>
		</MudToolBar>
	</div>
	<div Style="height:100%;width:100vw;display: flex;" @onclick="()=> ShowUserInfo = false">

		<div style="height: 100%; padding: 0px; width:100%">
			<MudPaper class="water-tab" Elevation="0">
				<div class="water-tab-text" @onclick="()=> activeTab = 1">
					<MudText Typo="Typo.button" style="display: flex;align-items: center;" Color="(activeTab == 1 ? Color.Primary: Color.Default)">
						<MudIcon Icon="@(activeTab == 1 ? Icons.Material.Filled.BrightnessAuto :  Icons.Material.Outlined.BrightnessAuto)" Color="(activeTab == 1 ? Color.Primary: Color.Default)" />  &nbsp;<b>我的模板</b>
					</MudText>
				</div>
				<div class="water-tab-text" @onclick="ToSecondPanel">
					<MudText Typo="Typo.button" style="display: flex;align-items: center;" Color="(activeTab == 2 ? Color.Primary: Color.Default)">
						<MudIcon Icon="@(activeTab == 2 ? Icons.Material.Filled.DashboardCustomize :  Icons.Material.Outlined.DashboardCustomize)" Color="(activeTab == 2 ? Color.Primary: Color.Default)" />   &nbsp;<b>模板市场</b>
					</MudText>
				</div>
				<div class="water-tab-text" @onclick="()=> activeTab = 3">
					<MudText Typo="Typo.button" style="display: flex;align-items: center;" Color="(activeTab == 3 ? Color.Primary: Color.Default)">
						<MudIcon Icon="@(activeTab == 3 ? Icons.Material.Filled.Brightness5 :  Icons.Material.Outlined.Brightness5)" Color="(activeTab == 3 ? Color.Primary: Color.Default)" />   &nbsp;<b>关于</b>
					</MudText>
				</div>
			</MudPaper>

			<div class="water-tab-item" style="@(activeTab == 1 ? "":"display:none")">
				<MudStack Row="true" Justify="Justify.Center" class="water-tab" Style="top:0" Elevation="0">
					<div style="@($"{( tb1_t1 == 1 ? "border-bottom:5px solid #676767;font-weight:700;" : "")}height:40px;display:flex;align-items:center;margin-right:20px")" @onclick="()=> tb1_t1 = 1">
						<MudText Typo="Typo.subtitle1" style="display: flex;align-items: center;" Color="(tb1_t1 == 1 ? Color.Primary: Color.Default)">
							我的下载
						</MudText>
					</div>
					<div Style="@($"{( tb1_t1 == 2 ? "border-bottom:5px solid #676767;font-weight:700;" : "")}height:40px;display:flex;align-items:center;margin-left:20px")" @onclick="()=> tb1_t1 = 2">
						<MudText Typo="Typo.subtitle1" style="display: flex;align-items: center;" Color="(tb1_t1 == 2 ? Color.Primary: Color.Default)">
							我的收藏
						</MudText>
					</div>
				</MudStack>
				<MudPaper Elevation="0" Class="mud-tab-class" Style="@($"background:{Colors.Grey.Lighten5};margin-top:40px;height: calc(100% - 44px); padding-top:10px")">
					<MudGrid Class="pt-2" Justify="Justify.FlexStart" Style="@(tb1_t1 == 1 ? "" : "display:none")">
						@foreach (var t in downloadedTemplates)
						{
							<MudItem xs="6" Style="padding:4px;">
								<MudCard style="padding:16px;background:#E5E5E5;height:220px" class="flex-vertical-center" Elevation="0">
									@if (!string.IsNullOrEmpty(t.Src))
									{
										<MudImage Style="height:100%;width:100%;" Src="@t.Src" ObjectFit="ObjectFit.Contain" @onclick="()=>OpenFocus('d',t, true)" />
									}
								</MudCard>
							</MudItem>
						}
					</MudGrid>
					<MudGrid Class="pt-2" Justify="Justify.FlexStart" Style="@(tb1_t1 == 2 ? "" : "display:none")">
						@foreach (var t in ILikeTemplates)
						{
							<MudItem xs="6" Style="padding:4px;">
								<MudCard style="padding:16px;background:#E5E5E5;height:220px" class="flex-vertical-center" Elevation="0">
									@if (!string.IsNullOrEmpty(t.Src))
									{
										<MudImage Style="height:100%;width:100%;" Src="@t.Src" ObjectFit="ObjectFit.Contain" @onclick="()=>OpenFocus('r',t, true)" />
									}
								</MudCard>
							</MudItem>
						}
					</MudGrid>

				</MudPaper>
			</div>


			<div class="water-tab-item" style="@(activeTab == 2 ? "":"display:none")">
				<MudStack Row="true" Justify="Justify.Center" class="water-tab" Style="top:0" Elevation="0">
					<div style="@($"{( tb2_t2 == 1 ? "border-bottom:5px solid #676767;" : "")}height:40px;display:flex;align-items:center;margin:0 10px ")" @onclick="()=> tb2_t2 = 1">
						<MudText Typo="Typo.subtitle1" style="@($"{(tb2_t2 == 1 ? "font-weight: 700;" : "")}margin: auto;")" Color="(tb2_t2 == 1 ? Color.Primary: Color.Default)">
							推荐
						</MudText>
					</div>

					@foreach (var sub in subscribed)
					{
						<div Style="@($"{( tb2_t2 == subscribed.IndexOf(sub) + 2 ? "border-bottom:5px solid #676767;" : "")}height:40px;display:flex;align-items:center;margin:0 10px ")" @onclick="()=> tb2_t2 = subscribed.IndexOf(sub) + 2">
							<MudText Typo="Typo.subtitle1" style="@($"{(tb2_t2 == subscribed.IndexOf(sub) + 2 ? "font-weight: 700;" : "")}margin: auto;")" Color="(tb2_t2 == subscribed.IndexOf(sub) + 2 ? Color.Primary: Color.Default)">
								@sub.Item1
							</MudText>
						</div>
					}
				</MudStack>
				<MudPaper Elevation="0" Class="mud-tab-class" Style="@($"background:{Colors.Grey.Lighten5};margin-top:40px;height: calc(100% - 44px); padding-top:10px")">
					<MudGrid Class="pt-2" Justify="Justify.FlexStart" Style="@(tb2_t2 == 1 ? "" : "display:none")">
						@foreach (var t in ZipedTemplates.Where(x => x.Recommend))
						{
							<MudItem xs="6" Style="padding:4px;">
								<MudCard style="padding:16px;background:#E5E5E5;height:220px" class="flex-vertical-center" Elevation="0">
									@if (!string.IsNullOrEmpty(t.Src))
									{
										<MudImage Style="height:100%;width:100%;" Src="@t.Src" ObjectFit="ObjectFit.Contain" @onclick="()=>OpenFocus('a', t, true)" />
									}
									else
									{
										<MudProgressCircular Color="Color.Secondary" Indeterminate="true" Style="margin-left:calc(50% - 20px)" />
									}
								</MudCard>
								<div style="display: flex; align-items: center; justify-content: space-between; margin-top:4px;">
									<MudText Class="dfm-card-name" Typo="Typo.subtitle1">
										@t.WMCanvas?.Name
									</MudText>
									<div style="display: flex; align-items: center;">
										<MudIcon Icon="@Icons.Material.Filled.Download" Color="Color.Default" Style="cursor:pointer;height:14px;width:14px;" Size="Size.Small" />
										<span style="font-size: 12px;line-height: 12px;">@t.DownloadTimes</span>
									</div>
								</div>
								<div class="dfm-card-user-name">
									<MudIcon Icon="@Icons.Material.Filled.Recommend" Color="Color.Warning" Size="Size.Small" />
									<MudText Typo="Typo.overline" Style="@($"color:{Colors.Grey.Default};padding-top: 2px;margin-left:2px;")">
										@t.UserDisplayName
									</MudText>
								</div>
							</MudItem>
						}
					</MudGrid>
					@if (subscribed != null)
					{
						@foreach (var sub in subscribed)
						{
							<MudGrid Class="pt-2" Justify="Justify.FlexStart" Style="@($"{(tb2_t2 == subscribed.IndexOf(sub) + 2 ? "" : "display:none;")}")">
								@foreach (var t in sub.Item2)
								{
									<MudItem xs="6" Style="padding:4px;">
										<MudCard style="padding:16px;background:#E5E5E5;height:220px" class="flex-vertical-center" Elevation="0">
											@if (!string.IsNullOrEmpty(t.Src))
											{
												<MudImage Style="height:100%;width:100%;" Src="@t.Src" ObjectFit="ObjectFit.Contain" @onclick="()=>OpenFocus('a', t, true)" />
											}
											else
											{
												<MudProgressCircular Color="Color.Secondary" Indeterminate="true" Style="margin-left:calc(50% - 20px)" />
											}
										</MudCard>
										<div style="display: flex; align-items: center; justify-content: space-between; margin-top:4px;">
											<MudText Class="dfm-card-name" Typo="Typo.subtitle1">
												@t.WMCanvas?.Name
											</MudText>
											<div style="display: flex; align-items: center;">
												<MudIcon Icon="@Icons.Material.Filled.Download" Color="Color.Default" Style="cursor:pointer;height:14px;width:14px;" Size="Size.Small" />
												<span style="font-size: 12px;line-height: 12px;">@t.DownloadTimes</span>
											</div>
										</div>
										<div class="dfm-card-user-name">
											@if (t.UserId == "0BECCA9A-6F10-4A88-8753-921195D08853" || t.UserId == "9DEBF7DC-F58C-4667-BACF-A6BFD18352EB")
											{
												<MudIcon Icon="@Icons.Material.Filled.Verified" Color="Color.Warning" Size="Size.Small" />
											}
											else
											{
												<MudIcon Icon="@Icons.Material.Filled.AccountCircle" Color="Color.Default" Size="Size.Small" />
											}
											<MudText Typo="Typo.overline" Style="@($"color:{Colors.Grey.Default};padding-top: 2px;margin-left:2px;")">
												@t.UserDisplayName
											</MudText>
										</div>
									</MudItem>
								}
							</MudGrid>

						}

					}


				</MudPaper>
			</div>

			<div class="water-tab-item" style="@(activeTab == 3 ? "overflow-y:auto;height:calc(100% - 48px);margin-top: 40px":"display:none")">
				@if (IsLoginIn && Global.CurrentUser != null)
				{
					<MudPaper Style="@($"padding:10px;{@cardStyle}")" Elevation="0">
						@if (!string.IsNullOrEmpty(Global.CurrentUser.IMG))
						{
							<MudImage Width="50" Height="50" Src="@Global.CurrentUser.IMG" ObjectFit="ObjectFit.Contain" Style="float:left;" />
						}
						else
						{
							<MudIcon Icon="@Icons.Material.Filled.AccountCircle" Color="Color.Primary" Size="Size.Large" Style="float:left;" />
						}
						<MudStack Row Style="align-items: center;">
							<MudText Typo="Typo.body1" Class="px-4" Color="Color.Secondary">@Global.CurrentUser.DISPLAY_NAME</MudText>
							@if (!Global.CurrentUser.IsVIP)
							{
								<MudButton Variant="Variant.Outlined" Class="ml-5" OnClick="()=> openVip = true">开通VIP</MudButton>
							}
							else
							{
								<MudButton Variant="Variant.Outlined" Class="ml-5" Color="Color.Warning">VIP</MudButton>
							}
						</MudStack>
						<MudText Typo="Typo.overline" Class="px-4" Color="Color.Inherit" Style="margin-left: 0px;">@Global.CurrentUser.USER_NAME</MudText>
					</MudPaper>
				}
				else
				{
					<MudPaper Style="@($"padding:10px;{@cardStyle}")" Elevation="0">
						<MudSkeleton />
						<MudSkeleton SkeletonType="SkeletonType.Circle" Width="50px" Height="50px" />
						<MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="200px" Height="110px" />
						<MudStack Row Class="mt-5">
							<MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="OpenLoginDialog">登录</MudButton>
							<MudButton Variant="Variant.Text" OnClick="OpenSignUpDialog">注册</MudButton>
						</MudStack>
					</MudPaper>
				}

				@* 活动面板 *@
				<MudPaper Style="@cardStyle" Elevation="0" class="pa-3">
					<MudCarousel Class="mud-width-full" Style="height:100px;" ShowArrows="false" ShowBullets="false" EnableSwipeGesture="true" AutoCycle="true" TData="object">
						<MudCarouselItem Transition="@Transition.Fade">
							<div class="d-flex" style="height:100%">
								<MudImage Src="https://cdn.thankful.top/yaofan.jpg" ObjectFit="ObjectFit.Contain" Class="mx-auto" />
							</div>
						</MudCarouselItem>
						<MudCarouselItem Transition="@Transition.Fade">
							<div class="d-flex" style="height:100%">
								<MudImage Src="https://cdn.thankful.top/yaofan.jpg" ObjectFit="ObjectFit.Contain" Class="mx-auto" />
							</div>
						</MudCarouselItem>
					</MudCarousel>
				</MudPaper>


				<MudPaper Style="@cardStyle" Elevation="0" class="pa-3">
					<MudStack Row style="position:relative;align-items: center">
						<MudText Typo="Typo.button"> 版本更新 @($" {ClientInstance.GetVersion().ToString()}")</MudText>
						@if (checkUpdate)
						{
							<MudChip Size="Size.Small" Color="Color.Error">new</MudChip>
						}
						<MudIconButton Icon="@Icons.Material.Filled.ArrowRight" style="position:absolute;right:10px" Size="Size.Small" OnClick="Update" />
					</MudStack>
					@if (DownLoadProgress > 0)
					{
						<MudProgressLinear Color="Color.Primary" Value="@DownLoadProgress" Class="mr-5" style="width:auto" />
					}
				</MudPaper>

				<MudPaper Elevation="0" Style="@cardStyle" class="pa-3">
					<MudStack Row style="position:relative;align-items: center">
						<MudText Typo="Typo.button"> 导入图标 </MudText>
						<MudIconButton Icon="@Icons.Material.Filled.ArrowRight" style="position:absolute;right:10px" Size="Size.Small" OnClick="() => openLogoDialog = true" />
					</MudStack>
				</MudPaper>

				<MudPaper Style="@cardStyle" Elevation="0" class="pa-3">
					<MudStack Row style="position:relative;align-items: center">
						<MudText Typo="Typo.button"> 夜间模式 </MudText>
						<MudSwitch @bind-Value="@Global.DARK_MODE" Color="Color.Primary" style="position:absolute;right:0px;height:38px;" />
					</MudStack>
				</MudPaper>

				<MudPaper Style="@cardStyle" Elevation="0" class="pa-3">
					<MudStack Row style="position:relative;align-items: center">
						<MudText Typo="Typo.button"> PC客户端 </MudText>
						<MudIconButton Icon="@Icons.Material.Filled.ContentCopy" style="position:absolute;right:10px" Size="Size.Small" OnClick="@(()=>CopyClipboard("http://thankful.top:2038/api/public/dl/EMRyVNXX"))" />
					</MudStack>
				</MudPaper>
				<MudPaper Style="@cardStyle" Elevation="0" class="pa-3">
					<MudStack Row style="position:relative;align-items: center">
						<MudText Typo="Typo.button"><a href="http://thankful.top/"> Web网页版</a></MudText>
						<MudIconButton Icon="@Icons.Material.Filled.ArrowRight" style="position:absolute;right:10px" Size="Size.Small" />
					</MudStack>
				</MudPaper>
				<MudPaper Style="@cardStyle" Elevation="0" class="pa-3">
					<MudStack Row style="position:relative;align-items: center">
						<MudText Typo="Typo.button"> 交流群：836325187</MudText>
						<MudIconButton Icon="@Icons.Material.Filled.ContentCopy" style="position:absolute;right:10px" Size="Size.Small" OnClick="@(()=>CopyClipboard("836325187"))" />
					</MudStack>
				</MudPaper>
				<MudPaper Style="@cardStyle" Elevation="0" class="pa-3">
					<MudStack Row style="position:relative;align-items: center">
						<MudText Typo="Typo.button"> 切换账号</MudText>
						<MudIconButton Icon="@Icons.Material.Filled.ExitToApp" style="position:absolute;right:10px" Size="Size.Small" OnClick="()=> { Global.CurrentUser = new WMLoginChildModel(); IsLoginIn = false; }" />
					</MudStack>
				</MudPaper>
				<MudPaper Style="@cardStyle" Elevation="0" class="pa-3">
					<MudStack Row style="position:relative;align-items: center">
						<MudText Typo="Typo.button">下载缓存</MudText>
						<MudIconButton Icon="@Icons.Material.Filled.Delete" style="position:absolute;right:10px" Size="Size.Small" OnClick="()=> DeleteCache(Global.AppPath.TemplatesFolder)" />
					</MudStack>
				</MudPaper>
				<MudPaper Style="@cardStyle" Elevation="0" class="pa-3">
					<MudStack Row style="position:relative;align-items: center">
						<MudText Typo="Typo.button">模板市场缓存</MudText>
						<MudIconButton Icon="@Icons.Material.Filled.Delete" style="position:absolute;right:10px" Size="Size.Small" OnClick="()=>  DeleteCache(Global.AppPath.MarketFolder)" />
					</MudStack>
				</MudPaper>

				<MudPaper Style="@cardStyle" Elevation="0" class="pa-3">
					<MudStack Row style="position:relative;align-items: center">
						<MudText Typo="Typo.button"> 增强EXIF解析 </MudText>
						<MudSwitch @bind-Value="@Global.SECOND_EXIF" Color="Color.Primary" style="position:absolute;right:0px;height:38px;" />
					</MudStack>
				</MudPaper>
			</div>


		</div>



	</div>

	@if (!openDrawer)
	{
		<MudFab Style="position: absolute; bottom: 55px; margin-left:calc(50vw - 20px);" Color="Color.Primary" StartIcon="@Icons.Material.Filled.ArrowUpward" OnClick="()=> openDrawer = true" Size="Size.Small" />
	}


	<MudOverlay Visible="@MainLoading.Show" DarkBackground="true" Absolute="true" ZIndex="99999">
		<MudPaper Width="200px" Height="200px" Elevation="25" Style="text-align:center;padding-top:calc(50% - 38px)">
			<MudProgressCircular Color="Color.Primary" Indeterminate="true" />
			<MudText Typo="Typo.subtitle1" Color="Color.Primary">
				<b>@MainLoading.Message</b>
			</MudText>
		</MudPaper>
	</MudOverlay>
	<MudOverlay Visible="@ForceUpdate" DarkBackground="true" Absolute="true" ZIndex="99999">
		<MudPaper Width="200px" Height="200px" Elevation="25" Style="text-align:center;padding-top:calc(50% - 38px)">
			<MudText Typo="Typo.subtitle1" Color="Color.Primary">
				<b>应用版本过低，请升级！</b><a href="https://cdn.thankful.top/DaVinci%20Frame%20Master-%E6%B0%B4%E5%8D%B0%E7%9B%B8%E6%A1%86%E5%A4%A7%E5%B8%88.apk">下载链接</a>
			</MudText>
		</MudPaper>
	</MudOverlay>


	<MudOverlay Visible="@FocusImageShow" DarkBackground="true" Absolute="false" ZIndex="9999" OnClick="()=>FocusImageShow = false">
		<MudPaper Style="position:relative;background:#E5E5E5;padding:16px;box-sizing: content-box;width: 90vw;" Elevation="25">
			<MudImage ObjectFit="ObjectFit.Contain" Src="@FocusImageSrc" Style="width: 90vw;" />
			@if (FocusImageType == 'a')
			{
				<div style="display: flex; align-items: center; justify-content: space-between; margin-top:4px;">
					<MudText Class="dfm-card-name" Typo="Typo.subtitle1">
						@FocusImage?.WMCanvas?.Name
					</MudText>
					<div style="display: flex; align-items: center;">
						<span style="font-size: 10px;line-height: 8px;">已下载 @FocusImage?.DownloadTimes</span>
					</div>
				</div>
				<div style="display: flex; align-items: center; justify-content: space-between; margin-top:4px;">
					<div style="display: flex; align-items: center;">
						<MudIcon Icon="@Icons.Material.Filled.AccountCircle" Color="Color.Default" Size="Size.Small" />
						<MudText Typo="Typo.overline" Style="@($"color:{Colors.Grey.Default};padding-top: 2px;margin-left:2px;")">
							@FocusImage?.UserDisplayName
						</MudText>
					</div>
					<div style="display: flex; align-items: center;">
						<MudIconButton Icon="@Icons.Material.Filled.AddAlert" Variant="Variant.Text" Color="@(subscribed.Any(x=>x.Item1 == FocusImage?.UserDisplayName) ? Color.Default : Color.Warning)" Size="Size.Medium" DisableElevation="true" OnClick="()=>Subscribe(FocusImage?.UserId)" />
						<MudIconButton Icon="@Icons.Material.Filled.StarBorder" Variant="Variant.Text" Color="Color.Default" Size="Size.Medium" DisableElevation="true" OnClick="()=>Delete()" />
						<MudIconButton Icon="@Icons.Material.Filled.Download" Variant="Variant.Text" Color="Color.Primary" Size="Size.Medium" DisableElevation="true" OnClick="()=>DownloadTemplate(FocusImage?.WatermarkId)" />
					</div>
				</div>

				}
			else if (FocusImageType == 'r')
			{
				<MudIconButton Icon="@Icons.Material.Filled.Star" Variant="Variant.Text" Color="Color.Warning" DisableElevation="true" Style="position:absolute;left:10px;bottom:10px" OnClick="()=>Delete()" />
			}
			else if (FocusImageType == 'd')
			{
				<MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Text" Color="Color.Error" DisableElevation="true" Style="position:absolute;left:10px;bottom:10px" OnClick="()=> Delete()" />
				<MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" Style="position:absolute;right:10px;bottom:10px" OnClick="()=>{FocusImageShow = false; OpenPhoto(downloadedTemplates.First(x=>x.WatermarkId == FocusImageId)); } ">开始</MudButton>
			}
		</MudPaper>
	</MudOverlay>

</div>

<MudDrawer @bind-Open="@openDrawer" Width="100%" Height="100%" Anchor="Anchor.Bottom" Elevation="0" Variant="@DrawerVariant.Temporary" Color="Color.Default" Style="overflow:hidden;" @onclick="()=>openSave = false">
	<div style="height:40px;width:100%;top:0;left:0;z-index:999;">
		<MudToolBar Style="height:40px;padding-left:2px;box-shadow: 0 2px 12px 0 rgb(0 0 0 / 10%);">
			<MudIconButton Icon="@Icons.Material.Filled.KeyboardBackspace" OnClick="()=>openDrawer = false" />
			<MudButton StartIcon="@Icons.Material.Filled.Save" Style="margin-right: 10px; position: absolute; right: 10px;" OnClick="()=>openSave = true">保存</MudButton>
			<MudButton StartIcon="@Icons.Material.Filled.Refresh" Color="Color.Primary" OnClick="RefreshEditImage">刷新</MudButton>
		</MudToolBar>
	</div>

	@if (CurrentImage != null && !string.IsNullOrEmpty(CurrentImage.Src))
	{
		<MudCard style="padding:16px;background:#E5E5E5;height:50%" Elevation="0">
			<MudImage ObjectFit="@ObjectFit.Contain" Src="@CurrentImage.Src" Elevation="0" Style="width:100%;height:100%" />
		</MudCard>

		<Design @ref="design" CurrentCanvas="CurrentImage.Canvas" />
	}
</MudDrawer>


<MudDrawer @bind-Open="@openLogoDialog" Width="100%" Height="60%" Anchor="Anchor.Bottom" Elevation="15" Variant="@DrawerVariant.Temporary" Color="Color.Default">
	@if (openLogoDialog)
	{
		<LogoDialog />
	}
</MudDrawer>

<MudDrawer @bind-Open="@openVip" Width="100%" Height="60%" Anchor="Anchor.Bottom" Elevation="15" Variant="@DrawerVariant.Temporary" Color="Color.Default">
	<MudPaper Style="margin: 4% 10% 10px 10%;" Elevation="0" class="pa-3">
		<MudStack Row style="position:relative;align-items: center">
			<MudText Typo="Typo.button"> 永久授权 </MudText>
			<MudChip Size="Size.Medium" Color="Color.Warning" style="position:absolute;right:10px">¥38</MudChip>
		</MudStack>
	</MudPaper>
	<MudPaper Style="margin: 10px 10%;" Elevation="0" class="pa-3">
		<MudStack Row style="position:relative;align-items: center">
			<MudText Typo="Typo.button"> 年票 </MudText>
			<MudChip Size="Size.Medium" Color="Color.Warning" style="position:absolute;right:10px">¥28</MudChip>
		</MudStack>
	</MudPaper>
	<MudPaper Style="margin: 10px 10%;" Elevation="0" class="pa-3">
		<MudStack Row style="position:relative;align-items: center">
			<MudText Typo="Typo.button"> 季票 </MudText>
			<MudChip Size="Size.Medium" Color="Color.Warning" style="position:absolute;right:10px">¥18</MudChip>
		</MudStack>
	</MudPaper>
	<MudPaper Style="margin: 10px 10%;" Elevation="0" class="pa-3">
		<MudStack Row style="position:relative;align-items: center">
			<MudText Typo="Typo.button"> 月票 </MudText>
			<MudChip Size="Size.Medium" Color="Color.Warning" style="position:absolute;right:10px">¥8</MudChip>
		</MudStack>
	</MudPaper>
</MudDrawer>


<MudDrawer @bind-Open="@openSave" Width="100%" Anchor="Anchor.Bottom" Elevation="15" Variant="@DrawerVariant.Temporary" Color="Color.Default">
	<MudCard Elevation="0">
		<MudCardHeader>
			<CardHeaderContent>
				<MudText></MudText>
			</CardHeaderContent>
			<CardHeaderActions>
				<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="Export">保存</MudButton>
			</CardHeaderActions>
		</MudCardHeader>
		<MudCardContent>
			<MudForm>
				<MudSelect @bind-Value="@Global.Resolution" T="string" Label="分辨率" AnchorOrigin="Origin.BottomCenter">
					<MudSelectItem Value="@("default")">原图</MudSelectItem>
					<MudSelectItem Value="@("1080")">1080P</MudSelectItem>
					<MudSelectItem Value="@("2160")">4K</MudSelectItem>
				</MudSelect>
				<MudSelect @bind-Value="@Global.Quality" T="int" Label="图片质量" AnchorOrigin="Origin.BottomCenter">
					<MudSelectItem Value="@(100)">原图</MudSelectItem>
					<MudSelectItem Value="@(85)">高</MudSelectItem>
					<MudSelectItem Value="@(70)">中</MudSelectItem>
				</MudSelect>
				<MudTextField Label="输出目录" Value="@("DCIM/Camera")" Variant="Variant.Text" ReadOnly="true" Margin="Margin.Dense" />
			</MudForm>
		</MudCardContent>
	</MudCard>
</MudDrawer>


<MudDialog @bind-IsVisible="CreateTemplate.DialogVisible" Options="CreateTemplate.DialogOptions" Style="max-width:400px;">
	<DialogContent>
		<MudForm>
			<MudTextField @bind-Value="CreateTemplate.TemplateName" T="string" Label="模板名称" Required="true" RequiredError="模板名称不能为空" />
			<MudStack Row Class="mt-5">
				@if (!string.IsNullOrEmpty(CreateTemplate.Base64Src))
				{
					<MudImage Width="250" ObjectFit="ObjectFit.Contain" Src="@CreateTemplate.Base64Src" />
				}
				<MudFileUpload T="IReadOnlyList<IBrowserFile>" FilesChanged="SelectImage" Accept=".png, .jpg">
					<ButtonTemplate>
						<MudIconButton HtmlTag="label" for="@context.Id" Icon="@Icons.Material.Filled.OpenInNew" Style="float:right;max-width:80px;float:right;width:40px;height:40px;" />
					</ButtonTemplate>
				</MudFileUpload>
			</MudStack>
		</MudForm>
	</DialogContent>
	<DialogActions>
		<MudButton FullWidth="true" Variant="Variant.Filled" OnClick="OpenDesign">确定</MudButton>
	</DialogActions>
</MudDialog>






@code {
	[Inject]
	private IDialogService DialogService { get; set; }
	WMThickness BorderThickness = new WMThickness();
	string url = "";
	bool SrcLoading = false;
	bool ShowUserInfo = false;
	bool IsLoginIn = false;
	bool openDrawer = false;
	bool openVip = false;
	bool openLogoDialog = false;
	bool openSave = false;
	private Design design;
	int activeTab = 1;
	int tb1_t1 = 1;
	int tb2_t2 = 1;
	bool ForceUpdate = false;
	bool showMarket = false;
	bool FocusImageShow = false;
	string FocusImageSrc = "";
	string FocusImageId = "";
	char FocusImageType = ' ';
	bool firstClick2Panel = true;
	List<WMZipedTemplate> ZipedTemplates = new List<WMZipedTemplate>();
	List<WMZipedTemplate> hottest = new();
	List<WMZipedTemplate> newest = new();
	List<Tuple<string, List<WMZipedTemplate>>> subscribed = new();
	List<WMZipedTemplate> downloadedTemplates = new List<WMZipedTemplate>();
	List<WMZipedTemplate> ILikeTemplates = new();
	int start = 1;
	List<WMZipedTemplate> wMTemplates = new List<WMZipedTemplate>();
	WMZipedTemplate CurrentTemplate;
	TemplateList CurrentImage;
	List<TemplateList> Images = new List<TemplateList>();
	WMZipedTemplate FocusImage;
	bool checkUpdate = false;
	int DownLoadProgress = 0;
	string cardStyle => $"margin:1px 16px;background:{Colors.Grey.Lighten4}";

#if ANDROID

	[Inject]
	private IUpgradeService UpgradeService { get; set; }
#endif
	protected override async Task OnInitializedAsync()
	{
		await Global.InitConfig();
		var date = Global.ReadDate();
		if ((DateTime.Now - date).TotalDays > 5)
		{
			if (Directory.Exists(Global.AppPath.TemplatesFolder))
			{
				Directory.Delete(Global.AppPath.TemplatesFolder, true);
			}
			Global.WriteDate();
		}


		APIHelper helper = new APIHelper();
		var isOutOfDate = await Watermark.Shared.Models.ClientInstance.IsOutOfDate();
		if (isOutOfDate)
		{
			ForceUpdate = true;
			return;
		}

		Global.DeviceType = Shared.Enums.DeviceType.Andorid;
		var result = await Global.ReadLocalAsync();
		if (!string.IsNullOrEmpty(result.Item1))
		{
			var login = await helper.LoginIn(result.Item1, result.Item2, true);
			if (login.success)
			{
				Global.CurrentUser = new WMLoginChildModel
					{
						ID = login.data.data.ID,
						IMG = login.data.data.IMG,
						DISPLAY_NAME = login.data.data.DISPLAY_NAME,
						USER_NAME = login.data.data.USER_NAME,
						EXPIRE_DATE = login.data.data.EXPIRE_DATE
					};
				IsLoginIn = true;
				await Global.WriteAccount2LocalAsync(result.Item1, result.Item2);
				StateHasChanged();
			}
		}
		await LoadTemplates();
		await helper.DownloadLogoes();
		checkUpdate = await Watermark.Shared.Models.ClientInstance.CheckUpdate();

		await helper.PageVisitRecord(ProgramPage.MyTemplate, Platform.Andorid);
	}

	async void SelectImage(IReadOnlyList<IBrowserFile> files)
	{

		var dic = new Dictionary<string, string>();
		foreach (var file in files)
		{
			try
			{
				MemoryStream ms = new MemoryStream();
				await file.OpenReadStream(file.Size).CopyToAsync(ms);
				CreateTemplate.CurTemplete = ms.ToArray();
				Global.ImageFile2Base64(dic, CreateTemplate.CurTemplete, CreateTemplate.ID);
			}
			catch (Exception ex)
			{

			}
		}
		CreateTemplate.Base64Src = dic.First().Value;
		StateHasChanged();
	}

	void OpenDesign()
	{
		if (string.IsNullOrEmpty(CreateTemplate.TemplateName) || string.IsNullOrEmpty(CreateTemplate.Base64Src)) return;
		var canvas = new WMCanvas() { Name = CreateTemplate.TemplateName, ID = CreateTemplate.ID };
		var basePath = Global.AppPath.TemplatesFolder + canvas.ID;
		if (!Directory.Exists(basePath))
		{
			Directory.CreateDirectory(basePath);
		}
		CreateTemplate.DialogVisible = false;
		var ps = new DialogParameters<Design>();
		var option = new DialogOptions() { NoHeader = false, MaxWidth = MaxWidth.ExtraLarge };
		//ps.Add(x => x.CurrentCanvas, canvas);
		//ps.Add(x => x.CurrentTemplateBytes, CreateTemplate.CurTemplete);
		DialogService.Show<Design>("", ps, option);
	}

	public async void OpenMyTemplates()
	{
		var parameters = new DialogParameters<MyTemplates>();

		var option = new DialogOptions() { NoHeader = false, MaxWidth = MaxWidth.ExtraLarge };
		var rst = DialogService.Show<MyTemplates>("我的模板", parameters, option);
		var dialog = await rst.Result;
		if (!dialog.Canceled)
		{
			var data = (WMZipedTemplate)dialog.Data;
			if (data != null)
			{
				var helper = new WatermarkHelper();

				var src = helper.Generation(data.WMCanvas, data, true);
				data.Src = src;
				wMTemplates.Add(data);
				StateHasChanged();
			}
		}

	}

	public async void SelectPictureClick(IBrowserFile file)
	{
		Images = new List<TemplateList>();
		Dictionary<string, string> dic = new Dictionary<string, string>();
		WMCanvas canvas = new WMCanvas();
		canvas.Path = file.Name;
		using var sm = new MemoryStream();
		await file.OpenReadStream(file.Size).CopyToAsync(sm);
		var bt = Task.Run(() =>
		{
			canvas.Exif = ExifHelper.ReadImage(sm.ToArray());
			return SkiaSharp.SKBitmap.Decode(sm.ToArray());
		});

		var bitmap = await bt;

		var src = Task.Run(() =>
		{
			Global.ImageFile2Base64(dic, sm.ToArray(), canvas.ID);
			return dic.First().Value;
		});
		Images.Add(new TemplateList
			{
				Canvas = canvas,
				Src = await src,
				ID = canvas.ID,
				Path = file.Name,
				Bitmap = bitmap
			});
		CurrentImage = Images!.FirstOrDefault();
		StateHasChanged();
	}

	async void ClickImage(TemplateList image)
	{
		CurrentImage = image;
		SrcLoading = true;
		var t = Task.Run(() =>
		{
			WatermarkHelper helper = new WatermarkHelper();
			CurrentImage.Canvas.Path = CurrentImage.Path;
			var ziped = new WMZipedTemplate
				{
					Bitmap = image.Bitmap,
					WatermarkId = image.ID,
					WMCanvas = CurrentImage.Canvas,
				};
			return helper.Generation(CurrentImage.Canvas, ziped, true);
		});

		CurrentImage.Src = await t;
		SrcLoading = false;
		StateHasChanged();
	}

	async void OpenPhoto(WMZipedTemplate template)
	{
		var result = await MediaPicker.Default.PickPhotoAsync(new MediaPickerOptions
			{
				Title = "选择图片"
			});
		if (result is null) return;

		MainLoading.Message = "正在生成图片...";
		MainLoading.Show = true;
		StateHasChanged();
		WMCanvas canvas = new WMCanvas();
		var sm = await result.OpenReadAsync();
		using var ms = new MemoryStream();
		sm.Seek(0, SeekOrigin.Begin);
		await sm.CopyToAsync(ms);
		canvas.Exif = await Task.Run(() =>
		{
			var arr = ms.ToArray();
			return ExifHelper.ReadImage(arr);
		});

		Images = new List<TemplateList>();
		Dictionary<string, string> dic = new Dictionary<string, string>();
		if (!Directory.Exists(Global.AppPath.ThumbnailFolder))
		{
			Directory.CreateDirectory(Global.AppPath.ThumbnailFolder);
		}
		await Task.Run(() =>
		{
			var thumbnail = Global.AppPath.ThumbnailFolder + result.FileName;
			var bitmap = SkiaSharp.SKBitmap.Decode(result.FullPath);
			return Global.WriteThumbnailImageAsync(bitmap, thumbnail);
		});
		canvas.Path = result.FullPath;
		var tl = new TemplateList
			{
				Canvas = canvas,
				ID = canvas.ID,
				Path = result.FullPath
			};
		Images.Add(tl);
		CurrentImage = tl;
		await ChangeTemplate(template);
		MainLoading.Show = false;
		StateHasChanged();
	}

	async Task ChangeTemplate(WMZipedTemplate template)
	{
		CurrentTemplate = template;
		if (CurrentImage == null) return;

		var cvs = Global.ReadConfig(Global.CanvasSerialize(template.WMCanvas));
		cvs.Exif = CurrentImage.Canvas.Exif;
		CurrentImage.Canvas = cvs;
		WatermarkHelper helper = new WatermarkHelper();
		cvs.Path = CurrentImage.Path;
		template.Bitmap = CurrentImage.Bitmap;
		var t = await helper.GenerationAsync(cvs, null, true, false);
		await Task.Run(() => CurrentImage.Src = t);

		if (design != null)
			design.SetCanvas(CurrentImage.Canvas);

		openDrawer = true;
	}

	async void OpenLoginDialog()
	{
		DialogOptions topCenter = new DialogOptions() { Position = DialogPosition.TopCenter };
		var rst = DialogService.Show<LoginDialog>("", topCenter);
		var dialogResult = await rst.Result;
		if (!dialogResult.Canceled && dialogResult.Data.Equals(true))
		{
			IsLoginIn = true;
			StateHasChanged();
		}
	}

	async void OpenSignUpDialog()
	{
		var rst = DialogService.Show<SignUpDialog>("");
		var dialogResult = await rst.Result;
		if (!dialogResult.Canceled && dialogResult.Data.Equals(true))
		{
			IsLoginIn = true;
			StateHasChanged();
		}
	}

	async void Export()
	{
		var helper = new WatermarkHelper();
		MainLoading.Show = true;
		foreach (var item in Images)
		{
			var idx = Images.IndexOf(item) + 1;
			MainLoading.Message = $"正在导出图片，一共{Images.Count}张，目前第{idx}张";
			MainLoading.Value = idx * 100.0 / Images.Count;
			await helper.GenerationAsync(item.Canvas, null, false, false);
			//item.Canvas.Path = item.Path;
			//await JSRuntime.InvokeVoidAsync("saveAsFile", $"{item.ID}.jpg", Convert.FromBase64String(item.Src.Split(',')[1]));
			StateHasChanged();
		}
		MainLoading.Value = 100;
		await Task.Delay(200);
		MainLoading.Show = false;
		Watermark.Shared.Models.ClientInstance.ShowMsg(Snackbar, "保存成功。", Severity.Success);
		openSave = false;
		StateHasChanged();

	}

	async void OpenTemplateMarket()
	{
		var dialog = DialogService.Show<TemplatesMarketMobile>(string.Empty, new DialogOptions() { FullScreen = true, CloseButton = true, FullWidth = true, MaxWidth = MaxWidth.ExtraExtraLarge });
		var result = await dialog.Result;
		if (!result.Canceled)
		{
			var data = (WMZipedTemplate)result.Data;
			if (data != null)
			{
				var helper = new WatermarkHelper();

				var src = helper.Generation(data.WMCanvas, data, true);
				data.Src = src;
				wMTemplates.Add(data);
				StateHasChanged();
			}
		}
	}

	async Task LoadTemplatesMarket()
	{
		// MainLoading.Message = "正在下载模板...";
		// StateHasChanged();
		// MainLoading.Show = true;
		//showMarket = false;
		var helper = new APIHelper();
		var allTemplates = await helper.GetWatermarks("", start, 99);
		var recommend = allTemplates.Where(x => x.Recommend);
		hottest = allTemplates.Where(x => !x.Recommend).Take(12).ToList();
		newest = allTemplates.OrderByDescending(x => x.DateTimeCreated).Where(x => !x.Recommend).ToList();
		ZipedTemplates = recommend.UnionBy(hottest, x => x.WatermarkId).UnionBy(newest, x => x.WatermarkId).ToList();
		StateHasChanged();
		if (!Directory.Exists(Global.AppPath.MarketFolder))
		{
			Directory.CreateDirectory(Global.AppPath.MarketFolder);
		}

		var templateFolderInfo = new DirectoryInfo(Global.AppPath.MarketFolder);

		var downloadedTemplates = templateFolderInfo.GetDirectories().Select(x => x.Name).ToList();
		var needToDownloadTemplates = ZipedTemplates.Where(x => !downloadedTemplates.Contains(x.WatermarkId)).Select(x => x.WatermarkId).ToList();
		var downloaded = await helper.DownloadAndorid(needToDownloadTemplates);
		if (!downloaded) Watermark.Shared.Models.ClientInstance.ShowMsg(Snackbar, "下载失败", Severity.Error);
		var subUser = await IntiSubscribedUserList();
		subscribed = new List<Tuple<string, List<WMZipedTemplate>>>();
		foreach (var su in subUser)
		{
			var tp = ZipedTemplates.Where(x => x.UserId == su).ToList();
			if (tp.Count > 0)
			{
				var tup = Tuple.Create(tp[0].UserDisplayName, tp);
				subscribed.Add(tup);
			}
		}

		subscribed.Add(Tuple.Create("热门", hottest.Where(x => !subUser.Contains(x.UserId)).ToList()));
		subscribed.Add(Tuple.Create("最新", newest.Where(x => !subUser.Contains(x.UserId)).ToList()));

		StateHasChanged();
		try
		{
			// MainLoading.Message = $"正在加载模板...";
			List<Task> mission = new List<Task>();
			var basePath = Global.AppPath.MarketFolder;

			WatermarkHelper watermarkHelper = new WatermarkHelper();
			foreach (var dirct in ZipedTemplates)
			{
				var configPath = basePath + dirct.WatermarkId + System.IO.Path.DirectorySeparatorChar + "config.json";
				if (System.IO.File.Exists(configPath))
				{

					var canvas = await Task.Run(() =>
					{
						var content = File.ReadAllText(configPath);
						return Global.ReadConfig(content);
					});
					dirct.WMCanvas = canvas;
					await InitFonts([canvas]);
					var t = Task.Run(() =>
					{
						var folder = new DirectoryInfo(basePath + dirct.WatermarkId);
						foreach (var file in folder.GetFiles())
						{
							if (file.Name.EndsWith("default.jpg", StringComparison.OrdinalIgnoreCase))
							{
								var sKBitmap = SkiaSharp.SKBitmap.Decode(file.FullName);
								dirct.Bitmap = sKBitmap;
							}
							else if (file.Name.EndsWith(".ttf") || file.Name.EndsWith(".otf"))
							{
								// var fs = file.OpenRead();
								// using MemoryStream mss = new();
								// fs.CopyTo(mss);
								// dirct.Fonts[file.Name] = mss.ToArray();
							}
							else
							{
								var sKBitmap = SkiaSharp.SKBitmap.Decode(file.FullName);
								dirct.Images[file.Name] = sKBitmap;
							}

						}

						var src = watermarkHelper.Generation(dirct.WMCanvas, dirct, true, false);
						dirct.Src = src;
						InvokeAsync(StateHasChanged);
						return src;
					});
					mission.Add(t);
				}
			}

			var getILike = await helper.GetILike(Global.CurrentUser.ID);
			if (getILike != null && getILike.success && getILike.data != null)
			{
				ILikeTemplates = ZipedTemplates.Where(x => getILike.data.Select(c => c.WatermarkId).Contains(x.WatermarkId)).ToList();
			}

			await Task.WhenAll(mission);
			// MainLoading.Show = false;
			StateHasChanged();
		}
		catch (Exception ex)
		{
			Watermark.Shared.Models.ClientInstance.ShowMsg(Snackbar, ex.Message, Severity.Error);
		}
	}

	async Task LoadTemplates()
	{
		MainLoading.Message = $"正在加载模板...";
		MainLoading.Show = true;
		StateHasChanged();
		var helper = new APIHelper();
		if (!Directory.Exists(Global.AppPath.TemplatesFolder))
		{
			Directory.CreateDirectory(Global.AppPath.TemplatesFolder);
		}

		try
		{
			List<Task> mission = new List<Task>();
			var basePath = Global.AppPath.TemplatesFolder;
			WatermarkHelper watermarkHelper = new WatermarkHelper();
			var folder = new DirectoryInfo(basePath);
			foreach (var tFolder in folder.GetDirectories())
			{
				WMZipedTemplate dirct = new();
				dirct.WatermarkId = tFolder.Name;
				var configPath = basePath + dirct.WatermarkId + System.IO.Path.DirectorySeparatorChar + "config.json";
				if (System.IO.File.Exists(configPath))
				{
					var canvas = await Task.Run(() =>
					{
						var content = File.ReadAllText(configPath);
						return Global.ReadConfig(content);
					});
					await InitFonts([canvas]);
					var t = Task.Run(() =>
					{
						var src = watermarkHelper.Generation(canvas, null, true, false);
						dirct.WMCanvas = canvas;
						dirct.Src = src;
						downloadedTemplates.Add(dirct);
						return src;
					});
					mission.Add(t);
				}
			}
			await Task.WhenAll(mission);
			MainLoading.Show = false;
			StateHasChanged();
		}
		catch (Exception ex)
		{
			Watermark.Shared.Models.ClientInstance.ShowMsg(Snackbar, ex.Message, Severity.Error);
		}
	}

	async Task<WMZipedTemplate> LoadSingleTemplates(string watermarkId)
	{
		var helper = new APIHelper();
		if (!Directory.Exists(Global.AppPath.TemplatesFolder))
		{
			Directory.CreateDirectory(Global.AppPath.TemplatesFolder);
		}

		try
		{
			WatermarkHelper watermarkHelper = new WatermarkHelper();
			WMZipedTemplate dirct = new();
			dirct.WatermarkId = watermarkId;
			var configPath = Global.AppPath.TemplatesFolder + watermarkId + System.IO.Path.DirectorySeparatorChar + "config.json";
			if (!System.IO.File.Exists(configPath)) return dirct;
			var canvas = await Task.Run(() =>
			{
				var content = File.ReadAllText(configPath);
				return Global.ReadConfig(content);
			});
			dirct.WMCanvas = canvas;
			await InitFonts([canvas]);
			var src = await watermarkHelper.GenerationAsync(canvas, null, true, false);
			dirct.Src = src;
			return dirct;
		}
		catch (Exception ex)
		{
			Watermark.Shared.Models.ClientInstance.ShowMsg(Snackbar, ex.Message, Severity.Error);
			return new WMZipedTemplate();
		}
	}

	async void LoadMore()
	{
		MainLoading.Show = true;
		MainLoading.Message = "正在加载模板...";
		var helper = new APIHelper();
		var more = await helper.GetWatermarks("", ++start, 10);
		List<Task> tasks1 = new List<Task>();
		foreach (var t in more)
		{
			var task = helper.ExtractZip(t.WatermarkId).ContinueWith(item =>
			{
				t.WMCanvas = item.Result.WMCanvas;
				t.Images = item.Result.Images;
				t.Fonts = item.Result.Fonts;
				t.Bitmap = item.Result.Bitmap;
			});
			tasks1.Add(task);
		}
		await Task.WhenAll(tasks1);
		var whelper = new WatermarkHelper();
		List<Task> tasks = new List<Task>();
		foreach (var t in more)
		{
			var c = Task.Run(() =>
			{
				t.Src = whelper.Generation(t.WMCanvas, t, true);
				return t.Src;
			});

			tasks.Add(c);
		}
		await Task.WhenAll(tasks);
		ZipedTemplates.AddRange(more);
		MainLoading.Show = false;
		StateHasChanged();
	}

	public async void RefreshEditImage()
	{
		MainLoading.Message = "正在生成图片...";
		MainLoading.Show = true;
		var cvs = design.GetImageSrc();
		var whelper = new WatermarkHelper();
		CurrentImage.Canvas = cvs;
		CurrentImage.Src = await whelper.GenerationAsync(cvs, null, true, false);
		MainLoading.Show = false;
		StateHasChanged();
	}

	private void DownloadProgressChanged(long readLength, long allLength)
	{
		InvokeAsync(() =>
		{
			var c = (int)(readLength * 100 / allLength);

			if (c > 0 && c % 5 == 0) //刷新进度为每5%更新一次，过快的刷新会导致页面显示数值与实际不一致
			{
				DownLoadProgress = c; //下载完成百分比
				StateHasChanged();
			}
		});
	}
	async void Update()
	{
#if ANDROID
	if (!checkUpdate || DownLoadProgress > 0) return;
	Global.APK = DateTime.Now.ToString("yyyyMMddHHmmss") + ".apk";
	var downloadUri = "https://cdn.thankful.top/DaVinci%20Frame%20Master-%E6%B0%B4%E5%8D%B0%E7%9B%B8%E6%A1%86%E5%A4%A7%E5%B8%88.apk";
	await UpgradeService.DownloadFileAsync(downloadUri, DownloadProgressChanged);
	UpgradeService.InstallNewVersion();
	DownLoadProgress = 0;
	StateHasChanged();
#endif
	}


	async void CopyClipboard(string uri)
	{
		await Clipboard.Default.SetTextAsync(uri);
		Watermark.Shared.Models.ClientInstance.ShowMsg(Snackbar, "已复制到剪贴板", Severity.Success);
	}

	async Task<List<string>> IntiSubscribedUserList()
	{
		if (Global.CurrentUser == null || string.IsNullOrEmpty(Global.CurrentUser.ID)) return [];
		var helper = new APIHelper();
		var result = await helper.GetISubscribed(Global.CurrentUser.ID);
		if (result.success)
		{
			return result.data;
		}
		else
		{
			ClientInstance.ShowMsg(Snackbar, result.message?.content ?? "", Severity.Error);
		}
		return [];
	}

	async void Subscribe(string userId)
	{
		if (Global.CurrentUser == null || string.IsNullOrEmpty(Global.CurrentUser.ID)) return;
		var helper = new APIHelper();
		var r = await helper.SubscribeUser(Global.CurrentUser.ID, userId);
		await LoadTemplatesMarket();
	}

	void OpenFocus(char t, WMZipedTemplate zip, bool b)
	{
		FocusImage = zip;
		FocusImageType = t;
		FocusImageId = zip.WatermarkId;
		FocusImageSrc = zip.Src;
		FocusImageShow = b;
		StateHasChanged();
	}

	async void Delete()
	{
		//已下载
		if (FocusImageType == 'd')
		{
			var p = Global.AppPath.TemplatesFolder + FocusImageId + Path.DirectorySeparatorChar;
			if (Directory.Exists(p))
			{
				var _ = Task.Run(() =>
				{
					Directory.Delete(p, true);
					var t = downloadedTemplates.FirstOrDefault(x => x.WatermarkId == FocusImageId);
					if (t != null)
					{
						downloadedTemplates.Remove(t);
					}
					InvokeAsync(StateHasChanged);
					ClientInstance.ShowMsg(Snackbar, "删除成功", Severity.Success);
				});

			}
		}
		else if (FocusImageType == 'r')
		{
			if (Global.CurrentUser != null && !string.IsNullOrEmpty(Global.CurrentUser.ID))
			{
				var helper = new APIHelper();
				helper.DeleteILike(Global.CurrentUser.ID, FocusImageId);
				var item = ILikeTemplates.FirstOrDefault(x => x.WatermarkId == FocusImageId);
				if (item != null)
				{
					ILikeTemplates.Remove(item);
					ClientInstance.ShowMsg(Snackbar, "取消收藏成功", Severity.Success);
				}
			}
		}
		else if (FocusImageType == 'a')
		{
			if (Global.CurrentUser != null && !string.IsNullOrEmpty(Global.CurrentUser.ID))
			{
				var helper = new APIHelper();
				var r = await helper.AddILike(Global.CurrentUser.ID, FocusImageId);
				var item = ZipedTemplates.FirstOrDefault(x => x.WatermarkId == FocusImageId);
				if (item != null && !ILikeTemplates.Any(x => x.WatermarkId == item.WatermarkId))
				{
					ILikeTemplates.Add(item);
					ClientInstance.ShowMsg(Snackbar, "收藏成功", Severity.Success);
				}
			}
		}
		FocusImageShow = false;
		StateHasChanged();

	}

	async void DownloadTemplate(string watermarkId)
	{
		var action = new Action(async () =>
		{
			var api = new APIHelper();
			var w = ZipedTemplates.FirstOrDefault(x => x.WatermarkId == watermarkId);
			var r = await api.Download(watermarkId, w?.UserId ?? "");
			if (r)
			{
				FocusImageShow = false;
				ClientInstance.ShowMsg(Snackbar, "下载完成", Severity.Success);
				var dir = await LoadSingleTemplates(watermarkId);
				if (!downloadedTemplates.Any(x => x.WatermarkId == dir.WatermarkId)) downloadedTemplates.Insert(0, dir);
				StateHasChanged();
			}
		});
		if (Global.CurrentUser == null || string.IsNullOrEmpty(Global.CurrentUser.ID))
		{
			var rst = DialogService.Show<LoginDialog>("");
			var dialogResult = await rst.Result;
			if (!dialogResult.Canceled && dialogResult.Data.Equals(true))
			{
				FocusImageShow = false;
				action.Invoke();
			}
			return;
		}
		var p = Global.AppPath.TemplatesFolder + watermarkId;
		if (Directory.Exists(p))
		{
			FocusImageShow = false;
			bool? rtl = await DialogService.ShowMessageBox("确认覆盖", (MarkupString)"此模板已存在，确定覆盖？", yesText: "确定", cancelText: "取消");
			if (rtl == true)
			{
				Directory.Delete(p, true);
				action.Invoke();
			}
		}
		else
		{
			action.Invoke();
		}
	}

	void DeleteCache(string p)
	{
		if (Directory.Exists(p))
		{
			Directory.Delete(p, true);
			ClientInstance.ShowMsg(Snackbar, "清除完成", Severity.Success);
		}
	}
	void ToSecondPanel()
	{
		activeTab = 2;
		if (firstClick2Panel)
		{
			firstClick2Panel = false;
			var _ = LoadTemplatesMarket();
			var api = new APIHelper();
			var __ = api.PageVisitRecord(ProgramPage.Market, Platform.Andorid);
		}
	}

	async Task InitFonts(List<WMCanvas> mCanvas)
	{
		var fonts = Global.GetAllFontName(mCanvas);
		var helper = new APIHelper();
		await helper.DownloadFonts(fonts);
	}


	#region class

	class MainLoading
	{
		public static bool Show { get; set; } = true;
		public static double Value { get; set; }
		public static string Message { get; set; } = "正在加载模板...";
	}

	class CreateTemplate
	{
		public static bool DialogVisible { get; set; } = false;
		public static DialogOptions DialogOptions { get; set; } = new DialogOptions() { MaxWidth = MaxWidth.Medium, NoHeader = true };
		public static string TemplateName { get; set; }
		public static string Base64Src { get; set; }
		public static string ID = Guid.NewGuid().ToString("N").ToUpper();
		public static byte[] CurTemplete { get; set; }

	};

	class TemplateList
	{
		public string ID { get; set; }
		public string Path { get; set; }
		public WMCanvas Canvas { get; set; }
		public SkiaSharp.SKBitmap Bitmap { get; set; }
		public string Src { get; set; }
	}

	#endregion
}