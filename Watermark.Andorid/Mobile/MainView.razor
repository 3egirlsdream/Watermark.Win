@page "/"
@using System.IO
@using System.Collections.Concurrent
@using Watermark.Andorid.BlazorPages
@using Watermark.Andorid.Models
@using Watermark.Shared.Enums
@using Watermark.Win.Models
@using Watermark.Shared.Models
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager

<style>
	.panel-class {
		height: calc(100% - 50px);
	}

	.mud-tab-class
	::-webkit-scrollbar {
		width: 0px;
		display: none;
	}


	.mud-tab-class {
		-ms-overflow-style: none; /* IE and Edge */
		scrollbar-width: none; /* Firefox */
		padding: 0px 16px;
		height: 100%;
		overflow-y: auto;
		overflow-x: hidden;
	}

	.water-tab {
		height: 48px;
		position: absolute;
		bottom: 0;
		width: 100%;
		background: #fff;
		z-index: 10;
	}

	.water-tab-text {
		width: 33.3%;
		height: 48px;
		float: left;
		display: flex;
		align-items: center;
		justify-content: center;
	}

	.water-tab-item {
		height: calc(100% - 44px);
		clear: both;
	}

	.mud-tab-class .mud-list-item-clickable:focus:not(.mud-selected-item) {
		transform: scale(1.2);
	}

	.mud-tab-class .mud-list-item-clickable {
		transition: transform 0.3s ease;
	}


	.dfm-card-name {
		text-overflow: ellipsis;
		white-space: nowrap;
		overflow-x: hidden
	}

	.dfm-card-user-name {
		position: relative;
		display: flex;
		align-items: center;
		text-overflow: ellipsis;
		white-space: nowrap;
		overflow-x: hidden
	}

	.dfm-card-footer {
		position: relative;
		height: 30px;
		display: flex;
		align-items: center;
	}

	.flex-vertical-center {
		display: flex;
		align-items: center;
	}

	.expandable {
		width: 30px;
		text-overflow: ellipsis;
		white-space: nowrap;
		overflow-x: hidden;
		height: 30px;
		transition: width 0.5s; /* 添加过渡效果 */
		display: flex;
		align-items: center;
		cursor: pointer;
		padding: 0 10px 0 0px;
	}

		.expandable:hover {
			width: 100%; /* 鼠标悬停时改变宽度，触发展开效果 */
		}
</style>

<MudThemeProvider IsDarkMode="@Global.DARK_MODE" />
<MudDialogProvider />
<MudSnackbarProvider />
<div Style="height:100vh;width:100%;">
	<div style="@($"height:40px;position:fixed;width:100%;top:0;left:0;z-index:999;display:{(activeTab == 3 ? "":"none")}")">
		<MudToolBar Style="height:40px;padding-left:2px;box-shadow: 0 2px 12px 0 rgb(0 0 0 / 10%);background:#fff;z-index:10">
			<MudText Typo="Typo.subtitle1" Style="margin-left:16px;">
				你好，
				@if (Global.CurrentUser != null && !string.IsNullOrEmpty(Global.CurrentUser.DISPLAY_NAME))
				{
					<span>@Global.CurrentUser.DISPLAY_NAME</span>
				}
				else
				{
					<span>游客</span>
				}
			</MudText>
			<MudStack Row Style="position:absolute;right:15px;">
				<MudIcon Icon="@(ShowUserInfo ? Icons.Material.Filled.Clear : @Icons.Material.Filled.AddCircleOutline)" Style="margin-right: 0px;" @onclick="()=> ShowUserInfo = !ShowUserInfo" />
			</MudStack>


			<MudPopover Style="width:200px;padding: 0 !important;" OverflowBehavior="OverflowBehavior.FlipNever" Open="@ShowUserInfo" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" Class="pa-4" Elevation="25">
				<MudList Clickable="true" Dense="true">
					<MudListItem Icon="@Icons.Material.Filled.ImageAspectRatio">
						拼图
					</MudListItem>
					<MudListItem Icon="@Icons.Material.Filled.DesignServices">
						设计模板
					</MudListItem>
				</MudList>
			</MudPopover>
		</MudToolBar>
	</div>
	<div Style="height:100%;width:100vw;display: flex;" @onclick="()=> ShowUserInfo = false">

		<div style="height: 100%; padding: 0px; width:100%">
			<MudPaper class="water-tab" Elevation="0">
				<div class="water-tab-text" @onclick="()=> activeTab = 1">
					<MudText Typo="Typo.button" style="display: flex;align-items: center;" Color="(activeTab == 1 ? Color.Primary: Color.Default)">
						<MudIcon Icon="@(activeTab == 1 ? Icons.Material.Filled.BrightnessAuto :  Icons.Material.Outlined.BrightnessAuto)" Color="(activeTab == 1 ? Color.Primary: Color.Default)" />  &nbsp;<b>我的模板</b>
					</MudText>
				</div>
				<div class="water-tab-text" @onclick="ToSecondPanel">
					<MudText Typo="Typo.button" style="display: flex;align-items: center;" Color="(activeTab == 2 ? Color.Primary: Color.Default)">
						<MudIcon Icon="@(activeTab == 2 ? Icons.Material.Filled.DashboardCustomize :  Icons.Material.Outlined.DashboardCustomize)" Color="(activeTab == 2 ? Color.Primary: Color.Default)" />   &nbsp;<b>模板市场</b>
					</MudText>
				</div>
				<div class="water-tab-text" @onclick="()=> activeTab = 3">
					<MudText Typo="Typo.button" style="display: flex;align-items: center;" Color="(activeTab == 3 ? Color.Primary: Color.Default)">
						<MudIcon Icon="@(activeTab == 3 ? Icons.Material.Filled.Brightness5 :  Icons.Material.Outlined.Brightness5)" Color="(activeTab == 3 ? Color.Primary: Color.Default)" />   &nbsp;<b>关于</b>
					</MudText>
				</div>
			</MudPaper>

			<div class="water-tab-item" style="@(activeTab == 1 ? "":"display:none")">
				<MudStack Row="true" Justify="Justify.Center" class="water-tab" Style="top:0" Elevation="0">
					<div style="@($"{( tb1_t1 == 1 ? "border-bottom:5px solid #676767;" : "")}height:40px;display:flex;align-items:center;margin-right:20px")" @onclick="()=> tb1_t1 = 1">
						<MudText Typo="Typo.subtitle1" style="@($"{(tb1_t1 == 1 ? "font-weight: 700;" : "")}display:flex;align-items: center;")" Color="(tb1_t1 == 1 ? Color.Primary: Color.Default)">
							我的下载
						</MudText>
					</div>
					<div Style="@($"{( tb1_t1 == 2 ? "border-bottom:5px solid #676767;" : "")}height:40px;display:flex;align-items:center;margin-left:20px")" @onclick="()=> tb1_t1 = 2">
						<MudText Typo="Typo.subtitle1" style="@($"{(tb1_t1 == 2 ? "font-weight: 700;" : "")}display: flex;align-items: center;")" Color="(tb1_t1 == 2 ? Color.Primary: Color.Default)">
							我的收藏
						</MudText>
					</div>
				</MudStack>
				<MudPaper Elevation="0" Class="mud-tab-class" Style="@($"background:{Colors.Grey.Lighten5};margin-top:40px;height: calc(100% - 44px); padding-top:10px")">
					<MudGrid Class="pt-2" Justify="Justify.FlexStart" Style="@(tb1_t1 == 1 ? "" : "display:none")">
						@if (loading_down)
						{
							<MudProgressCircular Color="Color.Secondary" Indeterminate="true" Style="margin-left:calc(50% - 20px);margin-top:calc(45vh - 20px)" />
						}
						else
						{
							@foreach (var t in downloadedTemplates.Where(x => x.CanvasType == CanvasType.Normal))
							{
								<MudItem xs="6" Style="padding:4px;">
									<MudCard style="padding:16px;background:#E5E5E5;height:220px" class="flex-vertical-center" Elevation="0">
										<MudImage Style="height:100%;width:100%;" Src="@t.Src" ObjectFit="ObjectFit.Contain" @onclick="()=>OpenFocus('d',t, true)" />
									</MudCard>
								</MudItem>
							}
							@if (downloadedTemplates.Where(x => x.CanvasType == CanvasType.Split).Count() > 0)
							{
								<MudItem xs="12" Style="padding:4px;">
									<MudText Typo="Typo.h5"><b>拼图</b></MudText>
								</MudItem>
							}
							@foreach (var t in downloadedTemplates.Where(x => x.CanvasType == CanvasType.Split))
							{
								<MudItem xs="6" Style="padding:4px;">
									<MudCard style="padding:16px;background:#E5E5E5;height:220px" class="flex-vertical-center" Elevation="0">
										<MudImage Style="height:100%;width:100%;" Src="@t.Src" ObjectFit="ObjectFit.Contain" @onclick="()=>OpenFocus('d',t, true)" />
									</MudCard>
								</MudItem>
							}
						}


					</MudGrid>
					<MudGrid Class="pt-2" Justify="Justify.FlexStart" Style="@(tb1_t1 == 2 ? "" : "display:none")">
						@foreach (var t in ILikeTemplates)
						{
							<MudItem xs="6" Style="padding:4px;">
								<MudCard style="padding:16px;background:#E5E5E5;height:220px" class="flex-vertical-center" Elevation="0">
									@if (!string.IsNullOrEmpty(t.Src))
									{
										<MudImage Style="height:100%;width:100%;" Src="@t.Src" ObjectFit="ObjectFit.Contain" @onclick="()=>OpenFocus('r',t, true)" />
									}
								</MudCard>
							</MudItem>
						}
					</MudGrid>

				</MudPaper>
			</div>


			<div class="water-tab-item" style="@(activeTab == 2 ? "":"display:none")">
				<MudStack Row="true" Justify="Justify.Center" class="water-tab" Style="top:0" Elevation="0">
					<div style="@($"{( tb2_t2 == 1 ? "border-bottom:5px solid #676767;" : "")}height:40px;display:flex;align-items:center;margin:0 10px ")" @onclick="()=> tb2_t2 = 1">
						<MudText Typo="Typo.subtitle1" style="@($"{(tb2_t2 == 1 ? "font-weight: 700;" : "")}margin: auto;")" Color="(tb2_t2 == 1 ? Color.Primary: Color.Default)">
							推荐
						</MudText>
					</div>
					@foreach (var sub in subscribed)
					{
						<div Style="@($"{( tb2_t2 == subscribed.IndexOf(sub) + 2 ? "border-bottom:5px solid #676767;" : "")}height:40px;display:flex;align-items:center;margin:0 10px ")" @onclick="()=> tb2_t2 = subscribed.IndexOf(sub) + 2">
							<MudText Typo="Typo.subtitle1" style="@($"{(tb2_t2 == subscribed.IndexOf(sub) + 2 ? "font-weight: 700;" : "")}margin: auto;")" Color="(tb2_t2 == subscribed.IndexOf(sub) + 2 ? Color.Primary: Color.Default)">
								@sub.Item1
							</MudText>
						</div>
					}
				</MudStack>
				<MudPaper Elevation="0" Class="mud-tab-class" Style="@($"background:{Colors.Grey.Lighten5};margin-top:40px;height: calc(100% - 44px); padding-top:10px")">
					<MudGrid Class="pt-2" Justify="Justify.FlexStart" Style="@(tb2_t2 == 1 ? "" : "display:none")">
						@if (ZipedTemplates == null || ZipedTemplates.Count == 0 || ZipedTemplates.Any(x => string.IsNullOrEmpty(x.Src)))
						{
							<MudProgressCircular Color="Color.Secondary" Indeterminate="true" Style="margin-left:calc(50% - 20px);margin-top:calc(45vh - 20px)" />
						}
						@foreach (var t in ZipedTemplates.Where(x => x.Recommend))
						{
							<MudItem xs="6" Style="padding:4px;">
								<MudCard style="padding:16px;background:#E5E5E5;height:220px" class="flex-vertical-center" Elevation="0">
									@if (!string.IsNullOrEmpty(t.Src))
									{
										<MudImage Style="height:100%;width:100%;" Src="@t.Src" ObjectFit="ObjectFit.Contain" @onclick="()=>OpenFocus('a', t, true)" />
									}
									else
									{
										<MudProgressCircular Color="Color.Secondary" Indeterminate="true" Style="margin-left:calc(50% - 20px)" />
									}
								</MudCard>
								<div style="display: flex; align-items: center; justify-content: space-between; margin-top:4px;">
									<MudText Class="dfm-card-name" Typo="Typo.subtitle1">
										@t.Name
									</MudText>
									<div style="display: flex; align-items: center;">
										<MudIcon Icon="@Icons.Material.Filled.Download" Color="Color.Default" Style="cursor:pointer;height:14px;width:14px;" Size="Size.Small" />
										<span style="font-size: 12px;line-height: 12px;">@t.DownloadTimes</span>
									</div>
								</div>
								<div class="dfm-card-user-name">
									<MudIcon Icon="@Icons.Material.Filled.Recommend" Color="Color.Warning" Size="Size.Small" />
									<MudText Typo="Typo.overline" Style="@($"color:{Colors.Grey.Default};padding-top: 2px;margin-left:2px;")">
										@t.UserDisplayName
									</MudText>
								</div>
							</MudItem>
						}
					</MudGrid>
					@if (subscribed != null)
					{
						@foreach (var sub in subscribed)
						{
							<MudGrid Class="pt-2" Justify="Justify.FlexStart" Style="@($"{(tb2_t2 == subscribed.IndexOf(sub) + 2 ? "" : "display:none;")}")">
								@foreach (var t in sub.Item2)
								{
									<MudItem xs="6" Style="padding:4px;">
										<MudCard style="padding:16px;background:#E5E5E5;height:220px" class="flex-vertical-center" Elevation="0">
											@if (!string.IsNullOrEmpty(t.Src))
											{
												<MudImage Style="height:100%;width:100%;" Src="@t.Src" ObjectFit="ObjectFit.Contain" @onclick="()=>OpenFocus('a', t, true)" />
											}
											else
											{
												<MudProgressCircular Color="Color.Secondary" Indeterminate="true" Style="margin-left:calc(50% - 20px)" />
											}
										</MudCard>
										<div style="display: flex; align-items: center; justify-content: space-between; margin-top:4px;">
											<MudText Class="dfm-card-name" Typo="Typo.subtitle1">
												@t.Name
											</MudText>
											<div style="display: flex; align-items: center;">
												<MudIcon Icon="@Icons.Material.Filled.Download" Color="Color.Default" Style="cursor:pointer;height:14px;width:14px;" Size="Size.Small" />
												<span style="font-size: 12px;line-height: 12px;">@t.DownloadTimes</span>
											</div>
										</div>
										<div class="dfm-card-user-name">
											@if (t.UserId == "0BECCA9A-6F10-4A88-8753-921195D08853" || t.UserId == "9DEBF7DC-F58C-4667-BACF-A6BFD18352EB")
											{
												<MudIcon Icon="@Icons.Material.Filled.Verified" Color="Color.Warning" Size="Size.Small" />
											}
											else
											{
												<MudIcon Icon="@Icons.Material.Filled.AccountCircle" Color="Color.Default" Size="Size.Small" />
											}
											<MudText Typo="Typo.overline" Style="@($"color:{Colors.Grey.Default};padding-top: 2px;margin-left:2px;")">
												@t.UserDisplayName
											</MudText>
										</div>
									</MudItem>
								}
								@if (sub.Item1 == "最新")
								{
									<MudItem xs="12" Style="padding:4px; text-align:center;">
										@if (loadMore)
										{
											<MudProgressCircular Color="Color.Primary" Indeterminate="true" />
										}
										else
										{
											<MudButton Variant="Variant.Text" Color="Color.Default" FullWidth="true" OnClick="()=>{start++;LoadTemplatesMarket();}">加载更多...</MudButton>
										}
									</MudItem>
								}
							</MudGrid>

						}

					}


				</MudPaper>
			</div>

			<div class="water-tab-item" style="@(activeTab == 3 ? "overflow-y:auto;height:calc(100% - 70px);margin-top: 28px":"display:none")">
				<SettingPage />
			</div>
		</div>



	</div>

	<MudOverlay Visible="@MainLoading.Show" DarkBackground="true" Absolute="true" ZIndex="99999">
		<MudPaper Width="200px" Height="200px" Elevation="0" Style="text-align:center;padding-top:calc(50% - 38px)">
			<MudProgressCircular Color="Color.Primary" Indeterminate="true" />
			<MudText Typo="Typo.subtitle1" Color="Color.Primary">
				<b>@MainLoading.Message</b>
			</MudText>
		</MudPaper>
	</MudOverlay>
	<MudOverlay Visible="@ForceUpdate" DarkBackground="true" Absolute="true" ZIndex="99999">
		<MudPaper Width="200px" Height="200px" Elevation="0" Style="text-align:center;padding-top:calc(50% - 38px)">
			<MudText Typo="Typo.subtitle1" Color="Color.Primary">
				<b>应用版本过低，请升级！</b><a href="https://cdn.thankful.top/DaVinci%20Frame%20Master-%E6%B0%B4%E5%8D%B0%E7%9B%B8%E6%A1%86%E5%A4%A7%E5%B8%88.apk">下载链接</a>
			</MudText>
		</MudPaper>
	</MudOverlay>


	<MudOverlay Visible="@FocusImageShow" DarkBackground="true" Absolute="false" ZIndex="9999" OnClick="()=>FocusImageShow = false">
		<MudPaper Style="position:relative;background:#E5E5E5;padding:16px;box-sizing: content-box;width: 90vw;" Elevation="25">
			<MudImage ObjectFit="ObjectFit.Contain" Src="@FocusImageSrc" Style="width: 90vw;" />
			@if (FocusImageType == 'a')
			{
				<div style="display: flex; align-items: center; justify-content: space-between; margin-top:4px;">
					<MudText Class="dfm-card-name" Typo="Typo.subtitle1">
						@FocusImage?.Name
					</MudText>
					<div style="display: flex; align-items: center;">
						<span style="font-size: 10px;line-height: 8px;">已下载 @FocusImage?.DownloadTimes</span>
					</div>
				</div>
				<div style="display: flex; align-items: center; justify-content: space-between; margin-top:4px;">
					<div style="display: flex; align-items: center;">
						<MudIcon Icon="@Icons.Material.Filled.AccountCircle" Color="Color.Default" Size="Size.Small" />
						<MudText Typo="Typo.overline" Style="@($"color:{Colors.Grey.Default};padding-top: 2px;margin-left:2px;")">
							@FocusImage?.UserDisplayName
						</MudText>
					</div>
					<div style="display: flex; align-items: center;">
						<MudStack style="text-align: center;gap:0px;margin-right:20px">
							<MudIconButton Icon="@Icons.Material.Filled.AddAlert" Style="padding:0px" Variant="Variant.Text" Color="@(subscribed.Any(x=>x.Item1 == FocusImage?.UserDisplayName) ? Color.Warning : Color.Default)" Size="Size.Medium" DisableElevation="true" OnClick="()=>Subscribe(FocusImage?.UserId)" />
							<MudText Typo="Typo.subtitle1"><span style="font-weight:100">@($"{(subscribed.Any(x => x.Item1 == FocusImage?.UserDisplayName) ? "已订阅" : "订阅")}")</span></MudText>
						</MudStack>
						<MudStack style="text-align: center;gap:0px;margin-right:20px">
							<MudIconButton Icon="@Icons.Material.Filled.StarBorder" Style="padding:0px" Variant="Variant.Text" Color="@(ILikeTemplates.Any(x => x.WatermarkId == FocusImage?.WatermarkId) ? Color.Warning : Color.Default)" Size="Size.Medium" DisableElevation="true" OnClick="PopupActionBar" />
							<MudText Typo="Typo.subtitle1"><span style="font-weight:100">@($"{(ILikeTemplates.Any(x => x.WatermarkId == FocusImage?.WatermarkId) ? "已收藏" : "收藏")}")</span></MudText>
						</MudStack>
						<MudStack style="text-align: center;gap:0px">
							<MudIconButton Icon="@Icons.Material.Filled.Download" Style="padding:0px" Variant="Variant.Text" Color="Color.Primary" Size="Size.Medium" DisableElevation="true" OnClick="()=>DownloadTemplate(FocusImage?.WatermarkId)" />
							<MudText Typo="Typo.subtitle1"><span style="font-weight:100">下载</span></MudText>
						</MudStack>

					</div>
				</div>

			}
			else if (FocusImageType == 'r')
			{

				<div style="display: flex; align-items: center; justify-content: space-between; margin-top:4px;">
					<MudText Class="dfm-card-name" Typo="Typo.subtitle1">
						@FocusImage?.Name
					</MudText>
					<div style="display: flex; align-items: center;">
						<span style="font-size: 10px;line-height: 8px;">已下载 @FocusImage?.DownloadTimes</span>
					</div>
				</div>
				<div style="display: flex; align-items: center; justify-content: space-between; margin-top:4px;">
					<div style="display: flex; align-items: center;">
						<MudIcon Icon="@Icons.Material.Filled.AccountCircle" Color="Color.Default" Size="Size.Small" />
						<MudText Typo="Typo.overline" Style="@($"color:{Colors.Grey.Default};padding-top: 2px;margin-left:2px;")">
							@FocusImage?.UserDisplayName
						</MudText>
					</div>
					<div style="display: flex; align-items: center;">
						<MudStack style="text-align: center;gap:0px;margin-right:20px">
							<MudIconButton Icon="@Icons.Material.Filled.StarBorder" Style="padding:0px" Variant="Variant.Text" Color="Color.Warning" Size="Size.Medium" DisableElevation="true" OnClick="PopupActionBar" />
							<MudText Typo="Typo.subtitle1"><span style="font-weight:100">取消收藏</span></MudText>
						</MudStack>
						<MudStack style="text-align: center;gap:0px">
							<MudIconButton Icon="@Icons.Material.Filled.Download" Style="padding:0px" Variant="Variant.Text" Color="Color.Primary" Size="Size.Medium" DisableElevation="true" OnClick="()=>DownloadTemplate(FocusImage?.WatermarkId)" />
							<MudText Typo="Typo.subtitle1"><span style="font-weight:100">下载</span></MudText>
						</MudStack>

					</div>
				</div>
			}
			else if (FocusImageType == 'd')
			{
				<div style="display: flex; align-items: center; justify-content: space-between; margin-top:4px;">
					<MudText Class="dfm-card-name" Typo="Typo.subtitle1">
						@FocusImage?.Name
					</MudText>
				</div>
				<div style="display: flex; align-items: center; justify-content: flex-end; margin-top:4px;">
					<div style="display: flex; align-items: center;">
						<MudStack style="text-align: center;gap:0px;margin-right:20px">
							<MudIconButton Icon="@Icons.Material.Filled.Delete" Style="padding:0px" Variant="Variant.Text" Color="Color.Default" Size="Size.Medium" DisableElevation="true" OnClick="PopupActionBar" />
							<MudText Typo="Typo.subtitle1"><span style="font-weight:100">删除</span></MudText>
						</MudStack>
						<MudStack style="text-align: center;gap:0px">

							<MudIconButton Icon="@Icons.Material.Filled.Image" Style="padding:0px" Variant="Variant.Text" Color="Color.Primary" Size="Size.Medium" DisableElevation="true" OnClick="()=> GeneratePhoto( downloadedTemplates.First(x=>x.WatermarkId == FocusImageId)) " />
							<MudText Typo="Typo.subtitle1"><span style="font-weight:100">使用模板</span></MudText>
						</MudStack>

					</div>
				</div>
			}
		</MudPaper>
	</MudOverlay>

</div>

<MudDrawer @bind-Open="@openDrawer" Width="100%" Height="100%" Anchor="Anchor.Bottom" Elevation="0" Variant="@DrawerVariant.Temporary" Color="Color.Default" Style="overflow:hidden;" @onclick="()=>openSave = false">
	<div style="height:40px;width:100%;top:0;left:0;z-index:999;">
		<MudToolBar Style="height:40px;padding-left:2px;box-shadow: 0 2px 12px 0 rgb(0 0 0 / 10%);">
			<MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowLeft" OnClick="()=> CloseDrawer()" />
			<MudIconButton Variant="Variant.Text" DisableElevation Icon="@Icons.Material.Filled.Save" Color="Color.Default" Style="margin-right: 10px; position: absolute; right: 10px;" OnClick="()=>openSave = true" />
			@if (SrcLoading)
			{
				<MudProgressCircular Color="Color.Secondary" Indeterminate="true" Style="height: 26px;width: 26px;position: absolute; left: calc(50% - 15px);" />
			}
			<MudIconButton Variant="Variant.Text" DisableElevation Icon="@Icons.Material.Filled.Refresh" Color="Color.Default" OnClick="RefreshEditImage" />
		</MudToolBar>
	</div>

	@if (CurrentImage != null && !string.IsNullOrEmpty(CurrentImage.Src))
	{
		<MudStack Spacing="2" Style="position:absolute;top:60px;left:20px;">
			<MudIconButton Icon="@Icons.Material.Filled.AutoAwesomeMotion" Style="width:30px" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small" OnClick="()=>_expanded = !_expanded" />
			<MudDivider Style="width:30px" />
			<MudCollapse Expanded="_expanded">
				<MudStack>
					<MudPaper Style="width:30px;height:30px;cursor:pointer;padding:3px 3px 3px 2px;" Elevation="25" @onclick="OpenFullExifInfo">
						<svg t="1711715777941" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2452" width="24" height="24"><path d="M332.799002 686.081014m-332.799002 0a332.799002 332.799002 0 1 0 665.598003 0 332.799002 332.799002 0 1 0-665.598003 0Z" fill="#CCE4F2" p-id="2453"></path><path d="M883.19735 1024h-639.99808A141.055577 141.055577 0 0 1 102.399693 883.200422v-742.397772A141.055577 141.055577 0 0 1 243.19927 0.003072h516.350451a89.087733 89.087733 0 0 1 63.231811 25.599923l189.695431 189.695431A38.399885 38.399885 0 0 1 1023.996928 243.202342v639.99808a141.055577 141.055577 0 0 1-140.799578 140.799578zM243.19927 76.802842A63.999808 63.999808 0 0 0 179.199462 140.80265v742.397772A63.999808 63.999808 0 0 0 243.19927 947.20023h639.99808a63.999808 63.999808 0 0 0 63.999808-63.999808V259.074295l-179.199462-179.199463a12.799962 12.799962 0 0 0-8.447975-3.07199z" fill="#434260" p-id="2454"></path><path d="M275.455174 399.105875H409.598771v29.695911h-98.559704v62.975811h82.943751v29.95191h-82.943751v72.959781h102.399693v30.207909h-137.983586zM499.710501 508.417547l-60.671818-109.311672h39.679881l27.391918 52.735841c5.631983 10.495969 10.495969 20.479939 17.151948 34.047898h1.535996c5.887982-13.567959 10.239969-23.551929 15.359954-34.047898l25.599923-52.735841h37.375888l-60.671818 111.103666 65.023805 114.943656h-38.911884l-29.695911-56.063832-18.687944-36.86389c-6.399981 13.823959-12.031964 25.599923-17.407947 36.86389l-28.927914 56.063832H435.198694zM642.814072 399.105875h35.583893v226.047322h-35.583893zM737.789787 399.105875H870.397389v29.695911h-97.023709v69.119792h83.45575v29.695911h-83.45575v97.279708h-35.583893z" fill="#434260" p-id="2455"></path></svg>
					</MudPaper>
					<MudFileUpload T="IBrowserFile" FilesChanged="SelectSourceImageExif" Accept=".ARW, .jpg" Style="width:30px">
						<ButtonTemplate>
							<MudIconButton HtmlTag="label" for="@context.Id" Icon="@Icons.Material.Filled.FindReplace" Color="Color.Info" Variant="Variant.Filled" Size="Size.Small" />
						</ButtonTemplate>
					</MudFileUpload>
					@if (LogoCacheDic.TryGetValue(CurrentImage?.ID ?? "", out Dictionary<string, string> dic))
					{
						foreach (var item in dic)
						{
							@if (LogoBase64.TryGetValue(item.Key, out string src))
							{
								<MudPaper Elevation="25" Style="height:30px;width:30px;">
									<MudImage Style="height:100%;width:100%;cursor:pointer;" ObjectFit="ObjectFit.Contain" Src="@src" @onclick="()=>ReplaceLogo(item.Key)" />
								</MudPaper>

							}
						}
					}
					@foreach (var i in CurrentImage!.Canvas.Children)
					{
						foreach (var wmt in i.Controls.Where(x => x is WMText).Cast<WMText>())
						{
							<MudPaper Elevation="25" Class="expandable" @onclick="()=>OpenExifDialog(wmt)">
								@(string.Join(" ", wmt.Exifs.Select(x => x.Prefix + x.Value + x.Suffix)))
							</MudPaper>
						}
						foreach (var ctn in i.Controls.Where(x => x is WMContainer).Cast<WMContainer>())
						{
							foreach (var cwmt in ctn.Controls.Where(z => z is WMText).Cast<WMText>())
							{
								<MudPaper Elevation="25" Class="expandable" @onclick="()=>OpenExifDialog(cwmt)">
									@(string.Join(" ", cwmt.Exifs.Select(x => x.Prefix + x.Value + x.Suffix)))
								</MudPaper>
							}
						}
					}

				</MudStack>
			</MudCollapse>
		</MudStack>
		<MudCard style="padding:16px;background:#E5E5E5;height:50%" Elevation="0">
			<MudImage ObjectFit="@ObjectFit.Contain" Src="@CurrentImage.Src" Elevation="0" Style="width:100%;height:100%" />
		</MudCard>

		<Design @ref="design" CurrentCanvas="CurrentImage.Canvas" RefreshCallback="RefreshEditImage" />
	}
</MudDrawer>


<MudDrawer @bind-Open="@openSave" Width="100%" Anchor="Anchor.Bottom" Elevation="15" Variant="@DrawerVariant.Temporary" Color="Color.Default">
	<MudCard Elevation="0">
		<MudCardHeader>
			<CardHeaderContent>
				<MudText></MudText>
			</CardHeaderContent>
			<CardHeaderActions>
				<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="Export">保存</MudButton>
			</CardHeaderActions>
		</MudCardHeader>
		<MudCardContent>
			<MudForm>
				<MudSelect @bind-Value="@Global.Resolution" T="string" Label="分辨率" AnchorOrigin="Origin.BottomCenter">
					<MudSelectItem Value="@("default")">原图</MudSelectItem>
					<MudSelectItem Value="@("1080")">1080P</MudSelectItem>
					<MudSelectItem Value="@("2160")">4K</MudSelectItem>
				</MudSelect>
				<MudSelect @bind-Value="@Global.Quality" T="int" Label="图片质量" AnchorOrigin="Origin.BottomCenter">
					<MudSelectItem Value="@(100)">原图</MudSelectItem>
					<MudSelectItem Value="@(85)">高</MudSelectItem>
					<MudSelectItem Value="@(70)">中</MudSelectItem>
				</MudSelect>
				<MudTextField Label="输出目录" Value="@("Pictures/DaVinciFrameMaster")" Variant="Variant.Text" ReadOnly="true" Margin="Margin.Dense" />
			</MudForm>
		</MudCardContent>
	</MudCard>
</MudDrawer>



@code {
	[Inject]
	private IDialogService DialogService { get; set; }
	WMThickness BorderThickness = new WMThickness();
	bool SrcLoading = false;
	bool ShowUserInfo = false;
	bool openDrawer = false;
	bool openSave = false;
	private Design design;
	int activeTab = 1;
	int tb1_t1 = 1;
	int tb2_t2 = 1;
	bool ForceUpdate = false;
	bool FocusImageShow = false;
	string FocusImageSrc = "";
	string FocusImageId = "";
	char FocusImageType = ' ';
	bool firstClick2Panel = true;
	bool loading_down = false;
	bool loadMore = false;
	bool _expanded = false;
	Dictionary<string, Dictionary<string, string>> LogoCacheDic = new();
	ConcurrentDictionary<string, string> LogoBase64 = new();
	List<WMZipedTemplate> ZipedTemplates = new List<WMZipedTemplate>();
	List<WMZipedTemplate> hottest = new();
	List<WMZipedTemplate> newest = new();
	List<WMZipedTemplate> splits = new();
	List<Tuple<string, List<WMZipedTemplate>>> subscribed = new();
	List<WMZipedTemplate> downloadedTemplates = new List<WMZipedTemplate>();
	List<WMZipedTemplate> ILikeTemplates = new();
	int start = 1;
	WMZipedTemplate CurrentTemplate;
	WMTemplateList CurrentImage;
	List<WMTemplateList> Images = new List<WMTemplateList>();
	WMZipedTemplate FocusImage;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			await Global.InitConfig();
			APIHelper helper = new APIHelper();
			var isOutOfDate = await Watermark.Shared.Models.ClientInstance.IsOutOfDate();
			if (isOutOfDate)
			{
				ForceUpdate = true;
				return;
			}

			Global.DeviceType = Shared.Enums.DeviceType.Andorid;
			await LoadTemplates();
			await LoadCollectTemplate();
			await helper.DownloadLogoes();

			await helper.PageVisitRecord(ProgramPage.MyTemplate, Platform.Andorid);
		}
		catch (Exception ex)
		{
			ClientInstance.ShowMsg(Snackbar, ex.Message, Severity.Error);
		}
	}

	async void ClickImage(WMTemplateList image)
	{
		CurrentImage = image;
		SrcLoading = true;
		var t = Task.Run(() =>
		{
			WatermarkHelper helper = new WatermarkHelper();
			CurrentImage.Canvas.Path = CurrentImage.Path;
			var ziped = new WMZipedTemplate
				{
					Bitmap = image.Bitmap,
					WatermarkId = image.ID,
					WMCanvas = CurrentImage.Canvas,
				};
			return helper.Generation(CurrentImage.Canvas, ziped, true);
		});

		CurrentImage.Src = await t;
		SrcLoading = false;
		StateHasChanged();
	}
	async void GeneratePhoto(WMZipedTemplate template)
	{
		FocusImageShow = false;
		if (template.CanvasType == CanvasType.Normal) await OpenPhoto(template);
		else await SelectSplitPhoto(template);
	}
	async Task	 OpenPhoto(WMZipedTemplate template)
	{
		try
		{
			var result = await MediaPicker.Default.PickPhotoAsync(new MediaPickerOptions
				{
					Title = "选择图片"
				});
			if (result is null) return;
			Global.CheckImageExtension(result.FullPath);
			MainLoading.Message = "正在生成图片...";
			MainLoading.Show = true;
			StateHasChanged();
			WMCanvas canvas = new WMCanvas();
			// var sm = await result.OpenReadAsync();
			// using var ms = new MemoryStream();
			// sm.Seek(0, SeekOrigin.Begin);
			// await sm.CopyToAsync(ms);
			canvas.Exif = await Task.Run(() =>
			{
				//var arr = ms.ToArray();
				return ExifHelper.ReadImage(result.FullPath);
			});

			Images = new List<WMTemplateList>();
			Dictionary<string, string> dic = new Dictionary<string, string>();
			if (!Directory.Exists(Global.AppPath.ThumbnailFolder))
			{
				Directory.CreateDirectory(Global.AppPath.ThumbnailFolder);
			}

			var thumbnail = Global.AppPath.ThumbnailFolder + result.FileName;
			await Global.WriteThumbnailImageAsync(result.FullPath, thumbnail);

			canvas.Path = result.FullPath;
			var tl = new WMTemplateList
				{
					Canvas = canvas,
					ID = canvas.ID,
					Path = result.FullPath
				};
			Images.Add(tl);
			CurrentImage = tl;
			await ChangeTemplate(template);
			MainLoading.Show = false;
			StateHasChanged();
		}
		catch (Exception ex)
		{
			ClientInstance.ShowMsg(Snackbar, ex.Message, Severity.Error);
		}
	}

	async Task ChangeTemplate(WMZipedTemplate template)
	{
		CurrentTemplate = template;
		if (CurrentImage == null) return;
		await Task.Run(() =>
		{
			var cvs = Global.ReadConfig(Global.CanvasSerialize(template.WMCanvas));
			cvs.Exif = CurrentImage.Canvas.Exif;
			CurrentImage.Canvas = cvs;
			WatermarkHelper helper = new WatermarkHelper();
			cvs.Path = CurrentImage.Path;
			template.Bitmap = CurrentImage.Bitmap;
			CurrentImage.Src = helper.Generation(cvs, null, true, false);
		});

		await Task.Run(() => design?.SetCanvas(CurrentImage.Canvas));

		InitLogoCacheDic(CurrentImage.ID, new WMTemplateList { Canvas = CurrentImage.Canvas, ID = CurrentImage.Canvas.ID });
		openDrawer = true; 
		_expanded = false;
	}


	async Task SelectSplitPhoto(WMZipedTemplate template)
	{
		try
		{
			var result = await FilePicker.PickMultipleAsync(new PickOptions
				{
					FileTypes = FilePickerFileType.Jpeg
				});


			MainLoading.Message = "正在生成图片...";
			MainLoading.Show = true;
			StateHasChanged();
			var cvs = Global.ReadConfig(Global.CanvasSerialize(template.WMCanvas));
			int c = 0;
			foreach (var f in result)
			{
				cvs.Children[c++].Path = f.FullPath;
			}
			var helper = new WatermarkHelper();
			CurrentImage = new();
			CurrentImage.Canvas = cvs;
			CurrentImage.ID = CurrentImage.Canvas.ID;
			var src = await helper.GenerationAsync(cvs, null, true, false);
			CurrentImage.Src = src;
			Images = [CurrentImage];
			InitLogoCacheDic(CurrentImage.ID, CurrentImage);
			MainLoading.Show = false;
			openDrawer = true;
			_expanded = false;
			StateHasChanged();
		}
		catch (Exception ex)
		{
			ClientInstance.ShowMsg(Snackbar, ex.Message, Severity.Error);
		}
	}


	async void Export()
	{
		var helper = new WatermarkHelper();
		MainLoading.Show = true;
		foreach (var item in Images)
		{
			var idx = Images.IndexOf(item) + 1;
			MainLoading.Message = $"正在导出图片，一共{Images.Count}张，目前第{idx}张";
			MainLoading.Value = idx * 100.0 / Images.Count;
			var rs = await helper.GenerationAsync(item.Canvas, null, false, false);
#if ANDROID
	var b64 = rs.Replace("data:image/jpeg;base64,", "");
	var bt = Convert.FromBase64String(b64);
	var fn = Path.GetFileNameWithoutExtension(item.Canvas.Path);
	Watermark.Andorid.SavePictureService.SavePicture(bt, "DFX_" + fn);
#endif
			//item.Canvas.Path = item.Path;
			//await JSRuntime.InvokeVoidAsync("saveAsFile", $"{item.ID}.jpg", Convert.FromBase64String(item.Src.Split(',')[1]));
			StateHasChanged();
		}
		MainLoading.Value = 100;
		await Task.Delay(200);
		MainLoading.Show = false;
		Watermark.Shared.Models.ClientInstance.ShowMsg(Snackbar, "保存成功。", Severity.Success);
		openSave = false;
		StateHasChanged();
	}


	async Task LoadTemplatesMarket()
	{
		loadMore = true;
		StateHasChanged();
		var helper = new APIHelper();
		var allTemplates = (await helper.GetWatermarks("", 1, 999)).Where(x => x.Visible);
		var recommend = allTemplates.Where(x => x.Recommend);
		hottest = allTemplates.Where(x => !x.Recommend && x.CanvasType == CanvasType.Normal).Take(12).ToList();
		newest = allTemplates.OrderByDescending(x => x.DateTimeCreated).Where(x => !x.Recommend && x.CanvasType == CanvasType.Normal).ToList();
		splits = allTemplates.Where(x => x.CanvasType == CanvasType.Split).ToList();
		ZipedTemplates = recommend.UnionBy(hottest, x => x.WatermarkId).UnionBy(newest, x => x.WatermarkId).UnionBy(splits, x => x.WatermarkId).ToList();
		var subUser = await IntiSubscribedUserList();
		subscribed = new List<Tuple<string, List<WMZipedTemplate>>>();
		foreach (var su in subUser)
		{
			var tp = ZipedTemplates.Where(x => x.UserId == su).ToList();
			if (tp.Count > 0)
			{
				var tup = Tuple.Create(tp[0].UserDisplayName, tp);
				subscribed.Add(tup);
			}
		}

		subscribed.Add(Tuple.Create("热门", hottest.Where(x => !subUser.Contains(x.UserId)).ToList()));
		subscribed.Add(Tuple.Create("拼图", splits));

		subscribed.Add(Tuple.Create("最新", newest.Where(x => !subUser.Contains(x.UserId)).Take(start * 50).ToList()));
		ZipedTemplates.ForEach(x => x.Src = Global.GetSrc(x.WatermarkId));
		loadMore = false;
		StateHasChanged();
	}

	async Task LoadCollectTemplate()
	{
		var api = new APIHelper();
		var getILike = await api.GetILike(Global.CurrentUser?.ID ?? "");
		if (getILike != null && getILike.success && getILike.data != null)
		{
			ILikeTemplates = getILike.data;
			ILikeTemplates.ForEach(x => x.Src = Global.GetSrc(x.WatermarkId));
		}

	}

	async Task LoadTemplates()
	{
		loading_down = true;
		StateHasChanged();
		var helper = new APIHelper();
		if (!Directory.Exists(Global.AppPath.TemplatesFolder))
		{
			Directory.CreateDirectory(Global.AppPath.TemplatesFolder);
		}

		try
		{
			List<Task> mission = new List<Task>();
			var basePath = Global.AppPath.TemplatesFolder;
			WatermarkHelper watermarkHelper = new WatermarkHelper();
			var folder = new DirectoryInfo(basePath);
			foreach (var tFolder in folder.GetDirectories())
			{
				WMZipedTemplate dirct = new();
				dirct.WatermarkId = tFolder.Name;
				var configPath = basePath + dirct.WatermarkId + System.IO.Path.DirectorySeparatorChar + "config.json";
				if (System.IO.File.Exists(configPath))
				{
					var content = File.ReadAllText(configPath);
					dirct.WMCanvas = Global.ReadConfig(content);
					dirct.WMCanvas.Exif = ExifHelper.DefaultMeta;
					dirct.CanvasType = dirct.WMCanvas.CanvasType;
					downloadedTemplates.Add(dirct);
				}
			}
			foreach (var tp in downloadedTemplates)
			{
				await Global.InitFonts([tp.WMCanvas]);
				var t = Task.Run(() =>
				{
					tp.Src = watermarkHelper.Generation(tp.WMCanvas, null, true, false);
				});
				mission.Add(t);
			}
			await Task.WhenAll(mission);
			loading_down = false;
			StateHasChanged();
		}
		catch (Exception ex)
		{
			Watermark.Shared.Models.ClientInstance.ShowMsg(Snackbar, ex.Message, Severity.Error);
		}
	}

	async Task<WMZipedTemplate> LoadSingleTemplates(string watermarkId)
	{
		var helper = new APIHelper();
		if (!Directory.Exists(Global.AppPath.TemplatesFolder))
		{
			Directory.CreateDirectory(Global.AppPath.TemplatesFolder);
		}

		try
		{
			WatermarkHelper watermarkHelper = new WatermarkHelper();
			WMZipedTemplate dirct = new();
			dirct.WatermarkId = watermarkId;
			var configPath = Global.AppPath.TemplatesFolder + watermarkId + System.IO.Path.DirectorySeparatorChar + "config.json";
			if (!System.IO.File.Exists(configPath)) return dirct;
			var canvas = await Task.Run(() =>
			{
				var content = File.ReadAllText(configPath);
				return Global.ReadConfig(content);
			});
			dirct.WMCanvas = canvas;
			dirct.WMCanvas.Exif = ExifHelper.DefaultMeta;
			dirct.CanvasType = dirct.WMCanvas.CanvasType;
			await Global.InitFonts([canvas]);
			dirct.Src = await watermarkHelper.GenerationAsync(canvas, null, true, false);
			return dirct;
		}
		catch (Exception ex)
		{
			Watermark.Shared.Models.ClientInstance.ShowMsg(Snackbar, ex.Message, Severity.Error);
			return new WMZipedTemplate();
		}
	}

	async void LoadMore()
	{
		MainLoading.Show = true;
		MainLoading.Message = "正在加载模板...";
		var helper = new APIHelper();
		var more = await helper.GetWatermarks("", ++start, 10);
		List<Task> tasks1 = new List<Task>();
		foreach (var t in more)
		{
			var task = helper.ExtractZip(t.WatermarkId).ContinueWith(item =>
			{
				t.WMCanvas = item.Result.WMCanvas;
				t.Images = item.Result.Images;
				t.Fonts = item.Result.Fonts;
				t.Bitmap = item.Result.Bitmap;
			});
			tasks1.Add(task);
		}
		await Task.WhenAll(tasks1);
		var whelper = new WatermarkHelper();
		List<Task> tasks = new List<Task>();
		foreach (var t in more)
		{
			var c = Task.Run(() =>
			{
				t.Src = whelper.Generation(t.WMCanvas, t, true);
				return t.Src;
			});

			tasks.Add(c);
		}
		await Task.WhenAll(tasks);
		ZipedTemplates.AddRange(more);
		MainLoading.Show = false;
		StateHasChanged();
	}

	public async void RefreshEditImage()
	{
		MainLoading.Message = "正在生成图片...";
		MainLoading.Show = true;
		var cvs = design.GetImageSrc();
		var whelper = new WatermarkHelper();
		CurrentImage.Canvas = cvs;
		CurrentImage.Src = await whelper.GenerationAsync(cvs, null, true, false);
		MainLoading.Show = false;
		StateHasChanged();
	}

	async Task<List<string>> IntiSubscribedUserList()
	{
		if (Global.CurrentUser == null || string.IsNullOrEmpty(Global.CurrentUser.ID)) return [];
		var helper = new APIHelper();
		var result = await helper.GetISubscribed(Global.CurrentUser.ID);
		if (result.success)
		{
			return result.data;
		}
		else
		{
			ClientInstance.ShowMsg(Snackbar, result.message?.content ?? "", Severity.Error);
		}
		return [];
	}

	async void Subscribe(string userId)
	{
		if (Global.CurrentUser == null || string.IsNullOrEmpty(Global.CurrentUser.ID)) return;
		var helper = new APIHelper();
		var r = await helper.SubscribeUser(Global.CurrentUser.ID, userId);
		await LoadTemplatesMarket();
	}

	void OpenFocus(char t, WMZipedTemplate zip, bool b)
	{
		FocusImage = zip;
		FocusImageType = t;
		FocusImageId = zip.WatermarkId;
		FocusImageSrc = zip.Src;
		FocusImageShow = b;
		StateHasChanged();
	}

	async void PopupActionBar()
	{
		//已下载
		if (FocusImageType == 'd')
		{
			var p = Global.AppPath.TemplatesFolder + FocusImageId + Path.DirectorySeparatorChar;
			if (Directory.Exists(p))
			{
				var _ = Task.Run(() =>
				{
					Directory.Delete(p, true);
					var t = downloadedTemplates.FirstOrDefault(x => x.WatermarkId == FocusImageId);
					if (t != null)
					{
						downloadedTemplates.Remove(t);
					}
					InvokeAsync(StateHasChanged);
					ClientInstance.ShowMsg(Snackbar, "删除成功", Severity.Success);
				});

			}
		}
		else if (FocusImageType == 'r')
		{
			if (Global.CurrentUser != null && !string.IsNullOrEmpty(Global.CurrentUser.ID))
			{
				var helper = new APIHelper();
				helper.DeleteILike(Global.CurrentUser.ID, FocusImageId);
				var item = ILikeTemplates.FirstOrDefault(x => x.WatermarkId == FocusImageId);
				if (item != null)
				{
					ILikeTemplates.Remove(item);
					ClientInstance.ShowMsg(Snackbar, "取消收藏成功", Severity.Success);
				}
			}
		}
		else if (FocusImageType == 'a')
		{
			if (Global.CurrentUser != null && !string.IsNullOrEmpty(Global.CurrentUser.ID))
			{
				var helper = new APIHelper();
				var r = await helper.AddILike(Global.CurrentUser.ID, FocusImageId);
				var item = ZipedTemplates.FirstOrDefault(x => x.WatermarkId == FocusImageId);
				if (item != null && !ILikeTemplates.Any(x => x.WatermarkId == item.WatermarkId))
				{
					ILikeTemplates.Add(item);
					ClientInstance.ShowMsg(Snackbar, "收藏成功", Severity.Success);
				}
			}
		}
		FocusImageShow = false;
		StateHasChanged();

	}

	async void DownloadTemplate(string watermarkId)
	{
		var action = new Action(async () =>
		{
			var api = new APIHelper();
			var w = ZipedTemplates.FirstOrDefault(x => x.WatermarkId == watermarkId);
			var r = await api.Download(watermarkId, w?.UserId ?? "");
			if (r)
			{
				FocusImageShow = false;
				ClientInstance.ShowMsg(Snackbar, "下载完成", Severity.Success);
				var dir = await LoadSingleTemplates(watermarkId);
				if (!downloadedTemplates.Any(x => x.WatermarkId == dir.WatermarkId)) downloadedTemplates.Insert(0, dir);
				StateHasChanged();
			}
		});
		if (Global.CurrentUser == null || string.IsNullOrEmpty(Global.CurrentUser.ID))
		{
			FocusImageShow = false;
			var rst = DialogService.Show<LoginDialog>("");
			var dialogResult = await rst.Result;
			if (!dialogResult.Canceled && dialogResult.Data.Equals(true))
			{
				FocusImageShow = false;
				action.Invoke();
			}
			return;
		}
		var p = Global.AppPath.TemplatesFolder + watermarkId;
		if (Directory.Exists(p))
		{
			FocusImageShow = false;
			bool? rtl = await DialogService.ShowMessageBox("确认覆盖", (MarkupString)"此模板已存在，确定覆盖？", yesText: "确定", cancelText: "取消");
			if (rtl == true)
			{
				Directory.Delete(p, true);
				action.Invoke();
			}
		}
		else
		{
			action.Invoke();
		}
	}

	void ToSecondPanel()
	{
		activeTab = 2;
		if (firstClick2Panel)
		{
			firstClick2Panel = false;
			var _ = LoadTemplatesMarket();
			var api = new APIHelper();
			var __ = api.PageVisitRecord(ProgramPage.Market, Platform.Andorid);
		}
	}

	async void SelectSourceImageExif(IBrowserFile file)
	{
		MemoryStream ms = new MemoryStream();
		await file.OpenReadStream(file.Size).CopyToAsync(ms);
		CurrentImage.Canvas.Exif = ExifHelper.ReadImage(ms.ToArray());
	}

	async void OpenFullExifInfo()
	{
		var parameters = new DialogParameters<ExifInfo>();
		parameters.Add(x => x.Exifs, ExifHelper.ReadAllExif(CurrentImage.Canvas.Exif));
		var option = new DialogOptions() { NoHeader = true, MaxWidth = MaxWidth.Medium };
		var rst = DialogService.Show<ExifInfo>("", parameters, option);
		var dialogResult = await rst.Result;
	}

	async void OpenExifDialog(WMText mText)
	{
		var parameters = new DialogParameters<ExifConfig>();
		parameters.Add(x => x.Exifs, mText.Exifs);
		var option = new DialogOptions() { NoHeader = true, MaxWidth = MaxWidth.Medium };
		var rst = DialogService.Show<ExifConfig>("", parameters, option);
		var dialogResult = await rst.Result;
		if (!dialogResult.Canceled)
		{
			mText.Exifs = (List<WMExifConfigInfo>)dialogResult.Data;
			RefreshEditImage();
			StateHasChanged();
		}
	}

	async void ReplaceLogo(string sourceId)
	{
		var dialog = DialogService.Show<LogoDialog>(string.Empty, new DialogOptions() { MaxWidth = MaxWidth.ExtraLarge, NoHeader = true });
		var result = await dialog.Result;
		if (!result.Canceled && result.Data is KeyValuePair<string, string> d)
		{
			var p = Path.Combine(Global.AppPath.LogoesFolder, d.Key);
			ChangeLogo(sourceId, p);
		}
	}

	async void ChangeLogo(string sourceId, string logoPath)
	{
		SrcLoading = true;
		StateHasChanged();
		foreach (var c1 in CurrentImage.Canvas.Children)
		{
			foreach (var cc1 in c1.Controls)
			{
				if (cc1 is WMLogo logo && logo.ID == sourceId)
				{
					logo.AutoSetLogo = false;
					logo.Path = logoPath;
					break;
				}
				else if (cc1 is WMContainer wc)
				{
					foreach (var wcc in wc.Controls)
					{
						if (wcc is WMLogo wcLogo && wcLogo.ID == sourceId)
						{
							wcLogo.AutoSetLogo = false;
							wcLogo.Path = logoPath;
							break;
						}
					}
				}
			}
		}
		var api = new WatermarkHelper();
		CurrentImage.Src = await api.GenerationAsync(CurrentImage.Canvas, null, true);
		SrcLoading = false;
		StateHasChanged();
	}

	void InitLogoCacheDic(string imgId, WMTemplateList template)
	{
		var logoes = new List<WMLogo>();
		foreach (var c1 in template.Canvas.Children)
		{
			foreach (var cc1 in c1.Controls)
			{
				if (cc1 is WMLogo logo) logoes.Add(logo);
				else if (cc1 is WMContainer wc)
				{
					foreach (var wcc in wc.Controls)
					{
						if (wcc is WMLogo wcLogo) logoes.Add(wcLogo);
					}
				}
			}
		}

		var dic = new Dictionary<string, string>();
		foreach (var logo in logoes)
		{
			dic[logo.ID] = logo.Path;
			var target = logo.Path;
			if (!File.Exists(target))
			{
				target = Global.AppPath.TemplatesFolder + template.ID + Path.DirectorySeparatorChar + logo.Path;
			}
			if (File.Exists(target))
			{
				Global.ImageFile2Base64(LogoBase64, target, logo.ID);
			}
		}
		LogoCacheDic[imgId] = dic;

	}

	void CloseDrawer()
	{
		openDrawer = false;
		Vibration.Default.Vibrate(50);
	}


	#region class

	class MainLoading
	{
		public static bool Show { get; set; } = false;
		public static double Value { get; set; }
		public static string Message { get; set; } = "正在加载模板...";
	}

	#endregion
}