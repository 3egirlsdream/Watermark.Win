@page "/mac"
@using System.IO
@using System.Collections.Concurrent
@using Watermark.Andorid.BlazorPages
@using Watermark.Andorid.Models
@using Watermark.Shared.Enums
@using Watermark.Win.Models
@using Watermark.Shared.Models
@using LukeMauiFilePicker
@using Watermark.Razor
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@inject IDialogService DialogService
@inject IWMWatermarkHelper helper
@inject IFilePickerService picker
<MudThemeProvider IsDarkMode="@Global.DARK_MODE" />
<MudDialogProvider />
<MudSnackbarProvider />
<div Style="background:#F9FAFC;height:100vh;width:100vw;overflow-x:hidden">
    <div style="height:40px;position:fixed;width:100%;top:0;left:0;z-index:999;background:#FFF;">
        <MudToolBar Style="height:40px;padding-left:2px;box-shadow: 0 2px 12px 0 rgb(0 0 0 / 10%);">
            <MudMenu Label="文件" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopCenter" Color="Color.Default" Style="left:0" ActivationEvent="MouseEvent.MouseOver">
                <MudMenuItem Icon="@Icons.Material.Filled.Image" OnClick="ImportLocalImages">导入图片</MudMenuItem>
                <MudMenuItem Icon="@Icons.Material.Filled.LogoDev" OnClick="ImportLogoes">图标库</MudMenuItem>
                <MudMenuItem Icon="@Icons.Material.Filled.ImportExport" OnClick="OpenExport">导出</MudMenuItem>
                <MudDivider />
                <MudMenuItem Icon="@Icons.Material.Filled.ExitToApp" OnClick="App.Current.Quit">退出</MudMenuItem>
            </MudMenu>
            <MudMenu Label="模板" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopCenter" Color="Color.Default" Style="left:0" ActivationEvent="MouseEvent.MouseOver">
                <MudMenuItem Icon="@Icons.Material.Filled.TempleHindu" OnClick="OpenMyTemplates">我的模板</MudMenuItem>
                <MudMenuItem Icon="@Icons.Material.Filled.Create" OnClick="(()=>CreateTemplate.DialogVisible = true)">创建模板</MudMenuItem>
                <MudMenuItem Icon="@Icons.Material.Filled.Shop" OnClick="OpenTemplateMarket">模板市场</MudMenuItem>
            </MudMenu>
            <MudMenu Label="关于" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopCenter" Color="Color.Default" Style="left:0" ActivationEvent="MouseEvent.MouseOver">
                <MudMenuItem Icon="@Icons.Material.Filled.Settings" OnClick="ClientInstance.OpenSetting">设置</MudMenuItem>
                <MudMenuItem Icon="@Icons.Material.Filled.Login" OnClick="OpenSignUpDialog">注册账号</MudMenuItem>
            </MudMenu>
            <MudMenu Label="交流群" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopCenter" Color="Color.Default" Style="left:0" ActivationEvent="MouseEvent.MouseOver">
                <MudMenuItem> 交流群1：866034817 (已满) </MudMenuItem>
                <MudMenuItem> 交流群2：836325187 </MudMenuItem>
            </MudMenu>
            <MudMenu Label="更多" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopCenter" Color="Color.Default" Style="left:0" ActivationEvent="MouseEvent.MouseOver">
                <MudMenuItem Icon="@Icons.Material.Filled.Web" OnClick="@(()=>OpenLink("http://www.thankful.top"))">网页版</MudMenuItem>
                <MudMenuItem Icon="@Icons.Material.Filled.Star" OnClick="@(()=>OpenLink("https://github.com/3egirlsdream/Watermark.Win"))">点个⭐</MudMenuItem>
                <MudMenuItem Icon="@Icons.Material.Filled.BugReport" OnClick="@(()=>OpenLink("https://github.com/3egirlsdream/Watermark.Win/issues"))">提交反馈</MudMenuItem>
            </MudMenu>
            <MudMenu Label="赞助" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopCenter" Color="Color.Default" Style="left:0" ActivationEvent="MouseEvent.MouseOver">
                <MudMenuItem>  <MudImage Src="http://cdn.thankful.top/wx.jpg" ObjectFit="ObjectFit.Contain" Width="200" /></MudMenuItem>
            </MudMenu>
            <MudMenu Label="安卓版" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopCenter" Color="Color.Default" Style="left:0" ActivationEvent="MouseEvent.MouseOver">
                <MudMenuItem>  <MudImage Src="https://cdn.thankful.top/andorid.png" ObjectFit="ObjectFit.Contain" Width="200" /></MudMenuItem>
            </MudMenu>
            <MudSpacer />
            <MudIcon Icon="@Icons.Material.Filled.AccountCircle" Color="Color.Inherit" Style="cursor:pointer" @onclick="()=> ShowUserInfo = !ShowUserInfo" />
            @if (Global.CurrentUser != null && !string.IsNullOrEmpty(Global.CurrentUser.DISPLAY_NAME))
            {
                <MudText Typo="Typo.overline" Style="margin: 7px 0px 5px 5px;">@Global.CurrentUser.DISPLAY_NAME</MudText>
            }

            <MudPopover Style="width:300px;" OverflowBehavior="OverflowBehavior.FlipNever" Open="@ShowUserInfo" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" Class="pa-4">
                @if (Global.CurrentUser != null && !string.IsNullOrEmpty(Global.CurrentUser.USER_NAME))
                {
                    <div style="height:50px">
                        @if (!string.IsNullOrEmpty(Global.CurrentUser.IMG))
                        {
                            <MudImage Width="50" Height="50" Src="@Global.CurrentUser.IMG" ObjectFit="ObjectFit.Contain" Style="float:left;" />
                        }
                        else
                        {
                            <MudIcon Icon="@Icons.Material.Filled.AccountCircle" Color="Color.Primary" Size="Size.Large" Style="float:left;" />
                        }
                        <MudStack Row Style="align-items: center;">
                            <MudText Typo="Typo.body1" Class="px-4" Color="@(Global.CurrentUser.IsVIP ? Color.Warning : Color.Secondary)" Align="Align.Start" Style="display:flex;align-items:center;">
                                @if (Global.CurrentUser.IsVIP)
                                {
                                    <Watermark.Razor.Parts.IconVip />
                                }
                                else
                                {
                                    <Watermark.Razor.Parts.IconVipExpired />
                                }
                                @Global.CurrentUser.DISPLAY_NAME
                            </MudText>
                        </MudStack>
                        <MudText Typo="Typo.overline" Class="px-4" Color="Color.Inherit" Style="margin-left: 0px;">@Global.CurrentUser.USER_NAME</MudText>
                    </div>
                    <MudText Typo="Typo.body2" Class="px-4 py-1" Style="clear:both;">🤩🤗🥵</MudText>

                    <div Style="display:flex;align-items:center;line-height: 32px;" Class="px-4 py-1">
                        硬币：
                        <Watermark.Razor.Parts.IconCoin />
                        <MudText Typo="Typo.body2" Color="Color.Inherit" Style="line-height: 32px;">
                            @Global.CurrentUser.COINS
                        </MudText>
                    </div>

                    <MudText Typo="Typo.body2" Class="px-4 py-1">@(Global.CurrentUser.IsVIP ? "会员到期时间：" + Global.CurrentUser.EXPIRE_DATE : "会员已过期")</MudText>
                    <MudButton Variant="Variant.Text" Style="margin-left:200px;" OnClick="()=> { Global.CurrentUser = new WMLoginChildModel();}">退出</MudButton>
                }
                else
                {
                    <MudSkeleton />
                    <MudSkeleton SkeletonType="SkeletonType.Circle" Width="50px" Height="50px" />
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="200px" Height="110px" />
                    <MudStack Row Style="margin-left:120px;" Class="mt-5">
                        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="OpenLoginDialog">登录</MudButton>
                        <MudButton Variant="Variant.Text" OnClick="OpenSignUpDialog"> 注册</MudButton>
                    </MudStack>
                }
            </MudPopover>
        </MudToolBar>
    </div>
    <div Style="height:100%;width:100vw;display: flex;">

        <div style="width: 300px; height: 100%; padding: 0px; background: #F9FAFC;">
            <MudTabs Elevation="0" Rounded="false" ApplyEffectsToContainer="true" PanelClass="panel-class" MinimumTabWidth="150px" Style="margin-top: 40px;height: calc(100% - 40px);" AlwaysShowScrollButtons="false">
                <MudTabPanel Text="模板" Style="height:100%">
                    <MudPaper Width="300px" Elevation="0" Style="padding: 0px 10px;height: 100%; overflow-y:auto;overflow-x:hidden;">
                        <MudList Clickable="true">
                            <MudTreeView T="string" Hover="true">
                                @if (downloadedTemplates == null || downloadedTemplates.Count == 0)
                                {
                                    <MudButton Variant="Variant.Outlined" Style="margin-left: calc(50% - 65px);margin-top:30%;"
                                               EndIcon="@Icons.Material.Filled.Download"
                                               Color="Color.Primary" OnClick="OpenTemplateMarket">
                                        下载模板
                                    </MudButton>
                                }
                                else
                                {
                                    @foreach (var pair in downloadedTemplates.Where(x => x.CanvasType == Shared.Enums.CanvasType.Normal).OrderBy(x => x.Name))
                                    {
                                        <MudTreeViewItem Value="@pair.Name" @onclick="()=>ChangeTemplate(pair)" Style="cursor:pointer; ">
                                            <Content>
                                                <MudImage Width="40" Height="40" ObjectFit="ObjectFit.Contain" Src="@pair.Src" />
                                                <MudText Class="mx-5">@pair.Name</MudText>
                                            </Content>
                                        </MudTreeViewItem>
                                    }
                                }
                            </MudTreeView>
                        </MudList>
                    </MudPaper>
                </MudTabPanel>
                <MudTabPanel Text="拼图">
                    <MudPaper Width="300px" Elevation="0" Style="padding: 0px 10px;height: 100%; overflow-y:auto;overflow-x:hidden;">
                        <MudList Clickable="true">
                            <MudTreeView T="string" Hover="true">
                                @if (downloadedTemplates != null)
                                {
                                    @foreach (var pair in downloadedTemplates.Where(x => x.CanvasType == Shared.Enums.CanvasType.Split).OrderBy(x => x.Name))
                                    {
                                        <MudTreeViewItem Value="@pair.Name" @onclick="()=>SelectSplitImages(pair)" Style="cursor:pointer; ">
                                            <Content>
                                                <MudImage Style="width:100%" ObjectFit="ObjectFit.Contain" Src="@pair.Src" />
                                            </Content>
                                        </MudTreeViewItem>
                                    }
                                }
                            </MudTreeView>
                        </MudList>
                    </MudPaper>
                </MudTabPanel>
            </MudTabs>

        </div>
        <div style="width:calc(100% - 500px);height:100%;position:fixed;margin-left:300px;">
            <div style="background: #F5F5F5; width: 100%; height: 100%; text-align: center;position:relative">
                @if (CurrentImage != null && !string.IsNullOrEmpty(CurrentImage.Src))
                {
                    <MudStack Spacing="2" Style="position:absolute;top:60px;left:20px;">
                        <MudIconButton Icon="@Icons.Material.Filled.AutoAwesomeMotion" Style="width:30px" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small" OnClick="()=>_expanded = !_expanded" />
                        <MudDivider Style="width:30px" />
                        <MudCollapse Expanded="_expanded">
                            <MudStack>
                                <MudPaper Style="width:30px;height:30px;cursor:pointer;padding:3px 2px 3px 0px;" Elevation="25" @onclick="OpenFullExifInfo">
                                    <Watermark.Razor.Parts.IconExif />
                                </MudPaper>
                                <MudFileUpload T="IBrowserFile" FilesChanged="SelectSourceImageExif" Accept=".ARW, .jpg" Style="width:30px">
                                    <ButtonTemplate>
                                        <MudIconButton HtmlTag="label" for="@context.Id" Icon="@Icons.Material.Filled.FindReplace" Color="Color.Info" Variant="Variant.Filled" Size="Size.Small" />
                                    </ButtonTemplate>
                                </MudFileUpload>
                                @if (LogoCacheDic.TryGetValue(CurrentImage?.ID ?? "", out Dictionary<string, string> dic))
                                {
                                    foreach (var item in dic)
                                    {
                                        @if (LogoBase64.TryGetValue(item.Key, out string src))
                                        {
                                            <MudPaper Elevation="25" Style="height:30px;width:30px;">
                                                <MudImage Style="height:100%;width:100%;cursor:pointer;" ObjectFit="ObjectFit.Contain" Src="@src" @onclick="()=>ReplaceLogo(item.Key)" />
                                            </MudPaper>

                                        }
                                    }
                                }
                                @foreach (var i in CurrentImage!.Canvas.Children)
                                {
                                    foreach (var wmt in i.Controls.Where(x => x is WMText).Cast<WMText>())
                                    {
                                        <MudPaper Elevation="25" Class="expandable" @onclick="()=>OpenExifDialog(wmt)">
                                            @(string.Join(" ", wmt.Exifs.Select(x => x.Prefix + x.Value + x.Suffix)))
                                        </MudPaper>
                                    }
                                    foreach (var ctn in i.Controls.Where(x => x is WMContainer).Cast<WMContainer>())
                                    {
                                        foreach (var cwmt in ctn.Controls.Where(z => z is WMText).Cast<WMText>())
                                        {
                                            <MudPaper Elevation="25" Class="expandable" @onclick="()=>OpenExifDialog(cwmt)">
                                                @(string.Join(" ", cwmt.Exifs.Select(x => x.Prefix + x.Value + x.Suffix)))
                                            </MudPaper>
                                        }
                                    }
                                }

                            </MudStack>
                        </MudCollapse>
                    </MudStack>
                    <MudImage ObjectFit="@ObjectFit.Contain" Src="@CurrentImage.Src" Elevation="0" Style="width:90%; height:calc(100% - 200px); margin-left:5%;margin-right:5%;margin-top:100px;" />

                }
                else
                {
                    <Watermark.Razor.Parts.IconImage />
                }
            </div>
        </div>
        <div style="width: 200px; height: calc(100% - 30px);  background: #F5F5F5;  position: absolute; right: 0; margin-top: 30px;overflow-y:auto;overflow-x:hidden">
            <MudList Clickable="true">
                @foreach (var file in Images)
                {
                    <MudImage Elevation="2" Src="@file.Src" Width="190" ObjectFit="ObjectFit.Contain" Class="mt-2" Style="cursor: pointer; margin: 0 5px" @onclick="(()=>ClickImage(file))" />
                }
            </MudList>
        </div>
    </div>

    <MudOverlay Visible="MainLoading.Show" DarkBackground="true" Absolute="true" ZIndex="99999">
        <MudPaper Style="width:520px;padding:10px 40px 10px 40px;">
            <MudStack>
                <MudProgressLinear Color="Color.Primary" Value="@MainLoading.Value" Class="mt-7" />
                <MudText Typo="Typo.subtitle1" Color="Color.Dark" Style="margin:auto">
                    <b>@MainLoading.Message</b>
                </MudText>
            </MudStack>
        </MudPaper>
    </MudOverlay>

    <MudOverlay Visible="@ForceUpdate" DarkBackground="true" Absolute="true" ZIndex="99999">
        <MudPaper Width="200px" Height="200px" Elevation="0" Style="text-align:center;padding-top:calc(50% - 38px)">
            <MudText Typo="Typo.subtitle1" Color="Color.Default">
                测试版已过期！
            </MudText>
        </MudPaper>
    </MudOverlay>

    <MudOverlay Visible="@openUpdate" DarkBackground="true" Absolute="true" ZIndex="99999">
        <Watermark.Razor.Components.UpdateDialog CloseEvet="()=> openUpdate = false" UpdateEvet="@(()=>OpenLink("http://thankful.top/"))" DownLoadProgress="0" UpdateMessage="@ClientInstance.UpdateMessage" UpdateVersion="@ClientInstance.UpdateVersion" />
    </MudOverlay>

    <MudDialog @bind-IsVisible="CreateTemplate.DialogVisible" Options="CreateTemplate.DialogOptions" Style="max-width:400px;">
        <DialogContent>
            <MudForm>
                <MudTextField @bind-Value="CreateTemplate.TemplateName" T="string" Label="模板名称" Required="true" RequiredError="模板名称不能为空" />
                <MudStack Row Class="mt-5">
                    @if (!string.IsNullOrEmpty(CreateTemplate.Base64Src))
                    {
                        <MudImage Width="250" ObjectFit="ObjectFit.Contain" Src="@CreateTemplate.Base64Src" />
                    }
                    else
                    {
                        <MudSkeleton Width="250px" Height="160px" />
                    }
                    <MudIconButton Icon="@Icons.Material.Filled.OpenInNew" OnClick="SelectExampleImage" Style="float:right;width:40px;height:40px;" />
                </MudStack>
            </MudForm>
        </DialogContent>
        <DialogActions>
            <MudButton FullWidth="true" Variant="Variant.Filled" OnClick="OpenDesinerDialog" DisableElevation>确定</MudButton>
        </DialogActions>
    </MudDialog>

</div>


@code {
    bool SrcLoading = false;
    bool ShowUserInfo = false;
    bool openDrawer = false;
    bool openSplit = false;
    bool openSave = false;
    bool ForceUpdate = false;
    bool openUpdate = false;
    bool loadMore = false;
    Dictionary<string, Dictionary<string, string>> LogoCacheDic = new();
    ConcurrentDictionary<string, string> LogoBase64 = new();
    List<WMZipedTemplate> downloadedTemplates = new();
    WMZipedTemplate CurrentTemplate;
    WMTemplateList CurrentImage;
    List<WMTemplateList> Images = new();
    bool _expanded = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Global.DeviceType = Shared.Enums.DeviceType.Mac;
            Global.OutPutPath = Global.AppPath.OutputFolder;
            Global.PrimaryKey = ClientInstance.Key();
            await Global.InitConfig();
            APIHelper helper = new APIHelper();
            var isOutOfDate = await Watermark.Shared.Models.ClientInstance.IsOutOfDate("Mac");
            if (isOutOfDate)
            {
                ForceUpdate = true;
                StateHasChanged();
                return;
            }


            var checkUpdate = await Watermark.Shared.Models.ClientInstance.CheckUpdate("WatermarkMac");
            if (checkUpdate)
            {
                openUpdate = true;
                StateHasChanged();
            }

            await Global.Login();
            await LoadTemplates();
            await helper.DownloadLogoes();

            await helper.PageVisitRecord(ProgramPage.MyTemplate, Platform.Mac);
        }
        catch (Exception ex)
        {
            ClientInstance.ShowMsg(Snackbar, ex.Message, Severity.Error);
        }
    }

    async void ClickImage(WMTemplateList image)
    {
        CurrentImage = image;
        SrcLoading = true;
        CurrentImage.Canvas.Path = CurrentImage.Path;
        var b64 = await helper.GenerationAsync(CurrentImage.Canvas, null, true);
        var src = await JSRuntime.InvokeAsync<string>("byteToUrl", b64);
        CurrentImage.Src = src;
        SrcLoading = false;
        StateHasChanged();
    }


    async Task LoadTemplates()
    {
        StateHasChanged();
        downloadedTemplates = new();
        var api = new APIHelper();
        if (!Directory.Exists(Global.AppPath.TemplatesFolder))
        {
            Directory.CreateDirectory(Global.AppPath.TemplatesFolder);
        }

        try
        {
            MainLoading.Show = true;
            MainLoading.Value = 0;
            StateHasChanged();
            var basePath = Global.AppPath.TemplatesFolder;
            var folder = new DirectoryInfo(basePath);
            foreach (var tFolder in folder.GetDirectories())
            {
                WMZipedTemplate dirct = new();
                dirct.WatermarkId = tFolder.Name;
                var configPath = basePath + dirct.WatermarkId + System.IO.Path.DirectorySeparatorChar + "config.json";
                if (System.IO.File.Exists(configPath))
                {
                    var content = File.ReadAllText(configPath);
                    dirct.WMCanvas = Global.ReadConfig(content);
                    dirct.Name = dirct.WMCanvas.Name;
                    dirct.WMCanvas.Exif = ExifHelper.DefaultMeta;
                    dirct.CanvasType = dirct.WMCanvas.CanvasType;
                    downloadedTemplates.Add(dirct);
                }
            }
            foreach (var tp in downloadedTemplates)
            {
                var idx = downloadedTemplates.IndexOf(tp) + 1;
                MainLoading.Message = $"正在加载共{downloadedTemplates.Count}个，当前第{idx}个...";
                MainLoading.Value = idx * 100.0 / downloadedTemplates.Count;
                StateHasChanged();
                await Global.InitFonts([tp.WMCanvas]);
                var b64 = await helper.GenerationAsync(tp.WMCanvas, null, true, false);
                tp.Src = await JSRuntime.InvokeAsync<string>("byteToUrl", b64);
            }
            MainLoading.Show = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Watermark.Shared.Models.ClientInstance.ShowMsg(Snackbar, ex.Message, Severity.Error);
            MainLoading.Show = false;
        }
    }

    async void SelectSourceImageExif(IBrowserFile file)
    {
        MemoryStream ms = new MemoryStream();
        await file.OpenReadStream(file.Size).CopyToAsync(ms);
        CurrentImage.Canvas.Exif = ExifHelper.ReadImage(ms.ToArray());
    }

    async void OpenFullExifInfo()
    {
        var parameters = new DialogParameters<ExifInfo>();
        parameters.Add(x => x.Exifs, ExifHelper.ReadAllExif(CurrentImage.Canvas.Exif));
        var option = new DialogOptions() { NoHeader = true, MaxWidth = MaxWidth.Medium };
        var rst = DialogService.Show<ExifInfo>("", parameters, option);
        var dialogResult = await rst.Result;
    }

    async void ImportLocalImages()
    {
        try
        {
            var result = await picker.PickFilesAsync("pick", ClientInstance.FileType, true);

            if (result == null) return;
            MainLoading.Show = true;
            Images = new();
            MainLoading.Message = $"正在导入图片，一共{result.Count()}, 当前第1个...";
            MainLoading.Value = 0;
            StateHasChanged();
            if (!Directory.Exists(Global.AppPath.ThumbnailFolder))
            {
                Directory.CreateDirectory(Global.AppPath.ThumbnailFolder);
            }

            var source = Global.AppPath.BasePath + "Source" + Path.DirectorySeparatorChar;
            if (!Directory.Exists(source))
            {
                Directory.CreateDirectory(source);
            }
            foreach (var file in result)
            {
                WMCanvas canvas = new WMCanvas();
                canvas.Path = file!.FileResult!.FullPath;
                canvas.Exif = await ExifHelper.ReadImageAsync(canvas.Path);
                await Task.Run(() =>
                {
                    var target = Path.Combine(source, Path.GetFileName(canvas.Path));
                    File.Copy(canvas.Path, target, true);
                    canvas.Path = target;
                    var thumbnail = Global.AppPath.ThumbnailFolder + Path.GetFileName(canvas.Path);
                    Global.WriteThumbnailImage(canvas.Path, thumbnail);
                });
                var b64 = await Global.GetBase64(canvas.Path);
                Images.Add(new WMTemplateList
                {
                    Canvas = canvas,
                    Src = await JSRuntime.InvokeAsync<string>("byteToUrl", b64),
                    ID = canvas.ID,
                    Path = canvas.Path
                });
                var idx = result.ToList().IndexOf(file) + 1;
                MainLoading.Message = $"正在导入图片，一共{result.Count()}, 当前第{idx}个...";
                MainLoading.Value = idx * 100.0 / result.Count();
                StateHasChanged();
            }

            MainLoading.Message = $"导入完成";
            MainLoading.Value = 100;
            await Task.Delay(200);
            MainLoading.Show = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            MainLoading.Show = false;
        }
    }

    async void ChangeTemplate(WMZipedTemplate template)
    {
        CurrentTemplate = template;
        if (CurrentImage == null) return;
        SrcLoading = true;
        var b64 = await Task.Run(() =>
        {
            var cvs = Global.ReadConfig(Global.CanvasSerialize(template.WMCanvas));
            cvs.Exif = CurrentImage.Canvas.Exif;
            CurrentImage.Canvas = cvs;
            cvs.Path = CurrentImage.Path;
            return helper.Generation(cvs, null, true);
        });

        var src = await JSRuntime.InvokeAsync<string>("byteToUrl", b64);
        CurrentImage.Src = src;
        await InitLogoCacheDic(CurrentImage.ID, template);
        SrcLoading = false;
        EnableAll();
        StateHasChanged();
    }

    async Task InitLogoCacheDic(string imgId, WMZipedTemplate template)
    {
        var logoes = new List<WMLogo>();
        foreach (var c1 in template.WMCanvas.Children)
        {
            foreach (var cc1 in c1.Controls)
            {
                if (cc1 is WMLogo logo) logoes.Add(logo);
                else if (cc1 is WMContainer wc)
                {
                    foreach (var wcc in wc.Controls)
                    {
                        if (wcc is WMLogo wcLogo) logoes.Add(wcLogo);
                    }
                }
            }
        }

        var dic = new Dictionary<string, string>();
        var db64 = new ConcurrentDictionary<string, byte[]>();
        foreach (var logo in logoes)
        {
            dic[logo.ID] = logo.Path;
            var target = logo.Path;
            if (!File.Exists(target))
            {
                target = Global.AppPath.TemplatesFolder + template.WMCanvas.ID + Path.DirectorySeparatorChar + logo.Path;
            }
            if (File.Exists(target))
            {
                Global.ImageFile2Base64(db64, target, logo.ID);
            }
        }
        foreach (var e in db64)
        {
            LogoBase64[e.Key] = await JSRuntime.InvokeAsync<string>("byteToUrl", e.Value);
        }
        LogoCacheDic[imgId] = dic;

    }
    void EnableAll()
    {
        Snackbar.Clear();
        Snackbar.Add("当前模板应用全部？", Severity.Info, config =>
        {
            config.Action = "应用";
            config.ActionColor = Color.Primary;
            config.Onclick = snackbar =>
            {
                return Help();
            };
        });
    }

    async Task Help()
    {
        try
        {
            MainLoading.Show = true;
            StateHasChanged();
            int idx = 1;
            foreach (var img in Images)
            {
                MainLoading.Message = $"正在应用模板，一共{Images.Count}张，目前第{idx}张";
                MainLoading.Value = idx++ * 100.0 / Images.Count;
                StateHasChanged();
                var b64 = await Task.Run(() =>
                {
                    var cvs = Global.ReadConfig(Global.CanvasSerialize(CurrentTemplate.WMCanvas));
                    cvs.Exif = img.Canvas.Exif;
                    img.Canvas = cvs;
                    cvs.Path = img.Path;
                    return helper.Generation(cvs, null, true);
                });

                var src = await JSRuntime.InvokeAsync<string>("byteToUrl", b64);
                img.Src = src;
                await InitLogoCacheDic(img.ID, CurrentTemplate);
            }

            MainLoading.Value = 100;
        }
        catch (Exception ex)
        {
            Common.ShowMsg(Snackbar, ex.Message, Severity.Error);
        }
        finally
        {
            MainLoading.Show = false;
            StateHasChanged();
        }
    }

    async void OpenTemplateMarket()
    {
        Func<string, Task> func = new((x) =>
        {
            return Clipboard.Default.SetTextAsync(x);
        });

        var p = new DialogParameters<Watermark.Razor.Components.TemplatesMarket>();
        p.Add(x => x.ClipboardAction, func);
        var dialog = DialogService.Show<Watermark.Razor.Components.TemplatesMarket>(string.Empty, p, new DialogOptions() { MaxWidth = MaxWidth.ExtraLarge, NoHeader = true });
        var result = await dialog.Result;
        await LoadTemplates();
    }


    async void OpenExport()
    {
        var parameters = new DialogParameters<Watermark.Razor.Components.ExportDialog>();
        parameters.Add(x => x.Images, Images);
        var dialog = DialogService.Show<Watermark.Razor.Components.ExportDialog>(string.Empty, parameters, new DialogOptions() { MaxWidth = MaxWidth.ExtraLarge, NoHeader = true });
        var result = await dialog.Result;
        if (!result.Canceled && result.Data is List<WMTemplateList> images)
        {
            Export(images.Where(x => x.IsChecked).ToList());
        }
    }

    async void Export(List<WMTemplateList> images)
    {
        MainLoading.Show = true;
        MainLoading.Message = $"正在导出图片，一共{images.Count}张，目前第1张";
        MainLoading.Value = 0;
        StateHasChanged();
        var idx = 1;
        var option = new ParallelOptions();
        option.MaxDegreeOfParallelism = Global.MAX_THREAD;
        foreach (var item in images)
        {
            await helper.GenerationAsync(item.Canvas, null, false);
            MainLoading.Message = $"正在导出图片，一共{images.Count}张，目前第{idx}张";
            MainLoading.Value = idx++ * 100.0 / images.Count;
            StateHasChanged();
        }

        MainLoading.Value = 100;
        MainLoading.Show = false;
        StateHasChanged();

        Snackbar.Clear();
        Snackbar.Add("打开输出文件夹？", Severity.Info, config =>
        {
            config.Action = "好的";
            config.ActionColor = Color.Primary;
            config.Onclick = snackbar =>
            {
                return OpenFolder();
            };
        });

        GC.Collect();
    }

    Task OpenFolder()
    {
        return Task.Run(() =>
        {
            var path = Global.OutPutPath;
            System.Diagnostics.Process.Start("open", path);
        });
    }

    async void SelectSplitImages(WMZipedTemplate template)
    {
        Dictionary<string, string> exif = ExifHelper.DefaultMeta;
        var result = await picker.PickFilesAsync("pick", ClientInstance.FileType, true);
        if (result != null)
        {
            if (!Directory.Exists(Global.AppPath.ThumbnailFolder))
            {
                Directory.CreateDirectory(Global.AppPath.ThumbnailFolder);
            }

            int c = 0;
            foreach (var container in template.WMCanvas.Children)
            {
                if (c <= result.Count() - 1 && !container.ContainerProperties.FixImage)
                {
                    container.Path = result.ToList()[c++].FileResult.FullPath;
                    exif = ExifHelper.ReadImage(container.Path);
                }
            }
        }


        StateHasChanged();
        var cvs = Global.ReadConfig(Global.CanvasSerialize(template.WMCanvas));
        cvs.Exif = exif;
        var b64 = await helper.GenerationAsync(cvs, null, true, false);
        CurrentImage = new();
        CurrentImage.Canvas = cvs;
        CurrentImage.ID = CurrentImage.Canvas.ID;
        CurrentImage.Src = await JSRuntime.InvokeAsync<string>("byteToUrl", b64);
        await InitLogoCacheDic(CurrentImage.ID, new WMZipedTemplate() { WMCanvas = template.WMCanvas });
        Images = [];
        Images.Add(CurrentImage);
        SrcLoading = false;
        StateHasChanged();
    }


    public async void OpenMyTemplates()
    {
        Action<WMCanvas> OpenDesigner = new Action<WMCanvas>((x) =>
        {
            OpenDesignAction(x);
        });

        var parameters = new DialogParameters<Watermark.Razor.Components.MyTemplates>();
        parameters.Add(x => x.EditTemplateEvt, OpenDesigner);
        var option = new DialogOptions() { NoHeader = true, MaxWidth = MaxWidth.ExtraLarge };
        var rst = DialogService.Show<Watermark.Razor.Components.MyTemplates>("我的模板", parameters, option);
        var dialog = await rst.Result;
        await LoadTemplates();
    }

    public void OpenDesignAction(WMCanvas x)
    {
        Action<WMLogo> SelectLogo = new(async (mLogo) =>
            {
                var result = await picker.PickFilesAsync("pick", ClientInstance.FileType, true);
                if (result != null && result.Count() > 0)
                {
                    var p = result.First().FileResult!.FullPath;
                    var destFolder = Global.AppPath.TemplatesFolder + x.ID;
                    if (!System.IO.Directory.Exists(destFolder))
                    {
                        System.IO.Directory.CreateDirectory(destFolder);
                    }

                    var name = Path.GetFileName(p);
                    var destFile = destFolder + System.IO.Path.DirectorySeparatorChar + name;
                    System.IO.File.Copy(p, destFile, true);
                    mLogo.Path = name;
                }
            });

        Func<WMContainer, Task> SelectContainer = new(async Task (mContainer) =>
        {
            var result = await picker.PickFilesAsync("pick", ClientInstance.FileType, true);
            if (result != null && result.Count() > 0)
            {
                var p = result.First().FileResult!.FullPath;
                var destFolder = Global.AppPath.TemplatesFolder + x.ID;
                if (!System.IO.Directory.Exists(destFolder))
                {
                    System.IO.Directory.CreateDirectory(destFolder);
                }
                mContainer.Path = p;
            }
        });

        Func<Task<string>> SelectDefaultImage = new(async Task<string> () =>
        {
            var result = await picker.PickFilesAsync("pick", ClientInstance.FileType, true);
            if (result != null && result.Count() > 0)
            {
                var p = result.First().FileResult!.FullPath;
                var destFolder = Global.AppPath.TemplatesFolder + x.ID;
                if (!System.IO.Directory.Exists(destFolder))
                {
                    System.IO.Directory.CreateDirectory(destFolder);
                }

                return p;
            }
            return "";
        });

        Func<Task> ImportFont = new Func<Task>(async Task() =>
        {
            var result = await picker.PickFilesAsync("pick", ClientInstance.FileFontType, true);
            if (result != null && result.Count() > 0)
            {
                var p = result.First().FileResult!.FullPath;
                var fontPath = Global.AppPath.FontFolder;
                if (!System.IO.Directory.Exists(fontPath))
                {
                    System.IO.Directory.CreateDirectory(fontPath);
                }

                var file = new FileInfo(p);
                if (file.Exists)
                {
                    try
                    {
                        var target = fontPath + Path.GetFileName(p);
                        file.CopyTo(target, true);
                    }
                    catch { }
                }
            }
        });


        var p1 = new DialogParameters<Watermark.Razor.Components.Design>();
        p1.Add(x => x.CurrentCanvas, x);
        p1.Add(x => x.SelectLogo, SelectLogo);
        p1.Add(x => x.SelectContainer, SelectContainer);
        p1.Add(x => x.SelectDefaultImageEvt, SelectDefaultImage);
        p1.Add(x => x.ImportFontEvt, ImportFont);
        var o1 = new DialogOptions() { NoHeader = true, FullScreen = true, CloseButton = true };
        var r = DialogService.Show<Watermark.Razor.Components.Design>("模板设计", p1, o1);
    }


    void ImportLogoes()
    {
        var dialog = DialogService.Show<Watermark.Razor.Components.LogoDialog>(string.Empty, new DialogOptions() { MaxWidth = MaxWidth.ExtraLarge, NoHeader = true });
    }

    async void SelectExampleImage()
    {
        var dic = new ConcurrentDictionary<string, byte[]>();

        var result = await picker.PickFilesAsync("pick", ClientInstance.FileType, false);

        if (result != null && result.Count() > 0)
        {
            var fullpath = result.First().FileResult!.FullPath;
            var destFolder = Global.AppPath.TemplatesFolder + CreateTemplate.ID;
            if (!System.IO.Directory.Exists(destFolder))
            {
                System.IO.Directory.CreateDirectory(destFolder);
            }

            var destFile = destFolder + System.IO.Path.DirectorySeparatorChar + "default.jpg";

            SkiaSharp.SKBitmap bitmap = SkiaSharp.SKBitmap.Decode(fullpath);
            ClientInstance.WriteThumbnailImage(bitmap, destFile);
            Global.ImageFile2Base64(dic, destFile, "default");
            CreateTemplate.Base64Src = await JSRuntime.InvokeAsync<string>("byteToUrl", dic.First().Value);
            StateHasChanged();
        }
    }

    async void OpenSignUpDialog()
    {
        var rst = DialogService.Show<Watermark.Razor.Components.SignUpDialog>("");
        var dialogResult = await rst.Result;
        if (!dialogResult.Canceled && dialogResult.Data.Equals(true))
        {
            StateHasChanged();
        }
    }

    async void OpenLoginDialog()
    {
        var rst = DialogService.Show<Watermark.Razor.Components.LoginDialog>("");
        var dialogResult = await rst.Result;
        if (!dialogResult.Canceled && dialogResult.Data.Equals(true))
        {
            StateHasChanged();
        }
    }

    void OpenLink(string link)
    {
        var psi = new System.Diagnostics.ProcessStartInfo() { FileName = link, UseShellExecute = true };
        System.Diagnostics.Process.Start(psi);
    }

    async void OpenExifDialog(WMText mText)
    {
        var parameters = new DialogParameters<Watermark.Razor.Components.ExifConfig>();
        parameters.Add(x => x.Exifs, mText.Exifs);
        var option = new DialogOptions() { NoHeader = true, MaxWidth = MaxWidth.Medium };
        var rst = DialogService.Show<Watermark.Razor.Components.ExifConfig>("", parameters, option);
        var dialogResult = await rst.Result;
        if (!dialogResult.Canceled)
        {
            mText.Exifs = (List<WMExifConfigInfo>)dialogResult.Data;
            RefreshImage();
            StateHasChanged();
        }
    }

    async void RefreshImage()
    {
        SrcLoading = true;
        CurrentImage.Canvas.Path = CurrentImage.Path;
        var b64 = await helper.GenerationAsync(CurrentImage.Canvas, null, true);
        var src = await JSRuntime.InvokeAsync<string>("byteToUrl", b64);
        CurrentImage.Src = src;
        SrcLoading = false;
        StateHasChanged();
    }

    async void ReplaceLogo(string sourceId)
    {
        var dialog = DialogService.Show<Watermark.Razor.Components.LogoDialog>(string.Empty, new DialogOptions() { MaxWidth = MaxWidth.ExtraLarge, NoHeader = true });
        var result = await dialog.Result;
        if (!result.Canceled && result.Data is KeyValuePair<string, string> d)
        {
            var p = Path.Combine(Global.AppPath.LogoesFolder, d.Key);
            ChangeLogo(sourceId, p);
        }
    }

    async void ChangeLogo(string sourceId, string logoPath)
    {
        SrcLoading = true;
        StateHasChanged();
        foreach (var c1 in CurrentImage.Canvas.Children)
        {
            foreach (var cc1 in c1.Controls)
            {
                if (cc1 is WMLogo logo && logo.ID == sourceId)
                {
                    logo.AutoSetLogo = false;
                    logo.Path = logoPath;
                    break;
                }
                else if (cc1 is WMContainer wc)
                {
                    foreach (var wcc in wc.Controls)
                    {
                        if (wcc is WMLogo wcLogo && wcLogo.ID == sourceId)
                        {
                            wcLogo.AutoSetLogo = false;
                            wcLogo.Path = logoPath;
                            break;
                        }
                    }
                }
            }
        }
        var b64 = await helper.GenerationAsync(CurrentImage.Canvas, null, true);
        var src = await JSRuntime.InvokeAsync<string>("byteToUrl", b64);
        CurrentImage.Src = src;
        SrcLoading = false;
        StateHasChanged();
    }


    #region class

    class MainLoading
    {
        public static bool Show { get; set; } = false;
        public static double Value { get; set; }
        public static string Message { get; set; } = "正在加载模板...";
    }

    class CreateTemplate
    {
        public static bool DialogVisible { get; set; } = false;
        public static DialogOptions DialogOptions { get; set; } = new DialogOptions() { MaxWidth = MaxWidth.Medium, NoHeader = true };
        public static string TemplateName { get; set; }
        public static string Base64Src { get; set; }
        public static string ID = Guid.NewGuid().ToString("N").ToUpper();
    };

    void OpenDesinerDialog()
    {
        if (string.IsNullOrEmpty(CreateTemplate.TemplateName) || string.IsNullOrEmpty(CreateTemplate.Base64Src)) return;
        var canvas = new WMCanvas() { Name = CreateTemplate.TemplateName, ID = CreateTemplate.ID };
        var basePath = Global.AppPath.TemplatesFolder + canvas.ID;
        if (!Directory.Exists(basePath))
        {
            Directory.CreateDirectory(basePath);
        }
        CreateTemplate.DialogVisible = false;
        OpenDesignAction(canvas);
    }

    #endregion
}