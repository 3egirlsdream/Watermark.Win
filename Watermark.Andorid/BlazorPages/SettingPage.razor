@using Microsoft.AspNetCore.Components.Forms
@using System.IO
@using Watermark.Andorid.Models
@using Watermark.Razor.Components
@using Watermark.Win.Models
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@using Watermark.Shared.Models
@inject ISnackbar Snackbar
@inject NavigationManager navigationManager
<style>
    .mud-switch {
        margin-left: 0px;
        margin-right: 0px;
        margin-inline-start: 0px;
        margin-inline-end: 0px;
        margin-right: 0px;
    }

</style>
@if (Global.CurrentUser != null && !string.IsNullOrEmpty(Global.CurrentUser.ID))
{
    <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
        @if (!string.IsNullOrEmpty(Global.CurrentUser.IMG))
        {
            <MudImage Width="50" Height="50" Src="@Global.CurrentUser.IMG" ObjectFit="ObjectFit.Contain" Style="float:left;" />
        }
        else
        {
            <MudIcon Icon="@Icons.Material.Filled.AccountCircle" Color="Color.Primary" Size="Size.Large" Style="float:left;" />
        }
        <MudStack Row Style="align-items: center;">
            <MudText Typo="Typo.body1" Class="px-4" Color="@(Global.CurrentUser.IsVIP ? Color.Warning : Color.Secondary)" Align="Align.Start" Style="display:flex;align-items:center;">
                @if (Global.CurrentUser.IsVIP)
                {
                    <Watermark.Razor.Parts.IconVip />
                }
                @Global.CurrentUser.DISPLAY_NAME
            </MudText>
            @if (!Global.CurrentUser.IsVIP)
            {
                <MudButton Variant="Variant.Outlined" Class="ml-5" Size="Size.Small" OnClick="OpenVip">开通会员</MudButton>
            }
        </MudStack>
        <MudText Typo="Typo.overline" Class="px-4" Color="Color.Inherit" Style="margin-left: 0px;">@Global.CurrentUser.USER_NAME</MudText>
        <div Style="display:flex;align-items:center;line-height: 32px;">
            <Watermark.Razor.Parts.IconCoin />
            <MudText Typo="Typo.overline" Color="Color.Inherit" Style="line-height: 32px;">
                @Global.CurrentUser.COINS
            </MudText>
            <MudText Typo="Typo.overline" Color="Color.Inherit" Class="ml-4">
                会员到期时间：@Global.CurrentUser.EXPIRE_DATE
            </MudText>
        </div>

    </MudPaper>
}
else
{
    <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
        <MudStack Row>
            <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="OpenLoginDialog">登录</MudButton>
            <MudButton Variant="Variant.Text" OnClick="OpenSignUpDialog">注册</MudButton>
        </MudStack>
    </MudPaper>
}

@* 活动面板 *@
@* <MudPaper Style="@cardStyle" Elevation="0" class="pa-3">
	<MudCarousel Class="mud-width-full" Style="height:100px;" ShowArrows="false" ShowBullets="false" EnableSwipeGesture="true" AutoCycle="true" TData="object">
		<MudCarouselItem Transition="@Transition.Fade">
			<div class="d-flex" style="height:100%">
				<MudImage Src="https://cdn.thankful.top/gonggao.jpg" ObjectFit="ObjectFit.Contain" Class="mx-auto" />
			</div>
		</MudCarouselItem>
		<MudCarouselItem Transition="@Transition.Fade">
			<div class="d-flex" style="height:100%">
				<MudImage Src="https://cdn.thankful.top/yaofan.jpg" ObjectFit="ObjectFit.Contain" Class="mx-auto" />
			</div>
		</MudCarouselItem>
	</MudCarousel>
</MudPaper> *@


<MudPaper Style="@cardStyle" Elevation="0" class="pa-3">
    <MudStack Row Justify="Justify.SpaceBetween" style="align-items: center" @onclick="Update">
        <MudStack Row style="align-items: center">
            <MudText Typo="Typo.button"> 版本更新 @($" {ClientInstance.GetVersion().ToString()}")</MudText>
            @if (checkUpdate)
            {
                <MudChip Size="Size.Small" Color="Color.Error">new</MudChip>
            }
        </MudStack>
        <MudIcon Icon="@Icons.Material.Filled.ArrowRight" Size="Size.Small" />
    </MudStack>
    @if (DownLoadProgress > 0)
    {
        <MudProgressLinear Color="Color.Primary" Value="@DownLoadProgress" Class="mr-5" style="width:auto" />
    }
</MudPaper>

<MudPaper Elevation="0" Style="@cardStyle" class="pa-3">
    <MudStack Row Justify="Justify.SpaceBetween" style="align-items: center" @onclick="() => openLogoDialog = true">
        <MudText Typo="Typo.button"> 导入图标 </MudText>
        <MudIcon Icon="@Icons.Material.Filled.ArrowRight" Size="Size.Small" />
    </MudStack>
    <MudDivider Class="my-2" />
    <MudStack Row Justify="Justify.SpaceBetween" style="align-items: center" @onclick="@(()=>CopyClipboard("http://thankful.top:2038/api/public/dl/EMRyVNXX"))">
        <MudText Typo="Typo.button"> PC客户端 </MudText>
        <MudIcon Icon="@Icons.Material.Filled.ContentCopy" Size="Size.Small" />
    </MudStack>

    <MudDivider Class="my-2" />
    <MudStack Row Justify="Justify.SpaceBetween" style="align-items: center">
        <MudText Typo="Typo.button"><a href="http://thankful.top/"> Web网页版</a></MudText>
        <MudIcon Icon="@Icons.Material.Filled.ArrowRight" Size="Size.Small" />
    </MudStack>

    <MudDivider Class="my-2" />
    <MudStack Row Justify="Justify.SpaceBetween" style="align-items: center" @onclick="@(()=>CopyClipboard("836325187"))">
        <MudText Typo="Typo.button"> 交流群：836325187</MudText>
        <MudIcon Icon="@Icons.Material.Filled.ContentCopy" Size="Size.Small" />
    </MudStack>
    <MudDivider Class="my-2" />
    <MudStack Row Justify="Justify.SpaceBetween" style="align-items: center" @onclick="()=>ShowQuestion = true">
        <MudText Typo="Typo.button"> 常见问题</MudText>
        <MudIcon Icon="@Icons.Material.Filled.QuestionMark" Size="Size.Small" />
    </MudStack>
</MudPaper>

<MudPaper Style="@cardStyle" Elevation="0" class="pa-3">
    <MudStack Row Justify="Justify.SpaceBetween" style="align-items: center" @onclick="()=> { Global.CurrentUser = null; }">
        <MudText Typo="Typo.button"> 切换账号</MudText>
        <MudIcon Icon="@Icons.Material.Filled.ExitToApp" Size="Size.Small" />
    </MudStack>
    <MudDivider Class="my-2" />
    <MudStack Row Justify="Justify.SpaceBetween" style="align-items: center" @onclick="OpenSettings">
        <MudText Typo="Typo.button">设置</MudText>
        <MudIcon Icon="@Icons.Material.Filled.Settings" Size="Size.Small" />
    </MudStack>
    @if (Global.CurrentUser?.ID == "0BECCA9A-6F10-4A88-8753-921195D08853" || Global.CurrentUser?.ID == "9DEBF7DC-F58C-4667-BACF-A6BFD18352EB")
    {
        <MudDivider Class="my-2" />
        <MudStack Row Justify="Justify.SpaceBetween" style="align-items: center" @onclick="@(()=>navigationManager.NavigateTo("/dms"))">
            <MudText Typo="Typo.button"> APP数据</MudText>
            <MudIcon Icon="@Icons.Material.Filled.ArrowRight" Size="Size.Small" />
        </MudStack>
    }
</MudPaper>

<MudDrawer Style="@($"{(openVip?"padding:6px 0":"display:none;")}")" @bind-Open="@openVip" Width="100%" Height="60%" Anchor="Anchor.Bottom" Elevation="15" Variant="@DrawerVariant.Temporary" Color="Color.Default">
    @if (openVip)
    {
        <VipDialog OnImageTouched="OnImageTouched" />
    }
</MudDrawer>



<MudDrawer Style="@($"{(openLogoDialog?"":"display:none;")}")" @bind-Open="@openLogoDialog" Width="100%" Height="60%" Anchor="Anchor.Bottom" Elevation="15" Variant="@DrawerVariant.Temporary" Color="Color.Default">
    @if (openLogoDialog)
    {
        <Watermark.Razor.Components.LogoDialog />
    }
</MudDrawer>

<MudDrawer Style="padding:6px" @bind-Open="@ShowQuestion" Width="100%" Height="60%" Anchor="Anchor.Bottom" Elevation="15" Variant="@DrawerVariant.Temporary" Color="Color.Default">
    @if (ShowQuestion)
    {
        <Watermark.Razor.Components.QuestionDialog />
    }
</MudDrawer>

<MudOverlay Visible="@showUpdateOverlay" DarkBackground="true" Absolute="true" ZIndex="99999">
    <Watermark.Razor.Components.UpdateDialog CloseEvet="()=>showUpdateOverlay = false" UpdateEvet="Update" DownLoadProgress="DownLoadProgress" UpdateMessage="@ClientInstance.UpdateMessage" UpdateVersion="@ClientInstance.UpdateVersion" />
</MudOverlay>

@code {
#if ANDROID

	[Inject]
	private IUpgradeService UpgradeService { get; set; }
#endif

    [Inject]
    private IDialogService DialogService { get; set; }
    [Parameter]
    public EventCallback RefreshCollection { get; set; }

    string cardStyle => $"margin:20px 16px;background:{Colors.Grey.Lighten4}";
    bool openVip = false;
    bool checkUpdate = false;
    int DownLoadProgress = 0;
    bool openLogoDialog = false;
    bool showUpdateOverlay = false;
    bool ShowQuestion = false;

    protected override async Task OnInitializedAsync()
    {
        var api = new APIHelper();
        await Global.Login();
        checkUpdate = await Watermark.Shared.Models.ClientInstance.CheckUpdate();
        if (checkUpdate)
        {
            showUpdateOverlay = true;
        }
    }

    async void Update()
    {
        HapticFeedback.Default.Perform(HapticFeedbackType.Click);
#if ANDROID
	if (!checkUpdate || DownLoadProgress > 0) return;
	Global.APK = DateTime.Now.ToString("yyyyMMddHHmmss") + ".apk";
	await UpgradeService.DownloadFileAsync(ClientInstance.LinkPath, DownloadProgressChanged);
	UpgradeService.InstallNewVersion();
	DownLoadProgress = 0;
	StateHasChanged();
#endif
    }


    private void DownloadProgressChanged(long readLength, long allLength)
    {
        InvokeAsync(() =>
        {
            var c = (int)(readLength * 100 / allLength);

            if (c > 0 && c % 5 == 0) //刷新进度为每5%更新一次，过快的刷新会导致页面显示数值与实际不一致
            {
                DownLoadProgress = c; //下载完成百分比
                StateHasChanged();
            }
        });
    }


    async void CopyClipboard(string uri)
    {
        await Clipboard.Default.SetTextAsync(uri);
        Watermark.Shared.Models.ClientInstance.ShowMsg(Snackbar, "已复制到剪贴板", Severity.Success);
    }



    async void OpenLoginDialog()
    {
        DialogOptions topCenter = new DialogOptions() { NoHeader = true, FullScreen = true };
        var rst = DialogService.Show<LoginDialog>("", topCenter);
        var dialogResult = await rst.Result;
        if (!dialogResult.Canceled && dialogResult.Data.Equals(true))
        {
            StateHasChanged();
            if (RefreshCollection.HasDelegate)
            {
                await RefreshCollection.InvokeAsync();
            }

        }
    }

    async void OpenSignUpDialog()
    {
        DialogOptions topCenter = new DialogOptions() { NoHeader = true, FullScreen = true };
        var rst = DialogService.Show<SignUpDialog>("", topCenter);
        var dialogResult = await rst.Result;
        if (!dialogResult.Canceled && dialogResult.Data.Equals(true))
        {
            StateHasChanged();
        }
    }

    void OnImageTouched(bool f)
    {
        openVip = false;
        StateHasChanged();
    }

    void ToPreview()
    {
        navigationManager.NavigateTo("/preview");
    }

    void OpenVip()
    {
        HapticFeedback.Default.Perform(HapticFeedbackType.Click);
        openVip = true;
    }

    async void OpenSettings()
    {
        DialogOptions topCenter = new DialogOptions() { NoHeader = true, FullScreen = true };
        var param = new DialogParameters<AppSetting>();
        param.Add(x => x.ShowHeader, true);
        var rst = DialogService.Show<AppSetting>("", param, topCenter);
        var dialogResult = await rst.Result;
        if (!dialogResult.Canceled && dialogResult.Data.Equals(true))
        {
            StateHasChanged();
        }
    }
}