@page "/preview/{names}/{templateId}"
@using System.Collections.Concurrent
@using LukeMauiFilePicker
@using Watermark.Razor
@using Watermark.Shared.Models
@using Watermark.Shared.Enums
@using HorizontalAlignment = Watermark.Shared.Enums.HorizontalAlignment
@using VerticalAlignment = Watermark.Shared.Enums.VerticalAlignment
@using Orientation = Watermark.Shared.Enums.Orientation
@using static MudBlazor.Colors
@using Components.Layout
@inject IDialogService DialogService
@inject NavigationManager navigationManager
@inject IPopupService PopupService
@inject IWMWatermarkHelper helper
@inject APIHelper api
@inject IJSRuntime JSRuntime
@inject IFilePickerService picker
@inherits PStackPageBase
@inject PageStackNavController NavController
@layout MainLayout

<style>
    .preview-box {
        gap: 0px;
        display: flex;
        align-items: center;
        text-align: center;
        margin: auto;
        width: 60px;
        height: 60px;
        justify-content: center;
    }

    .config-btn {
        gap: 0px;
        display: flex;
        align-items: center;
        text-align: center;
        margin: auto;
        width: 50px;
        height: 60px;
        justify-content: center;
    }

    .mud-grid-spacing-xs-3 {
        /*    width: 100%;
                        margin: 0px; */
    }

    input[type=range] {
        pointer-events: none;
    }

        input[type=range]::-webkit-slider-thumb { /*Webkit Browsers like Chrome and Safari*/
            pointer-events: auto;
        }

        input[type=range]::-moz-range-thumb { /*Firefox*/
            pointer-events: auto;
        }

        input[type=range]::-ms-thumb { /*Internet Explorer*/
            pointer-events: auto;
        }


    ::-webkit-scrollbar {
        width: 0px;
        display: none;
    }

</style>


<PStackPageBarInit Dense Flat CenterTitle>
    <ActionContent>
        @if (SrcLoading)
        {
            <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
        }
        else
        {
            <MButton IconName="mdi-refresh"
                     OnClick="RefreshEditImage">
            </MButton>
        }

        <MButton IconName="mdi-content-save"
                 OnClick="OpenSave">
        </MButton>
    </ActionContent>
</PStackPageBarInit>

@if (CurrentImage != null && !string.IsNullOrEmpty(CurrentImage.Src))
{
    <MudStack Spacing="2" Style="position:absolute;margin-top:10px;left:20px;z-index:99">
        <MudIconButton Icon="@Icons.Material.Filled.AutoAwesomeMotion" Style="width:30px" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small" OnClick="ExpandSwitch" />
        <MudDivider Style="width:30px" />
        <MudCollapse Expanded="_expanded">
            <MudStack>
                <MudPaper Style="width:30px;height:30px;cursor:pointer;padding:3px 3px 3px 2px;" Elevation="25" @onclick="OpenFullExifInfo">
                    <Watermark.Razor.Parts.IconExif />
                </MudPaper>
                <MudIconButton Icon="@Icons.Material.Filled.FindReplace" Color="Color.Info" Variant="Variant.Filled" Style="width:30px;height:30px;" OnClick="SelectSourceImageExif" />

                @foreach (var i in CurrentTemplateCanvas.Children)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Layers" Color="Color.Primary" Variant="Variant.Filled" Style="width:30px;height:30px;" OnClick="()=> SelectContainer(i, 1)" />
                    foreach (var ii in i.Controls.Where(x => x is WMContainer).Cast<WMContainer>())
                    {
                        <MudIconButton Icon="@Icons.Material.Outlined.Layers" Color="Color.Secondary" Variant="Variant.Filled" Style="width:30px;height:30px;margin-left:35px;" OnClick="()=> SelectContainer(ii, 2)" />
                    }
                }
            </MudStack>
        </MudCollapse>
    </MudStack>
    <MudCard Style="@($"padding:16px;background:#E5E5E5;transition: height 0.5s;height:calc(100% - {(ShowSetting ? (showRadio ? "60px" : "42%") : "60px")})")" Elevation="0">
        <SwiperTabItems @bind-Value="SelecetedIndex">
            @foreach (var item in Images)
            {
                <SwiperTabItem>
                    <MudImage ObjectFit="@ObjectFit.Contain" Src="@item.Src" Elevation="0" Style="width:100%;height:100%" />
                </SwiperTabItem>
            }
        </SwiperTabItems>
    </MudCard>
    <MudStack Row="true" Style="white-space: nowrap; overflow-x:auto;position:absolute;bottom:0px;width:100%">
        @if (CurrentImage!.Canvas.CanvasType == Shared.Enums.CanvasType.Split)
        {
            <MudStack Style="gap:0px;display:flex;align-items:center;text-align:center;margin:auto;width:50px;height:60px;justify-content: center;" @onclick="OpenRadio">
                <MudIcon Icon="@Icons.Material.Filled.FilterFrames" />
                <MudText Typo="Typo.subtitle2">比例</MudText>
            </MudStack>
        }

        @* 画布 *@
        @if (CurrentTemplateCanvas != null)
        {
            <MudStack class="config-btn" @onclick="OpenCanvas">
                <MudIcon Icon="@Icons.Material.Filled.Layers" />
                <MudText Typo="Typo.subtitle2">画布</MudText>
            </MudStack>
        }

        @if (SelectedContainer != null)
        {
            <MudStack class="config-btn" @onclick="()=> OpenControlSetting(SelectedContainer)">
                <MudIcon Icon="@Icons.Material.Filled.Layers" />
                <MudText Typo="Typo.subtitle2">@SelectedContainer?.Name</MudText>
            </MudStack>
            @foreach (var c in SelectedContainer.Controls.Where(x => !(x is WMContainer)))
            {
                <MudStack class="config-btn" @onclick="()=>OpenControlSetting(c)">
                    <MudIcon Icon="@(c is WMText ? Icons.Material.Filled.Title : (c is WMLine ? Icons.Material.Filled.BorderVertical : Icons.Material.Filled.PhotoSizeSelectLarge))" />
                    <MudText Typo="Typo.subtitle2">@c.Name</MudText>
                </MudStack>
            }
        }
    </MudStack>
}

<MBottomSheet @bind-Value="@ShowSetting" ContentStyle="@(showRadio ? "" : "height:40%")">
    <MSheet Style="height:100%;overflow:auto">
        @if (CurrentImage != null && CurrentImage!.Canvas.CanvasType == Shared.Enums.CanvasType.Split && showRadio)
        {
            <MudGrid>
                <MudItem xs="12" Style="width: 100%; overflow-x: auto; white-space: nowrap;">
                    @foreach (var r in radioes)
                    {
                        <MudPaper Elevation="25" Class="ma-1" Width="60px" Style="@($"display: inline-block;background:{(r == CurrentTemplateCanvas.LengthWidthRatio ? Orange.Default : "")}")">
                            <MudStack class="preview-box" @onclick="()=>SetLengthWidthRatio(r)">
                                @if (RadioBase64.TryGetValue(r, out string? src))
                                {
                                    <MudImage Src="@src" Width="50" Height="40" Style="padding:10px;" ObjectFit="ObjectFit.Contain" />
                                }
                                <MudText Typo="Typo.subtitle2">@r</MudText>
                            </MudStack>
                        </MudPaper>
                    }
                </MudItem>
            </MudGrid>
        }

        @* 画布 *@
        @if (ShowSetting && CurrentTemplateCanvas != null && showCanvas)
        {
            <MudPaper Style="width:100%;height:100%;overflow-y:auto;padding:20px" Elevation="0">
                <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                    <MudText Typo="Typo.h5"><b>画布</b></MudText>
                    <MudDivider Class="my-2" />
                    <MudTextField @bind-Value="@CurrentTemplateCanvas.Name" Label="模板名称" Required ErrorText="模板名称不能为空" Variant="Variant.Text" Margin="Margin.Dense" />
                    <MudColorPicker Label="背景颜色" ColorPickerView="ColorPickerView.Grid" @bind-Text="@CurrentTemplateCanvas.BackgroundColor" />
                </MudPaper>
                <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                    <MudRadioGroup @bind-Value="CurrentTemplateCanvas.CanvasType" Class="mx-2">
                        <MudRadio Value="CanvasType.Normal" Color="Color.Secondary" Dense="true">固定主要图片模式</MudRadio>
                        <MudRadio Value="CanvasType.Split" Color="Color.Secondary" Dense="true">自定义比例模式</MudRadio>
                    </MudRadioGroup>
                </MudPaper>
                @if (CurrentTemplateCanvas.CanvasType == CanvasType.Normal)
                {
                    <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                        <MudStack Row Justify="Justify.FlexStart" Style="display:flex;align-items:center;">
                            <MudIconButton Icon="@Icons.Material.Filled.OpenInNew" Variant="Variant.Filled" Size="Size.Small" Color="Color.Primary" OnClick="SelectDefaultImage" />
                            <MudToggleIconButton @bind-Toggled="@CurrentTemplateCanvas.ImageProperties.Show" Size="Size.Small" ToggledSize="Size.Small" Variant="Variant.Filled" Icon="@Icons.Material.Filled.VisibilityOff" Color="@Color.Error" ToggledIcon="@Icons.Material.Filled.Visibility" ToggledColor="@Color.Primary" />
                        </MudStack>
                        <MudDivider Class="my-2" />
                        @if (ImagesBase64.TryGetValue("default", out string? src))
                        {
                            <MudImage Height="250" Style="width:100%;" ObjectFit="ObjectFit.Contain" Src="@src" />
                        }
                    </MudPaper>
                    <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                        <MudStack>
                            <MudText Typo="Typo.subtitle1">上边距(@CurrentTemplateCanvas.BorderThickness.Top)</MudText>
                            <MudSlider Color="Color.Primary" @bind-Value="@CurrentTemplateCanvas.BorderThickness.Top" ValueLabel="true" />
                            <MudText Typo="Typo.subtitle1">下边距(@CurrentTemplateCanvas.BorderThickness.Bottom)</MudText>
                            <MudSlider Color="Color.Primary" @bind-Value="@CurrentTemplateCanvas.BorderThickness.Bottom" ValueLabel="true" />
                            <MudText Typo="Typo.subtitle1">左边距(@CurrentTemplateCanvas.BorderThickness.Left)</MudText>
                            <MudSlider Color="Color.Primary" @bind-Value="@CurrentTemplateCanvas.BorderThickness.Left" ValueLabel="true" />
                            <MudText Typo="Typo.subtitle1">右边距(@CurrentTemplateCanvas.BorderThickness.Right)</MudText>
                            <MudSlider Color="Color.Primary" @bind-Value="@CurrentTemplateCanvas.BorderThickness.Right" ValueLabel="true" />
                        </MudStack>
                        <MudDivider Class="my-2" />
                        <MudStack Row Justify="Justify.SpaceBetween" Style="display:flex;align-items:center;">
                            <MudText Typo="Typo.button">边框等宽</MudText>
                            <MudStack Row>
                                <MudCheckBox @bind-Value="CurrentTemplateCanvas.BorderSameWidth.Top" Size="Size.Small">上</MudCheckBox>
                                <MudCheckBox @bind-Value="CurrentTemplateCanvas.BorderSameWidth.Bottom" Size="Size.Small">下</MudCheckBox>
                                <MudCheckBox @bind-Value="CurrentTemplateCanvas.BorderSameWidth.Left" Size="Size.Small">左</MudCheckBox>
                                <MudCheckBox @bind-Value="CurrentTemplateCanvas.BorderSameWidth.Right" Size="Size.Small">右</MudCheckBox>
                            </MudStack>
                        </MudStack>
                    </MudPaper>
                    <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                        <MudStack Row Justify="Justify.SpaceBetween" Style="display:flex;align-items:center;">
                            <MudText Typo="Typo.button">阴影</MudText>
                            <MudSwitch @bind-Value="@CurrentTemplateCanvas.ImageProperties.EnableShadow" Color="Color.Primary" />
                        </MudStack>
                        <MudDivider Class="my-2" />
                        <MudColorPicker Label="阴影颜色" ColorPickerView="ColorPickerView.Grid" @bind-Text="CurrentTemplateCanvas.ImageProperties.ShadowColor" />
                        <MudText Typo="Typo.subtitle1">深度(@CurrentTemplateCanvas.ImageProperties.ShadowRange)</MudText>
                        <MudSlider Color="Color.Primary" @bind-Value="@CurrentTemplateCanvas.ImageProperties.ShadowRange" ValueLabel="true" />
                    </MudPaper>
                    <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                        <MudStack Row Justify="Justify.SpaceBetween" Style="display:flex;align-items:center;">
                            <MudText Typo="Typo.button">图片圆角</MudText>
                            <MudSwitch @bind-Value="@CurrentTemplateCanvas.ImageProperties.EnableRadius" Color="Color.Primary" />
                        </MudStack>
                        <MudDivider Class="my-2" />
                        <MudText Typo="Typo.subtitle1">圆角度数(@CurrentTemplateCanvas.ImageProperties.CornerRadius)</MudText>
                        <MudSlider Color="Color.Primary" @bind-Value="@CurrentTemplateCanvas.ImageProperties.CornerRadius" ValueLabel="true" />
                    </MudPaper>
                    <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                        <MudStack Row Justify="Justify.SpaceBetween" Style="display:flex;align-items:center;">
                            <MudText Typo="Typo.button">背景高斯模糊</MudText>
                            <MudSwitch @bind-Value="@CurrentTemplateCanvas.ImageProperties.EnableGaussianBlur" Color="Color.Primary" />
                        </MudStack>
                        <MudDivider Class="my-2" />
                        <MudText Typo="Typo.subtitle1">模糊深度(@CurrentTemplateCanvas.ImageProperties.GaussianDeep)</MudText>
                        <MudSlider Color="Color.Primary" @bind-Value="@CurrentTemplateCanvas.ImageProperties.GaussianDeep" ValueLabel="true" />
                    </MudPaper>
                    @if (CurrentTemplateCanvas.FrameProperties != null)
                    {
                        <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                            <MudStack Row Justify="Justify.SpaceBetween" Style="display:flex;align-items:center;">
                                <MudText Typo="Typo.button">画幅调整</MudText>
                                <MudSwitch @bind-Value="@CurrentTemplateCanvas.FrameProperties.Enabled" Color="Color.Primary" />
                            </MudStack>
                            @if (CurrentTemplateCanvas.FrameProperties.Enabled)
                            {
                                <MudDivider Class="my-2" />
                                <MudSelect Value="CurrentTemplateCanvas.LengthWidthRatio" Dense="true" T="string" Label="画幅比例" Variant="Variant.Text" ValueChanged="ValueChanged2">
                                    @foreach (var e in radioes)
                                    {
                                        <MudSelectItem Value="@e" />
                                    }
                                </MudSelect>
                                <MudText Typo="Typo.subtitle1">内边距(@CurrentTemplateCanvas.FrameProperties.BorderPadding)</MudText>
                                <MudSlider Color="Color.Primary" @bind-Value="@CurrentTemplateCanvas.FrameProperties.BorderPadding" ValueLabel="true" />
                                <MudStack Row Justify="Justify.SpaceBetween" Style="align-items: center;">
                                    <MudText Typo="Typo.button">阴影</MudText>
                                    <MudSwitch @bind-Value="@CurrentTemplateCanvas.FrameProperties.EnableShadow" Color="Color.Primary" />
                                </MudStack>
                                <MudDivider Class="my-2" />
                                <MudColorPicker Label="阴影颜色" ColorPickerView="ColorPickerView.Grid" @bind-Text="CurrentTemplateCanvas.FrameProperties.ShadowColor" />
                                <MudText Typo="Typo.subtitle1">深度(@CurrentTemplateCanvas.FrameProperties.ShadowRange)</MudText>
                                <MudSlider Color="Color.Primary" @bind-Value="@CurrentTemplateCanvas.FrameProperties.ShadowRange" ValueLabel="true" />
                                <MudStack Row Justify="Justify.SpaceBetween" Style="align-items: center;">
                                    <MudText Typo="Typo.button">图片圆角</MudText>
                                    <MudSwitch @bind-Value="@CurrentTemplateCanvas.FrameProperties.EnableRadius" Color="Color.Primary" />
                                </MudStack>
                                <MudDivider Class="my-2" />
                                <MudText Typo="Typo.subtitle1">圆角度数(@CurrentTemplateCanvas.FrameProperties.CornerRadius)</MudText>
                                <MudSlider Color="Color.Primary" @bind-Value="@CurrentTemplateCanvas.FrameProperties.CornerRadius" ValueLabel="true" />
                                <MudStack Row Justify="Justify.SpaceBetween" Style="align-items: center;">
                                    <MudText Typo="Typo.button">背景高斯模糊</MudText>
                                    <MudSwitch @bind-Value="@CurrentTemplateCanvas.FrameProperties.EnableGaussianBlur" Color="Color.Primary" />
                                </MudStack>
                                <MudDivider Class="my-2" />
                                <MudText Typo="Typo.subtitle1">模糊深度(@CurrentTemplateCanvas.FrameProperties.GaussianDeep)</MudText>
                                <MudSlider Color="Color.Primary" @bind-Value="@CurrentTemplateCanvas.FrameProperties.GaussianDeep" ValueLabel="true" />
                                <MudStack Row Justify="Justify.SpaceBetween" Style="align-items: center;">
                                    <MudText Typo="Typo.button">原背景透明</MudText>
                                    <MudSwitch @bind-Value="@CurrentTemplateCanvas.FrameProperties.BeforeBkTransparent" Color="Color.Primary" />
                                </MudStack>
                            }
                        </MudPaper>
                    }
                }
                else
                {
                    <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                        <MudSelect Value="CurrentTemplateCanvas.LengthWidthRatio" Dense="true" T="string" Label="画幅比例" Variant="Variant.Text" ValueChanged="ValueChanged2">
                            @foreach (var e in radioes)
                            {
                                <MudSelectItem Value="@e" />
                            }
                        </MudSelect>
                        <MudStack Row Class="mt-5">
                            <MudTextField @bind-Value="@CurrentTemplateCanvas.CustomWidth" Label="自定义宽度(px)" Variant="Variant.Outlined" Margin="Margin.Dense" />
                            <MudTextField @bind-Value="@CurrentTemplateCanvas.CustomHeight" Label="自定义高度(px)" Variant="Variant.Outlined" Margin="Margin.Dense" />
                        </MudStack>
                    </MudPaper>
                }
            </MudPaper>
        }

        @if (ShowSetting && SelectedControl != null && showControlSetting)
        {
            <MudPaper Style="width:100%;height:100%;overflow-y:auto;padding:20px" Elevation="0">
                @if (SelectedControl is WMContainer container && ContainerLevel == 1)
                {
                    <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                        <MudText Typo="Typo.h5"><b>@container.Name</b></MudText>
                        <MudDivider Class="my-3" />
                        <MudColorPicker Label="背景颜色" ColorPickerView="ColorPickerView.Grid" @bind-Text="@container.BackgroundColor" />
                    </MudPaper>
                    <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                        <MudStack Row Justify="Justify.SpaceBetween" Style="display:flex;align-items:center;">
                            <MudText Typo="Typo.button">启用阴影</MudText>
                            <MudSwitch @bind-Value="@container.ContainerProperties.EnableShadow" Color="Color.Primary" />
                        </MudStack>
                        <MudDivider Class="my-3" />
                        <MudColorPicker Label="阴影颜色" ColorPickerView="ColorPickerView.Grid" @bind-Text="container.ContainerProperties.ShadowColor" />
                        <MudText class="mt-5" Typo="Typo.subtitle1">深度(@container.ContainerProperties.ShadowRange)</MudText>
                        <MudSlider Color="Color.Primary" @bind-Value="@container.ContainerProperties.ShadowRange" ValueLabel="true" />

                    </MudPaper>
                    <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                        <MudStack Row Justify="Justify.SpaceBetween" Style="display:flex;align-items:center;">
                            <MudText Typo="Typo.button">启用图片圆角</MudText>
                            <MudSwitch @bind-Value="@container.ContainerProperties.EnableRadius" Color="Color.Primary" />
                        </MudStack>
                        <MudDivider Class="my-3" />
                        <MudText Typo="Typo.subtitle1">圆角度数(@container.ContainerProperties.CornerRadius)</MudText>
                        <MudSlider Color="Color.Primary" @bind-Value="@container.ContainerProperties.CornerRadius" ValueLabel="true" />
                    </MudPaper>
                    <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                        <MudText Typo="Typo.subtitle1">旋转角度(@container.Angle)</MudText>
                        <MudSlider Color="Color.Primary" @bind-Value="@container.Angle" ValueLabel="true" Min="0" Max="360" Step="10" />
                    </MudPaper>
                    <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                        <div class="d-flex justify-space-between">
                            <MudText Typo="Typo.button">容器内组件水平对齐</MudText>
                            <MudToggleGroup @bind-Value="@container.HorizontalAlignment" T="HorizontalAlignment" Outline="true" Delimiters="true" Dense="true" Rounded="false" CheckMark="false" FixedContent="false">
                                <MudToggleItem Value="@(HorizontalAlignment.Left)">
                                    <MudIcon Icon="@Icons.Material.Filled.FormatAlignLeft" />
                                </MudToggleItem>
                                <MudToggleItem Value="@(HorizontalAlignment.Center)">
                                    <MudIcon Icon="@Icons.Material.Filled.FormatAlignCenter" />
                                </MudToggleItem>
                                <MudToggleItem Value="@(HorizontalAlignment.Right)">
                                    <MudIcon Icon="@Icons.Material.Filled.FormatAlignRight" />
                                </MudToggleItem>
                            </MudToggleGroup>
                        </div>
                        <MudDivider Class="my-3" />
                        <div class="d-flex justify-space-between">
                            <MudText Typo="Typo.button">容器内组件竖直对齐</MudText>
                            <MudToggleGroup @bind-Value="@container.VerticalAlignment" T="VerticalAlignment" Outline="true" Delimiters="true" Dense="true" Rounded="false" CheckMark="false" FixedContent="false">
                                <MudToggleItem Value="@(VerticalAlignment.Top)">
                                    <MudIcon Icon="@Icons.Material.Filled.VerticalAlignTop" />
                                </MudToggleItem>
                                <MudToggleItem Value="@(VerticalAlignment.Center)">
                                    <MudIcon Icon="@Icons.Material.Filled.VerticalAlignCenter" />
                                </MudToggleItem>
                                <MudToggleItem Value="@(VerticalAlignment.Bottom)">
                                    <MudIcon Icon="@Icons.Material.Filled.VerticalAlignBottom" />
                                </MudToggleItem>
                            </MudToggleGroup>
                        </div>
                        <MudDivider Class="my-3" />
                        <div class="d-flex justify-space-between">
                            <MudText Typo="Typo.button">容器内组件堆叠方向</MudText>
                            <MudToggleGroup @bind-Value="@container.Orientation" T="Orientation" Outline="true" Delimiters="true" Dense="true" Rounded="false" CheckMark="false" FixedContent="false">
                                <MudToggleItem Value="@(Orientation.Horizontal)">
                                    <MudIcon Icon="@Icons.Material.Filled.BorderHorizontal" />
                                </MudToggleItem>
                                <MudToggleItem Value="@(Orientation.Vertical)">
                                    <MudIcon Icon="@Icons.Material.Filled.BorderVertical" />
                                </MudToggleItem>
                            </MudToggleGroup>
                        </div>
                        <MudDivider Class="my-3" />
                        <div class="d-flex justify-space-between">
                            <MudText Typo="Typo.button">容器依靠方向</MudText>
                            <MudToggleGroup @bind-Value="@container.ContainerAlignment" T="ContainerAlignment" Outline="true" Delimiters="true" Dense="true" Rounded="false" CheckMark="false" FixedContent="false">
                                <MudToggleItem Value="@(ContainerAlignment.Top)">
                                    <MudIcon Icon="@Icons.Material.Filled.ArrowUpward" />
                                </MudToggleItem>
                                <MudToggleItem Value="@(ContainerAlignment.Bottom)">
                                    <MudIcon Icon="@Icons.Material.Filled.ArrowDownward" />
                                </MudToggleItem>
                                <MudToggleItem Value="@(ContainerAlignment.Left)">
                                    <MudIcon Icon="@Icons.Material.Filled.ArrowBack" />
                                </MudToggleItem>
                                <MudToggleItem Value="@(ContainerAlignment.Right)">
                                    <MudIcon Icon="@Icons.Material.Filled.ArrowForward" />
                                </MudToggleItem>
                            </MudToggleGroup>
                        </div>
                    </MudPaper>
                    <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                        <MudText Typo="Typo.subtitle1">上边距(@container.Margin.Top)</MudText>
                        <MudSlider Color="Color.Primary" @bind-Value="@container.Margin.Top" ValueLabel="true" />
                        <MudDivider Class="my-3" />
                        <MudText Typo="Typo.subtitle1">下边距(@container.Margin.Bottom)</MudText>
                        <MudSlider Color="Color.Primary" @bind-Value="@container.Margin.Bottom" ValueLabel="true" />
                        <MudDivider Class="my-3" />
                        <MudText Typo="Typo.subtitle1">左边距(@container.Margin.Left)</MudText>
                        <MudSlider Color="Color.Primary" @bind-Value="@container.Margin.Left" ValueLabel="true" />
                        <MudDivider Class="my-3" />
                        <MudText Typo="Typo.subtitle1">右边距(@container.Margin.Right)</MudText>
                        <MudSlider Color="Color.Primary" @bind-Value="@container.Margin.Right" ValueLabel="true" />
                        <MudDivider Class="my-3" />
                        <MudText Typo="Typo.subtitle1">高(比例)(@container.HeightPercent)</MudText>
                        <MudSlider Color="Color.Primary" @bind-Value="@container.HeightPercent" ValueLabel="true" />
                        <MudDivider Class="my-3" />
                        <MudText Typo="Typo.subtitle1">宽(比例)(@container.WidthPercent)</MudText>
                        <MudSlider Color="Color.Primary" @bind-Value="@container.WidthPercent" ValueLabel="true" />
                    </MudPaper>
                }
                else if (SelectedControl is WMContainer mContainer && ContainerLevel == 2)
                {

                    <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                        <MudText Typo="Typo.h5"><b>@mContainer.Name</b></MudText>
                        <MudDivider Class="my-3" />
                        <div class="d-flex justify-space-between">
                            <MudText Typo="Typo.button">容器内组件水平对齐</MudText>
                            <MudToggleGroup @bind-Value="@mContainer.HorizontalAlignment" T="HorizontalAlignment" Outline="true" Delimiters="true" Dense="true" Rounded="false" CheckMark="false" FixedContent="false">
                                <MudToggleItem Value="@(HorizontalAlignment.Left)">
                                    <MudIcon Icon="@Icons.Material.Filled.FormatAlignLeft" />
                                </MudToggleItem>
                                <MudToggleItem Value="@(HorizontalAlignment.Center)">
                                    <MudIcon Icon="@Icons.Material.Filled.FormatAlignCenter" />
                                </MudToggleItem>
                                <MudToggleItem Value="@(HorizontalAlignment.Right)">
                                    <MudIcon Icon="@Icons.Material.Filled.FormatAlignRight" />
                                </MudToggleItem>
                            </MudToggleGroup>
                        </div>
                        <MudDivider Class="my-3" />
                        <div class="d-flex justify-space-between">
                            <MudText Typo="Typo.button">容器内组件竖直对齐</MudText>
                            <MudToggleGroup @bind-Value="@mContainer.VerticalAlignment" T="VerticalAlignment" Outline="true" Delimiters="true" Dense="true" Rounded="false" CheckMark="false" FixedContent="false">
                                <MudToggleItem Value="@(VerticalAlignment.Top)">
                                    <MudIcon Icon="@Icons.Material.Filled.VerticalAlignTop" />
                                </MudToggleItem>
                                <MudToggleItem Value="@(VerticalAlignment.Center)">
                                    <MudIcon Icon="@Icons.Material.Filled.VerticalAlignCenter" />
                                </MudToggleItem>
                                <MudToggleItem Value="@(VerticalAlignment.Bottom)">
                                    <MudIcon Icon="@Icons.Material.Filled.VerticalAlignBottom" />
                                </MudToggleItem>
                            </MudToggleGroup>
                        </div>

                    </MudPaper>
                    <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                        <MudText Typo="Typo.subtitle1">上边距(@mContainer.Margin.Top)</MudText>
                        <MudSlider Color="Color.Primary" @bind-Value="@mContainer.Margin.Top" ValueLabel="true" />
                        <MudDivider Class="my-3" />
                        <MudText Typo="Typo.subtitle1">下边距(@mContainer.Margin.Bottom)</MudText>
                        <MudSlider Color="Color.Primary" @bind-Value="@mContainer.Margin.Bottom" ValueLabel="true" />
                        <MudDivider Class="my-3" />
                        <MudText Typo="Typo.subtitle1">左边距(@mContainer.Margin.Left)</MudText>
                        <MudSlider Color="Color.Primary" @bind-Value="@mContainer.Margin.Left" ValueLabel="true" />
                        <MudDivider Class="my-3" />
                        <MudText Typo="Typo.subtitle1">右边距(@mContainer.Margin.Right)</MudText>
                        <MudSlider Color="Color.Primary" @bind-Value="@mContainer.Margin.Right" ValueLabel="true" />
                        <MudDivider Class="my-3" />
                        <MudText Typo="Typo.subtitle1">高(比例)(@mContainer.HeightPercent)</MudText>
                        <MudSlider Color="Color.Primary" @bind-Value="@mContainer.HeightPercent" ValueLabel="true" />
                        <MudDivider Class="my-3" />
                        <MudText Typo="Typo.subtitle1">宽(比例, 0自动计算)(@mContainer.WidthPercent)</MudText>
                        <MudSlider Color="Color.Primary" @bind-Value="@mContainer.WidthPercent" ValueLabel="true" />
                    </MudPaper>
                }
                else
                {
                    if (SelectedControl is WMText mText)
                    {
                        <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                            <MudText Typo="Typo.subtitle2">图片EXIF元数据配置</MudText>
                            <MudStack Row class="mt-5" Justify="Justify.SpaceBetween">
                                <div style="width:100%;float:left;overflow-x:auto;white-space:nowrap;border-bottom:1px solid #808080;display: flex;align-items: center;">
                                    @(string.Join(" ", mText.Exifs.Select(x => x.Prefix + x.Value + x.Suffix)))
                                </div>
                                <MudIconButton Icon="@Icons.Material.Filled.OpenInNew" OnClick="(()=>OpenExifDialog(mText))" Style="float:right;max-width:80px;" Size="Size.Small" />
                            </MudStack>
                            <MudColorPicker Label="字体颜色" ColorPickerView="ColorPickerView.Grid" @bind-Text="mText.FontColor" Class="mt-5" />
                            <MudText class="mt-5" Typo="Typo.subtitle1">字体大小(@mText.FontSize)</MudText>
                            <MudSlider Color="Color.Primary" @bind-Value="@mText.FontSize" ValueLabel="true" />

                            <MudDivider Class="my-3" />
                            <MudStack Row Justify="Justify.SpaceBetween" Style="display:flex;align-items:center;">
                                <MudText Typo="Typo.button">斜体</MudText>
                                <MudSwitch @bind-Value="@mText.IsItalic" Color="Color.Primary" />
                            </MudStack>
                            <MudDivider Class="my-3" />
                            <MudStack Row Justify="Justify.SpaceBetween" Style="display:flex;align-items:center;">
                                <MudText Typo="Typo.button">粗体</MudText>
                                <MudSwitch @bind-Value="@mText.IsBold" Color="Color.Primary" />
                            </MudStack>
                            <MudDivider Class="my-3" />

                            <MudStack Row Justify="Justify.SpaceBetween">
                                <div style="width:100%;float:left;overflow-x:auto;white-space:nowrap;border-bottom:1px solid #808080;display: flex;align-items: center;">
                                    @mText.FontFamily
                                </div>
                                <MudIconButton Variant="Variant.Filled" Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Small" OnClick="()=>SelectLocalFont(mText)" />
                            </MudStack>

                        </MudPaper>
                        <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                            <MudStack Row class="mt-5" Style="position:relative">
                                <MudText Align="Align.Justify" Typo="Typo.button">文字边框</MudText>
                                <MudSwitch @bind-Value="@mText.EnableBorder" Color="Color.Primary" Style="position:absolute;right:5px" />
                            </MudStack>

                            <MudDivider Class="my-3" />
                            <MudText Typo="Typo.subtitle1">边框宽度(@mText.BorderWidth)</MudText>
                            <MudSlider Color="Color.Primary" @bind-Value="@mText.BorderWidth" ValueLabel="true" />
                            <MudDivider Class="my-3" />
                            <MudText Typo="Typo.subtitle1">边框圆角度数(@mText.BorderRadius)</MudText>
                            <MudSlider Color="Color.Primary" @bind-Value="@mText.BorderRadius" ValueLabel="true" />
                            <MudDivider Class="my-3" />
                            <MudText Typo="Typo.subtitle1">内边距(@mText.BorderPadding)</MudText>
                            <MudSlider Color="Color.Primary" @bind-Value="@mText.BorderPadding" ValueLabel="true" />
                            <MudDivider Class="my-3" />
                            <MudColorPicker Label="边框颜色" ColorPickerView="ColorPickerView.Grid" @bind-Text="mText.BorderColor" />
                        </MudPaper>
                    }
                    else if (SelectedControl is WMLogo mLogo)
                    {
                        <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                            <MudStack Row Justify="Justify.SpaceBetween">
                                <MudText Typo="Typo.button">白底转透明像素</MudText>
                                <MudSwitch @bind-Value="@mLogo.White2Transparent" Color="Color.Primary" />
                            </MudStack>
                            <MudDivider Class="my-3" />
                            <MudStack Row Justify="Justify.SpaceBetween">
                                <MudText Typo="Typo.button">自动识别品牌图标</MudText>
                                <MudSwitch @bind-Value="@mLogo.AutoSetLogo" Color="Color.Primary" />
                            </MudStack>
                            <MudDivider Class="my-3" />
                            <div Style="display:flex;align-items:center;justify-content: space-between;">
                                <MudText Align="Align.Justify" Typo="Typo.button">图片</MudText>
                                @if (ImagesBase64.TryGetValue(mLogo.ID, out string src))
                                {
                                    <MudImage Src="@src" ObjectFit="ObjectFit.Contain" Width="40" />
                                }
                                <MudIconButton Variant="Variant.Filled" Icon="@Icons.Material.Filled.OpenInNew" OnClick="(()=> OpenLogoDialog(mLogo))" />
                            </div>
                        </MudPaper>
                    }
                    else if (SelectedControl is WMLine mLine)
                    {

                        <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                            <MudColorPicker Label="分割线颜色" ColorPickerView="ColorPickerView.Grid" @bind-Text="mLine.Color" />
                            <div class="d-flex justify-space-between mt-5">
                                <MudText Typo="Typo.button">线方向</MudText>
                                <MudToggleGroup @bind-Value="@mLine.Orientation" T="Orientation" Outline="true" Delimiters="true" Dense="true" Rounded="false" CheckMark="false" FixedContent="false">
                                    <MudToggleItem Value="@(Orientation.Horizontal)">
                                        <MudIcon Icon="@Icons.Material.Filled.BorderHorizontal" />
                                    </MudToggleItem>
                                    <MudToggleItem Value="@(Orientation.Vertical)">
                                        <MudIcon Icon="@Icons.Material.Filled.BorderVertical" />
                                    </MudToggleItem>
                                </MudToggleGroup>
                            </div>
                            <MudDivider Class="my-3" />
                            <MudText Typo="Typo.subtitle2" Style="width:50%">线粗细(@mLine.Thickness)</MudText>
                            <MudSlider Color="Color.Primary" @bind-Value="@mLine.Thickness" ValueLabel="true" Min="0" />
                        </MudPaper>
                    }

                    <MudPaper Style="@($"padding:10px;{cardStyle}")" Elevation="0">
                        <MudText Typo="Typo.subtitle1">上边距(@SelectedControl.Margin.Top)</MudText>
                        <MudSlider Color="Color.Primary" @bind-Value="@SelectedControl.Margin.Top" ValueLabel="true" />
                        <MudDivider Class="my-3" />
                        <MudText Typo="Typo.subtitle1">下边距(@SelectedControl.Margin.Bottom)</MudText>
                        <MudSlider Color="Color.Primary" @bind-Value="@SelectedControl.Margin.Bottom" ValueLabel="true" />
                        <MudDivider Class="my-3" />
                        <MudText Typo="Typo.subtitle1">左边距(@SelectedControl.Margin.Left)</MudText>
                        <MudSlider Color="Color.Primary" @bind-Value="@SelectedControl.Margin.Left" ValueLabel="true" />
                        <MudDivider Class="my-3" />
                        <MudText Typo="Typo.subtitle1">右边距(@SelectedControl.Margin.Right)</MudText>
                        <MudSlider Color="Color.Primary" @bind-Value="@SelectedControl.Margin.Right" ValueLabel="true" />
                        <MudDivider Class="my-3" />
                        <MudText Typo="Typo.subtitle1">组件占容器比例(@SelectedControl.Percent)</MudText>
                        <MudSlider Color="Color.Primary" @bind-Value="@SelectedControl.Percent" ValueLabel="true" />
                    </MudPaper>
                }
            </MudPaper>
        }
    </MSheet>
</MBottomSheet>


<MBottomSheet @bind-Value="@openSave">
    <MSheet>
        <Watermark.Razor.Components.SavePanel ExportEvent="Export"/>
    </MSheet>
</MBottomSheet>


<MBottomSheet @bind-Value="@openLogoDialog" ContentStyle="height:60%;">
    <MSheet Style="height:100%;overflow:auto">
        <Watermark.Razor.Components.LogoDialogContent OnClick="SelectLogoCallback" />
    </MSheet>
</MBottomSheet>
<MBottomSheet @bind-Value="@openFontsDialog" ContentStyle="height:60%;">
    <MSheet Style="height:100%;overflow:auto">
        <FontsDialog OnImageTouched="SelectFontCallback" />
    </MSheet>
</MBottomSheet>

<MudOverlay Visible="@loadingShow" DarkBackground="true" Absolute="true" ZIndex="99999">
    <MudPaper Width="200px" Height="200px" Elevation="0" Style="justify-content:center;display:flex;align-items:center;">
        <MudStack Style="text-align:center;">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Style="margin: auto;" />
            <MudText Typo="Typo.subtitle1" Color="Color.Default" Class="mt-2">
                @loadingMessage[0]
                <br />
                @loadingMessage[1]
            </MudText>
        </MudStack>

    </MudPaper>
</MudOverlay>

@code {
    public WMTemplateList CurrentImage { get; set; }
    [Parameter]
    public string names { get; set; }
    [Parameter]
    public string templateId { get; set; }

    public List<WMTemplateList> Images { get; set; }

    string[] loadingMessage = ["加载中", ""];
    bool loadingShow = false;
    bool SrcLoading = false;
    bool openSave = false;
    bool _expanded = false;
    bool showSetting = false;
    public bool ShowSetting
    {
        get => showSetting;
        set
        {
            showSetting = value;
            if (!value) RefreshEditImage();
        }
    }
    bool showRadio = false;
    bool showControlSetting = false;
    bool showCanvas = false;
    WMText? selectedText;
    WMLogo? selectedLogo;
    bool openFontsDialog = false;
    bool openLogoDialog = false;
    ConcurrentDictionary<string, string> ImagesBase64 = new();
    List<string> radioes = ["1:1", "16:9", "9:16", "3:2", "2:3", "4:3", "3:4", "21:9", "18:9", "1.85:1", "2.39:1"];
    Dictionary<string, string> RadioBase64 = [];
    WMContainer? SelectedContainer;
    int ContainerLevel;
    IWMControl? SelectedControl;
    WMCanvas CurrentTemplateCanvas;
    string cardStyle => $"margin:8px 0px;background:{Colors.Grey.Lighten4}";

    int selectedIndex = 0;
    public int SelecetedIndex
    {
        get => selectedIndex;
        set
        {
            selectedIndex = value;
            CurrentImage = Images[value];
            RefreshEditImage();
        }
    }

    protected override async Task OnInitializedAsync()
    {
#if ANDROID
    MainActivity.SetColor?.Invoke(Colors.Grey.Lighten4);
#endif
        try
        {
            var canvas = await Global.GetCanvas(templateId);
            if (canvas is null) return;
            CurrentTemplateCanvas = canvas;
            await InitImages(names, templateId);
            RadioBase64 = Global.GetRadio();
            await InitLogoCacheDic();
            SelectedContainer = CurrentTemplateCanvas.Children.FirstOrDefault();
            var _ = api.PageVisitRecord(ProgramPage.Design, Platform.Andorid);
        }
        catch (Exception ex)
        {
            Common.ShowMsg(PopupService, ex.Message, AlertTypes.Error);
        }
        finally
        {
            loadingShow = false;
            StateHasChanged();
        }

    }

    async Task InitImages(string names, string templateId)
    {
        var fileNames = names.Split(';');
        Images = new List<WMTemplateList>();
        if (!Directory.Exists(Global.AppPath.ThumbnailFolder))
        {
            Directory.CreateDirectory(Global.AppPath.ThumbnailFolder);
        }

        if (CurrentTemplateCanvas.CanvasType == CanvasType.Normal)
        {
            foreach (var fullPath in fileNames)
            {
                var img = new WMTemplateList();
                var cvs = Global.ReadConfig(Global.CanvasSerialize(CurrentTemplateCanvas));
                cvs.Path = fullPath;
                img.Canvas = cvs;
                cvs.Exif[cvs.ID] = await ExifHelper.ReadImageAsync(fullPath);
                img.ID = cvs.ID;
                img.Path = fullPath;
                Global.CheckImageExtension(fullPath);
                var thumbnail = Global.AppPath.ThumbnailFolder + Path.GetFileName(fullPath);
                await Global.WriteThumbnailImageAsync(fullPath, thumbnail);
                Images.Add(img);
            }
            CurrentImage = Images.First();
        }
        else
        {
            Dictionary<string, Dictionary<string, string>> exif = [];
            exif[CurrentTemplateCanvas.ID] = ExifHelper.DefaultMeta;
            int c = 0;
            foreach (var container in CurrentTemplateCanvas.Children)
            {
                if (c <= fileNames.Count() - 1 && !container.ContainerProperties.FixImage)
                {
                    container.Path = fileNames.Skip(c++).Take(1).First();
                    exif[container.ID] = await ExifHelper.ReadImageAsync(container.Path);
                }
            }

            CurrentImage = new();
            CurrentTemplateCanvas.Exif = exif;
            CurrentImage.Canvas = CurrentTemplateCanvas;
            CurrentImage.ID = CurrentImage.Canvas.ID;
            Images = [CurrentImage];
        }
        var b64 = await helper.GenerationAsync(CurrentImage.Canvas, null, true, false);
        CurrentImage.Src = await JSRuntime.InvokeAsync<string>("byteToUrl", b64);
    }


    async void OpenExifDialog(WMText mText)
    {
        var parameters = new DialogParameters<Watermark.Razor.Components.ExifConfig>();
        parameters.Add(x => x.mText, mText);
        var dic = CurrentImage.Canvas.Children.Where(x => !x.ContainerProperties.FixImage).ToDictionary((k) => k.ID, v => v.Name);
        dic[CurrentImage.Canvas.ID] = CurrentImage.Canvas.Name;
        parameters.Add(x => x.ContainerId2Name, dic.Reverse().ToDictionary());
        parameters.Add(x => x.CanvasType, CurrentImage.Canvas.CanvasType);
        var option = new DialogOptions() { NoHeader = true, MaxWidth = MaxWidth.Medium };
        var rst = DialogService.Show<Watermark.Razor.Components.ExifConfig>("", parameters, option);
        var dialogResult = await rst.Result;
        if (!dialogResult.Canceled)
        {
            WMText text = (WMText)dialogResult.Data;
            mText.Exifs = text.Exifs;
            mText.BindedContainerId = text.BindedContainerId;
            RefreshEditImage();
            StateHasChanged();
        }
    }

    async void SelectSourceImageExif()
    {
        var result = await MediaPicker.Default.PickPhotoAsync(new MediaPickerOptions
            {
                Title = "选择图片"
            });

        if (result == null) return;
        try
        {
            CurrentImage.Canvas.Exif[CurrentImage.Canvas.ID] = ExifHelper.ReadImage(result.FullPath);
            RefreshEditImage();
        }
        catch (Exception ex)
        {
            Common.ShowMsg(PopupService, $"不支持的图片格式：{ex.Message}", AlertTypes.Error);
        }
    }

    async void OpenFullExifInfo()
    {
        var parameters = new DialogParameters<ExifInfo>();
        var meta = CurrentImage.Canvas.Exif.Any() ? CurrentImage.Canvas.Exif.FirstOrDefault().Value : ExifHelper.DefaultMeta;
        parameters.Add(x => x.Exifs, ExifHelper.ReadAllExif(meta));
        var option = new DialogOptions() { NoHeader = true, MaxWidth = MaxWidth.Medium };
        var rst = DialogService.Show<ExifInfo>("", parameters, option);
        var dialogResult = await rst.Result;
    }

    public async void RefreshEditImage()
    {
        SrcLoading = true;
        StateHasChanged();
        CurrentTemplateCanvas.Exif = CurrentImage.Canvas.Exif;
        CurrentTemplateCanvas.Path = CurrentImage.Path;
        var b64 = await helper.GenerationAsync(CurrentTemplateCanvas, null, true, false);
        CurrentImage.Src = await JSRuntime.InvokeAsync<string>("byteToUrl", b64);
        SrcLoading = false;
        StateHasChanged();
    }

    void CloseDrawerClick()
    {
        HapticFeedback.Default.Perform(HapticFeedbackType.Click);
        NavController.Pop();
    }

    async void Export()
    {
        HapticFeedback.Default.Perform(HapticFeedbackType.Click);
        var helper = new WatermarkHelper();
        loadingShow = true;
        StateHasChanged();
        int cot = 1;
        foreach (var item in Images)
        {
            loadingMessage[0] = "导出中";
            loadingMessage[1] = $"共{Images.Count}张，目前第{cot++}张";
            var cvs = Global.ReadConfig(Global.CanvasSerialize(CurrentTemplateCanvas));
            cvs.Path = item.Path;
            cvs.Exif = item.Canvas.Exif;
            var b64 = await helper.GenerationAsync(cvs, null, false, false);
#if ANDROID
	var fn = Path.GetFileNameWithoutExtension(item.Canvas.Path) ?? Guid.NewGuid().ToString();
	Watermark.Andorid.SavePictureService.SavePicture(b64, "DFX_" + fn);
#endif
            StateHasChanged();
        }
        loadingShow = false;
        Common.ShowMsg(PopupService, "保存成功。", AlertTypes.Success);
        openSave = false;
        StateHasChanged();
    }

    async Task InitLogoCacheDic()
    {
        ConcurrentDictionary<string, byte[]> dic = new();
        var p = Path.Combine(Global.AppPath.TemplatesFolder, CurrentTemplateCanvas.ID, "default.jpg");
        Global.ImageFile2Base64(dic, p, "default");
        var folder = Global.AppPath.TemplatesFolder + CurrentTemplateCanvas.ID + System.IO.Path.DirectorySeparatorChar;
        CurrentTemplateCanvas.Children.ForEach(c =>
        {
            if (!string.IsNullOrEmpty(c.Path)) Global.ImageFile2Base64(dic, folder + c.Path, c.ID);
            c.Controls.ForEach(x =>
            {
                if (x is WMLogo mLogo) Global.ImageFile2Base64(dic, folder + mLogo.Path, mLogo.ID);
                else if (x is WMContainer mContainer)
                {
                    mContainer.Controls.ForEach(z =>
                    {
                        if (z is WMLogo logo1) Global.ImageFile2Base64(dic, folder + logo1.Path, logo1.ID);
                    });

                };
            });
        });
        foreach (var e in dic)
        {
            ImagesBase64[e.Key] = await JSRuntime.InvokeAsync<string>("byteToUrl", e.Value);
        }
    }

    void ExpandSwitch()
    {
        HapticFeedback.Default.Perform(HapticFeedbackType.Click);
        _expanded = !_expanded;
    }

    void SelectLocalFont(WMText mText)
    {
        HapticFeedback.Default.Perform(HapticFeedbackType.Click);
        selectedText = mText;
        openFontsDialog = true;
    }

    void OpenLogoDialog(WMLogo mLogo)
    {
        HapticFeedback.Default.Perform(HapticFeedbackType.Click);
        selectedLogo = mLogo;
        openLogoDialog = true;
    }

    void SetLengthWidthRatio(string v)
    {
        HapticFeedback.Default.Perform(HapticFeedbackType.Click);
        CurrentTemplateCanvas.LengthWidthRatio = v;
        var wh = v.Split(":");
        var w = Convert.ToDouble(wh[0]);
        var h = Convert.ToDouble(wh[1]);
        var xs = 6000 / w;
        CurrentTemplateCanvas.CustomWidth = 6000;
        CurrentTemplateCanvas.CustomHeight = (int)(xs * h);
        StateHasChanged();
    }

    void OpenCanvas()
    {
        HapticFeedback.Default.Perform(HapticFeedbackType.Click);
        showRadio = false;
        showCanvas = true;
        showControlSetting = false;
        ShowSetting = true;
    }

    void OpenControlSetting(IWMControl control)
    {
        HapticFeedback.Default.Perform(HapticFeedbackType.Click);
        showRadio = false;
        showControlSetting = true;
        SelectedControl = control;
        ShowSetting = true;
        showCanvas = false;
        StateHasChanged();
    }

    void SelectFontCallback(KeyValuePair<string, string> pair)
    {
        HapticFeedback.Default.Perform(HapticFeedbackType.Click);
        if (selectedText is null) return;
        selectedText.FontFamily = pair.Key;
        openFontsDialog = false;
        StateHasChanged();
    }

    void SelectLogoCallback(KeyValuePair<string, string> pair)
    {
        HapticFeedback.Default.Perform(HapticFeedbackType.Click);
        if (selectedLogo is null) return;
        ImagesBase64[pair.Key] = pair.Value;
        selectedLogo.Path = pair.Key;
        ImagesBase64[selectedLogo.ID] = pair.Value;
        openLogoDialog = false;
        StateHasChanged();
    }

    void OpenSave()
    {
        HapticFeedback.Default.Perform(HapticFeedbackType.Click);
        openSave = true;
    }

    void OpenRadio()
    {
        HapticFeedback.Default.Perform(HapticFeedbackType.Click);
        ShowSetting = true;
        showRadio = true;
        showControlSetting = false;
    }

    void SelectContainer(WMContainer i, int lv)
    {
        HapticFeedback.Default.Perform(HapticFeedbackType.Click);
        SelectedContainer = i;
        ContainerLevel = lv;
    }

    void ValueChanged2(string v)
    {
        CurrentTemplateCanvas.LengthWidthRatio = v;
        var wh = v.Split(":");
        var w = Convert.ToDouble(wh[0]);
        var h = Convert.ToDouble(wh[1]);
        var xs = 6000 / w;
        CurrentTemplateCanvas.CustomWidth = 6000;
        CurrentTemplateCanvas.CustomHeight = (int)(xs * h);
    }

    async void SelectDefaultImage()
    {
        var result = await picker.PickFilesAsync("pick", ClientInstance.FileType, true);
        if (result != null && result.Count() > 0)
        {
            var p = result.First().FileResult!.FullPath;
            var destFolder = Global.AppPath.TemplatesFolder + CurrentTemplateCanvas.ID;
            if (!System.IO.Directory.Exists(destFolder))
            {
                System.IO.Directory.CreateDirectory(destFolder);
            }
            if (string.IsNullOrEmpty(p)) return;
            ConcurrentDictionary<string, byte[]> dic = new();
            var destFile = destFolder + System.IO.Path.DirectorySeparatorChar + "default.jpg";
            SkiaSharp.SKBitmap bitmap = SkiaSharp.SKBitmap.Decode(p);
            Global.WriteThumbnailImage(bitmap, destFile);
            Global.ImageFile2Base64(dic, destFile, "default");
            ImagesBase64["default"] = await JSRuntime.InvokeAsync<string>("byteToUrl", dic.First().Value);
        }
    }
}
