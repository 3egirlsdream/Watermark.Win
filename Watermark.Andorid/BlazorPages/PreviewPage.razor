@page "/preview"
@using System.Collections.Concurrent
@using LukeMauiFilePicker
@using Watermark.Shared.Models
@using Watermark.Win.Models
@using Watermark.Shared.Enums
@using HorizontalAlignment = Watermark.Shared.Enums.HorizontalAlignment
@using VerticalAlignment = Watermark.Shared.Enums.VerticalAlignment
@using Orientation = Watermark.Shared.Enums.Orientation
@using static MudBlazor.Colors
@inject IDialogService DialogService
@inject NavigationManager navigationManager
@inject ISnackbar Snackbar
@inject IWMWatermarkHelper helper
@inject IJSRuntime JSRuntime
@inject IFilePickerService picker

<style>
    .preview-box {
        gap: 0px;
        display: flex;
        align-items: center;
        text-align: center;
        margin: auto;
        width: 60px;
        height: 60px;
        justify-content: center;
    }

    .config-btn {
        gap: 0px;
        display: flex;
        align-items: center;
        text-align: center;
        margin: auto;
        width: 50px;
        height: 60px;
        justify-content: center;
    }

    .mud-grid-spacing-xs-3 {
        width: 100%;
        margin: 0px;
    }

    input[type=range] {
        pointer-events: none;
    }

        input[type=range]::-webkit-slider-thumb { /*Webkit Browsers like Chrome and Safari*/
            pointer-events: auto;
        }

        input[type=range]::-moz-range-thumb { /*Firefox*/
            pointer-events: auto;
        }

        input[type=range]::-ms-thumb { /*Internet Explorer*/
            pointer-events: auto;
        }


    ::-webkit-scrollbar {
        width: 0px;
        display: none;
    }

</style>
<div></div>
@code {
    public WMTemplateList CurrentImage { get; set; }
    [Parameter]
    public EventCallback CloseDrawer { get; set; }
    [Parameter]
    public List<WMTemplateList> Images { get; set; }

    string[] loadingMessage = ["", ""];
    bool loadingShow = false;
    bool SrcLoading = false;
    bool openSave = false;
    bool _expanded = false;
    bool showSetting = false;
    public bool ShowSetting
    {
        get => showSetting;
        set
        {
            showSetting = value;
            if (!value) RefreshEditImage();
        }
    }
    bool showRadio = false;
    bool showControlSetting = false;
    bool showCanvas = false;
    WMText selectedText;
    WMLogo selectedLogo;
    bool openFontsDialog = false;
    bool openLogoDialog = false;
    ConcurrentDictionary<string, string> ImagesBase64 = new();
    List<string> radioes = ["1:1", "16:9", "9:16", "3:2", "2:3", "4:3", "3:4", "21:9", "18:9", "1.85:1", "2.39:1"];
    Dictionary<string, string> RadioBase64;
    WMContainer SelectedContainer;
    int ContainerLevel;
    IWMControl SelectedControl;
    WMCanvas CurrentTemplate;
    string cardStyle => $"margin:8px 0px;background:{Colors.Grey.Lighten4}";

    int selectedIndex = 0;
    public int SelecetedIndex
    {
        get => selectedIndex;
        set
        {
            selectedIndex = value;
            CurrentImage = Images[value];
            RefreshEditImage();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        CurrentImage = Images[0];
        CurrentTemplate = Global.ReadConfig(Global.CanvasSerialize(CurrentImage.Canvas));
        RadioBase64 = Global.GetRadio();
        await InitLogoCacheDic();
        SelectedContainer = CurrentTemplate.Children.FirstOrDefault();
        var api = new APIHelper();
        var _ = api.PageVisitRecord(ProgramPage.Design, Platform.Andorid);
    }

    async void OpenExifDialog(WMText mText)
    {
        var parameters = new DialogParameters<Watermark.Razor.Components.ExifConfig>();
        parameters.Add(x => x.Exifs, mText.Exifs);
        var option = new DialogOptions() { NoHeader = true, MaxWidth = MaxWidth.Medium };
        var rst = DialogService.Show<Watermark.Razor.Components.ExifConfig>("", parameters, option);
        var dialogResult = await rst.Result;
        if (!dialogResult.Canceled)
        {
            mText.Exifs = (List<WMExifConfigInfo>)dialogResult.Data;
            RefreshEditImage();
            StateHasChanged();
        }
    }

    async void SelectSourceImageExif()
    {
        var result = await MediaPicker.Default.PickPhotoAsync(new MediaPickerOptions
            {
                Title = "选择图片"
            });

        if (result == null) return;
        try
        {
            CurrentImage.Canvas.Exif = ExifHelper.ReadImage(result.FullPath);
            RefreshEditImage();
        }
        catch (Exception ex)
        {
            ClientInstance.ShowMsg(Snackbar, $"不支持的图片格式：{ex.Message}", Severity.Error);
        }
    }

    async void OpenFullExifInfo()
    {
        var parameters = new DialogParameters<ExifInfo>();
        parameters.Add(x => x.Exifs, ExifHelper.ReadAllExif(CurrentImage.Canvas.Exif));
        var option = new DialogOptions() { NoHeader = true, MaxWidth = MaxWidth.Medium };
        var rst = DialogService.Show<ExifInfo>("", parameters, option);
        var dialogResult = await rst.Result;
    }

    public async void RefreshEditImage()
    {
        SrcLoading = true;
        StateHasChanged();
        CurrentTemplate.Exif = CurrentImage.Canvas.Exif;
        CurrentTemplate.Path = CurrentImage.Path;
        var b64 = await helper.GenerationAsync(CurrentTemplate, null, true, false);
        CurrentImage.Src = await JSRuntime.InvokeAsync<string>("byteToUrl", b64);
        SrcLoading = false;
        StateHasChanged();
    }

    void CloseDrawerClick()
    {
        HapticFeedback.Default.Perform(HapticFeedbackType.Click);
        CloseDrawer.InvokeAsync();
    }

    async void Export()
    {
        HapticFeedback.Default.Perform(HapticFeedbackType.Click);
        var helper = new WatermarkHelper();
        loadingShow = true;
        StateHasChanged();
        int cot = 1;
        foreach (var item in Images)
        {
            loadingMessage[0] = "导出中";
            loadingMessage[1] = $"共{Images.Count}张，目前第{cot++}张";
            var cvs = Global.ReadConfig(Global.CanvasSerialize(CurrentTemplate));
            cvs.Path = item.Path;
            cvs.Exif = item.Canvas.Exif;
            var b64 = await helper.GenerationAsync(cvs, null, false, false);
#if ANDROID
	var fn = Path.GetFileNameWithoutExtension(item.Canvas.Path) ?? Guid.NewGuid().ToString();
	Watermark.Andorid.SavePictureService.SavePicture(b64, "DFX_" + fn);
#endif
            StateHasChanged();
        }
        loadingShow = false;
        Watermark.Shared.Models.ClientInstance.ShowMsg(Snackbar, "保存成功。", Severity.Success);
        openSave = false;
        StateHasChanged();
    }

    async Task InitLogoCacheDic()
    {
        ConcurrentDictionary<string, byte[]> dic = new();
        var p = Path.Combine(Global.AppPath.TemplatesFolder, CurrentTemplate.ID, "default.jpg");
        Global.ImageFile2Base64(dic, p, "default");
        var folder = Global.AppPath.TemplatesFolder + CurrentTemplate.ID + System.IO.Path.DirectorySeparatorChar;
        CurrentTemplate.Children.ForEach(c =>
        {
            if (!string.IsNullOrEmpty(c.Path)) Global.ImageFile2Base64(dic, folder + c.Path, c.ID);
            c.Controls.ForEach(x =>
            {
                if (x is WMLogo mLogo) Global.ImageFile2Base64(dic, folder + mLogo.Path, mLogo.ID);
                else if (x is WMContainer mContainer)
                {
                    mContainer.Controls.ForEach(z =>
                    {
                        if (z is WMLogo logo1) Global.ImageFile2Base64(dic, folder + logo1.Path, logo1.ID);
                    });

                };
            });
        });
        foreach (var e in dic)
        {
            ImagesBase64[e.Key] = await JSRuntime.InvokeAsync<string>("byteToUrl", e.Value);
        }
    }

    void ExpandSwitch()
    {
        HapticFeedback.Default.Perform(HapticFeedbackType.Click);
        _expanded = !_expanded;
    }

    void SelectLocalFont(WMText mText)
    {
        HapticFeedback.Default.Perform(HapticFeedbackType.Click);
        selectedText = mText;
        openFontsDialog = true;
    }

    void OpenLogoDialog(WMLogo mLogo)
    {
        HapticFeedback.Default.Perform(HapticFeedbackType.Click);
        selectedLogo = mLogo;
        openLogoDialog = true;
    }

    void SetLengthWidthRatio(string v)
    {
        HapticFeedback.Default.Perform(HapticFeedbackType.Click);
        CurrentTemplate.LengthWidthRatio = v;
        var wh = v.Split(":");
        var w = Convert.ToDouble(wh[0]);
        var h = Convert.ToDouble(wh[1]);
        var xs = 6000 / w;
        CurrentTemplate.CustomWidth = 6000;
        CurrentTemplate.CustomHeight = (int)(xs * h);
        StateHasChanged();
    }

    void OpenCanvas()
    {
        HapticFeedback.Default.Perform(HapticFeedbackType.Click);
        showRadio = false;
        showCanvas = true;
        showControlSetting = false;
        ShowSetting = true;
    }

    void OpenControlSetting(IWMControl control)
    {
        HapticFeedback.Default.Perform(HapticFeedbackType.Click);
        showRadio = false;
        showControlSetting = true;
        SelectedControl = control;
        ShowSetting = true;
        StateHasChanged();
    }

    void SelectFontCallback(KeyValuePair<string, string> pair)
    {
        HapticFeedback.Default.Perform(HapticFeedbackType.Click);
        if (selectedText is null) return;
        selectedText.FontFamily = pair.Key;
        openFontsDialog = false;
        StateHasChanged();
    }

    void SelectLogoCallback(KeyValuePair<string, string> pair)
    {
        HapticFeedback.Default.Perform(HapticFeedbackType.Click);
        if (selectedLogo is null) return;
        ImagesBase64[pair.Key] = pair.Value;
        selectedLogo.Path = pair.Key;
        ImagesBase64[selectedLogo.ID] = pair.Value;
        openLogoDialog = false;
        StateHasChanged();
    }

    void OpenSave()
    {
        HapticFeedback.Default.Perform(HapticFeedbackType.Click);
        openSave = true;
    }

    void OpenRadio()
    {
        HapticFeedback.Default.Perform(HapticFeedbackType.Click);
        ShowSetting = true;
        showRadio = true;
        showControlSetting = false;
    }

    void SelectContainer(WMContainer i, int lv)
    {
        HapticFeedback.Default.Perform(HapticFeedbackType.Click);
        SelectedContainer = i;
        ContainerLevel = lv;
    }

    void ValueChanged2(string v)
    {
        CurrentTemplate.LengthWidthRatio = v;
        var wh = v.Split(":");
        var w = Convert.ToDouble(wh[0]);
        var h = Convert.ToDouble(wh[1]);
        var xs = 6000 / w;
        CurrentTemplate.CustomWidth = 6000;
        CurrentTemplate.CustomHeight = (int)(xs * h);
    }

    async void SelectDefaultImage()
    {
        var result = await picker.PickFilesAsync("pick", ClientInstance.FileType, true);
        if (result != null && result.Count() > 0)
        {
            var p = result.First().FileResult!.FullPath;
            var destFolder = Global.AppPath.TemplatesFolder + CurrentTemplate.ID;
            if (!System.IO.Directory.Exists(destFolder))
            {
                System.IO.Directory.CreateDirectory(destFolder);
            }
            if (string.IsNullOrEmpty(p)) return;
            ConcurrentDictionary<string, byte[]> dic = new();
            var destFile = destFolder + System.IO.Path.DirectorySeparatorChar + "default.jpg";
            SkiaSharp.SKBitmap bitmap = SkiaSharp.SKBitmap.Decode(p);
            Global.WriteThumbnailImage(bitmap, destFile);
            Global.ImageFile2Base64(dic, destFile, "default");
            ImagesBase64["default"] = await JSRuntime.InvokeAsync<string>("byteToUrl", dic.First().Value);
        }
    }
}
