@page "/market"
@using Masa.Blazor
@using Watermark.Andorid.Components.Layout
@using Watermark.Razor
@using Watermark.Shared.Enums
@using Watermark.Shared.Models
@using Watermark.Win.Models
@using static Watermark.Andorid.BlazorPages.IndexView
@using static Watermark.Andorid.BlazorPages.TemplateLargeView
@inject PageStackNavController NavController
@inject IPopupService PopupService
@inject IWMWatermarkHelper helper
@inject IJSRuntime JSRuntime
@layout MainLayout

<style scoped>
    .row--dense > .col, .row--dense > [class*=col-] {
        padding:2px;
    }
    .m-slide-group__prev {
        display: none !important;
    }

    .dfm-card-name {
        text-overflow: ellipsis;
        white-space: nowrap;
        overflow-x: hidden
    }

    .dfm-card-user-name {
        position: relative;
        display: flex;
        align-items: center;
        text-overflow: ellipsis;
        white-space: nowrap;
        overflow-x: hidden
    }

    .dfm-card-footer {
        position: relative;
        height: 30px;
        display: flex;
        align-items: center;
    }


    .flex-vertical-center {
        display: flex;
        align-items: center;
    }

    .swiper-wrapper {
        height: 100% !important;
    }

    .m-presets-block-text > div:nth-child(2) {
        overflow:hidden;
    }
</style>

<div style="height:100%;">
    <MTabs SliderColor="black" @bind-Value="tab" Height="30" ShowArrows="false" Centered>
        @foreach (var sub in tabs)
        {
            <MTab Value="sub">
                @sub
            </MTab>
        }
    </MTabs>

    <div style="@($"height: calc(100% - 30px);")">
        <SwiperTabItems Value="tabs.IndexOf(tab.ToString())" ValueChanged="@((e) => tab = tabs[e])">
            @foreach (var sub in subscribed)
            {
                <SwiperTabItem>
                    <div style="height:100%;overflow:auto" id="@("infinite-scroll-usage" + subscribed.IndexOf(sub))">
                        <MPullRefresh OnRefresh="OnRefresh" PullingText="刷新中" CanReleaseText="下拉刷新" SuccessText="刷新成功">
                            <MCard Flat style="padding: 6px !important;height:100%; scrollbar-width: none; display:flex;justify-content:flex-start;flex-wrap: wrap;">
                                @RenderProductList(sub.Item2)
                                @if (sub.Item1 == "最新")
                                {
                                    <MInfiniteScroll Parent="@("#infinite-scroll-usage" + subscribed.IndexOf(sub))" Style="margin:auto;"
                                                     OnLoad="@HandleOnLoad">
                                    </MInfiniteScroll>
                                }
                            </MCard>
                        </MPullRefresh>
                    </div>
                </SwiperTabItem>
            }
        </SwiperTabItems>
    </div>
    <MOverlay Contained Opacity="0" Value="loadMore">
        <MProgressCircular Indeterminate Color="primary" />
    </MOverlay>
    <MDialog @bind-Value="parameter.FocusImageShow" Transition="dialog-bottom-transition" ContentClass="pa-2" ContentStyle="display:flex;align-items:center;background:#EAEAEA">
        <TemplateLargeView FocusImage="parameter.FocusImage"
                           FocusImageId="@parameter.FocusImageId"
                           FocusImageSrc="@parameter.FocusImageSrc"
                           FocusImageType="parameter.FocusImageType"
                           ILikeTemplates="parameter.ILikeTemplates"
                           subscribed="subscribed"
                           ZipedTemplates="ZipedTemplates"
                           DownloadEvent="DownloadTemplate"
                           CloseEvent="() => parameter.FocusImageShow = false" />
    </MDialog>
</div>

@code {
    StringNumber tab = "推荐";
    List<string> tabs = new List<string> { "推荐", "热门", "拼图", "最新" };
    bool loadMore = true;
    List<Tuple<string, List<WMZipedTemplate>>> subscribed = new();
    List<WMZipedTemplate> ZipedTemplates = new();
    int start = 1;
    private MInfiniteScroll? _infiniteScroll;
    ViewParameter parameter = new();
    List<BlockTextTag> tags = new List<BlockTextTag> {};
    FailedBox failedBox = new();

    internal RenderFragment RenderProductList(List<WMZipedTemplate> products) => __builder =>
       {
           <MRow Dense>
               @foreach (var t in products)
               {
                   <MCol Cols="6">
                       <MCard Class="pa-2" style="background:#E5E5E5;" Elevation="0" Flat OnClick="()=> OpenFocus('a', t, true)">
                           @if (!string.IsNullOrEmpty(t.Src))
                           {
                               <MudImage Style="width:100%;height:165px;" Src="@t.Src" ObjectFit="ObjectFit.Contain" />
                           }
                           else
                           {
                               <MudProgressCircular Color="Color.Secondary" Indeterminate="true" Style="margin-left:calc(50% - 20px)" />
                           }
                           <MCardActions Style="padding:0px;">
                               <div style="width:100%;">
                                   <Watermark.Razor.Parts.CardTitle t="t" ShowDesc="false" Small="true" Tags="[]"/>
                                   <div class="dfm-card-user-name" style="justify-content: space-between;">
                                       <div style="display:flex;align-items:center;">
                                           @if (t.UserId == "0BECCA9A-6F10-4A88-8753-921195D08853" || t.UserId == "9DEBF7DC-F58C-4667-BACF-A6BFD18352EB")
                                           {
                                               <MIcon Color="orange" Size="12">mdi-check-decagram</MIcon>
                                           }
                                           else
                                           {
                                               <MIcon Size="12">mdi-account-circle</MIcon>
                                           }
                                           <p  style="@($"color:{Colors.Grey.Default};padding-top: 1px;margin-left:2px;font-size:10px;margin-bottom:0")">
                                               @t.UserDisplayName
                                           </p>
                                       </div>
                                       <div style="display:flex;align-items:center;">
                                           <Watermark.Razor.Parts.IconCoin />
                                           <p style="margin-bottom:0;font-size:10px;">
                                               @t.Coins
                                           </p>
                                       </div>
                                   </div>
                               </div>

                           </MCardActions>
                       </MCard>
                   </MCol>
               }
           </MRow>
       };


    async Task OnRefresh()
    {
        start = 1;
        await LoadTemplatesMarket();
    }

    async Task HandleOnLoad(InfiniteScrollLoadEventArgs args)
    {
        var c = subscribed.LastOrDefault()?.Item2.Count ?? 0;
        start++;
        await LoadTemplatesMarket();
        var c2 = subscribed.LastOrDefault()?.Item2.Count ?? 0;
        args.Status = c2 == c ? InfiniteScrollLoadStatus.Empty : InfiniteScrollLoadStatus.Ok;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadTemplatesMarket();
        }
        catch (Exception ex)
        {
            Common.ShowMsg(PopupService, ex.Message, AlertTypes.Error);
        }
        finally
        {
            StateHasChanged();
            loadMore = false;
        }
    }

    async Task LoadTemplatesMarket()
    {
        var helper = new APIHelper();
        var allTemplates = (await helper.GetWatermarks("", 1, 999)).Where(x => x.Visible);
        var recommend = allTemplates.Where(x => x.Recommend);
        var hottest = allTemplates.Where(x => !x.Recommend && x.CanvasType == CanvasType.Normal).Take(36).ToList();
        var newest = allTemplates.OrderByDescending(x => x.DateTimeCreated).Where(x => !x.Recommend && x.CanvasType == CanvasType.Normal).ToList();
        var splits = allTemplates.Where(x => x.CanvasType == CanvasType.Split).ToList();
        ZipedTemplates = recommend.UnionBy(hottest, x => x.WatermarkId).UnionBy(newest, x => x.WatermarkId).UnionBy(splits, x => x.WatermarkId).ToList();
        var subUser = await IntiSubscribedUserList();
        subscribed = new List<Tuple<string, List<WMZipedTemplate>>>();
        foreach (var su in subUser)
        {
            var tp = ZipedTemplates.Where(x => x.UserId == su).ToList();
            if (tp.Count > 0)
            {
                var tup = Tuple.Create(tp[0].UserDisplayName, tp);
                subscribed.Add(tup);
            }
        }
        subscribed.Add(Tuple.Create("推荐", ZipedTemplates.Where(x => x.Recommend).ToList()));

        subscribed.Add(Tuple.Create("热门", hottest.Where(x => !subUser.Contains(x.UserId)).ToList()));
        subscribed.Add(Tuple.Create("拼图", splits));

        subscribed.Add(Tuple.Create("最新", newest.Where(x => !subUser.Contains(x.UserId)).Take(start * 6).ToList()));
        ZipedTemplates.ForEach(x => x.Src = Global.GetSrc(x.WatermarkId));
    }

    async Task<List<string>> IntiSubscribedUserList()
    {
        if (Global.CurrentUser == null || string.IsNullOrEmpty(Global.CurrentUser.ID)) return [];
        var helper = new APIHelper();
        var result = await helper.GetISubscribed(Global.CurrentUser.ID);
        if (result.success)
        {
            return result.data;
        }
        else
        {
            Common.ShowMsg(PopupService, result.message?.content ?? "", AlertTypes.Error);
        }
        return [];
    }
    void OpenFocus(char t, WMZipedTemplate zip, bool b)
    {
        parameter = new ViewParameter();
        HapticFeedback.Default.Perform(HapticFeedbackType.Click);
        parameter.FocusImage = zip;
        parameter.FocusImageType = t;
        parameter.FocusImageId = zip.WatermarkId;
        parameter.FocusImageSrc = zip.Src;
        parameter.FocusImageShow = b;
        StateHasChanged();
    }

    async Task DownloadTemplate(string watermarkId)
    {
        await Watermark.Shared.Models.ClientInstance.DownloadTemplate(
            watermarkId
            , parameter
            , PopupService
            , ZipedTemplates
            , helper
            , JSRuntime
            , []
            , NavController
            , failedBox);
    }
}