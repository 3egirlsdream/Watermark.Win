@using System.Diagnostics
@using Watermark.Win.Models
@using Watermark.Shared.Models
@inject ISnackbar Snackbar
<MudDialog Style="width:80%; height:80%;overflow-y:hidden">
    <DialogContent>
        <MudToolBar Style="padding:0px">
            <MudSpacer />
            <MudMenu StartIcon="@Icons.Material.Filled.Sort" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" Label="@sortType" Color="Color.Info" Variant="Variant.Filled" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopCenter">
                <MudMenuItem OnClick="@(()=>SelectedValuesChanged("最热门"))">最热门</MudMenuItem>
                <MudMenuItem OnClick="@(()=>SelectedValuesChanged("最新"))">最新</MudMenuItem>
            </MudMenu>
        </MudToolBar>
        <MudGrid Spacing="2" Justify="Justify.FlexStart" Style="height:calc(80vh - 70px);overflow-y:auto;padding:5px;">
            @if (ZipedTemplates != null)
            {   
                @foreach (var t in ZipedTemplates)
                {
                    <MudItem xs="4">
                        <MudCard>
                            @if (!string.IsNullOrEmpty(t.Src))
                            {
                                <MudImage Style="width:100%" Height="200" Src="@t.Src" ObjectFit="ObjectFit.Contain" />
                            }
                            else
                            {
                                <MudOverlay Visible="@loading" DarkBackground="true" Absolute="true">
                                    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
                                </MudOverlay>
                            }
                            <MudCardContent Style="height:80px;overflow-y:auto;">
                                <MudText Typo="Typo.body2">@t.Desc</MudText>
                            </MudCardContent>
                            <MudCardActions Style="position:relative;">
                                @if (t.UserId == "0BECCA9A-6F10-4A88-8753-921195D08853" || t.UserId == "9DEBF7DC-F58C-4667-BACF-A6BFD18352EB")
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Verified" Color="Color.Warning" />
                                }
                                
                                <MudIcon Icon="@Icons.Material.Filled.Favorite" Color="Color.Error" Style="cursor:pointer;" />@t.DownloadTimes
                                <MudButton Size="Size.Small" Variant="Variant.Text" EndIcon="@Icons.Material.Filled.Download" Color="Color.Primary" Style="position:absolute;right:70px" OnClick="()=>Download(t.WatermarkId)">下载</MudButton>
                                <MudIconButton Variant="Variant.Text" Color="Color.Secondary" Icon="@Icons.Material.Filled.Share" Style="position:absolute;right:10px" OnClick="()=>Share(t.WatermarkId)"></MudIconButton>
                            </MudCardActions>
                        </MudCard>

                    </MudItem>
                }
                <MudButton FullWidth Variant="Variant.Text" Class="mt-5" Style="height:30px" OnClick="LoadMore">加载更多...</MudButton>
            }
        </MudGrid>
        <MudOverlay Visible="@loading" DarkBackground="false" Style="background:#e6e6e6" Absolute="false" ZIndex="9999">
            <MudStack Justify="Justify.Center">
                <MudProgressCircular Color="Color.Secondary" Indeterminate="true" Style="margin:auto" />
                <MudText Typo="Typo.subtitle1" Color="Color.Dark">
                    <b>正在加载模板...</b>
                </MudText>
            </MudStack>
        </MudOverlay>
    </DialogContent>
</MudDialog>


@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }
    [Inject]
    private IDialogService DialogService { get; set; }
    bool loading = false;
    List<WMZipedTemplate> ZipedTemplates;
    int start = 1;
    string sortType = "最热门";
    string sortCode => sortType == "最热门" ? "countDesc" : "timeDesc";
    protected override async Task OnInitializedAsync()
    {
        await InitTemplate();
    }

    async Task InitTemplate()
    {
        loading = true;
        var helper = new APIHelper();
        ZipedTemplates = await helper.GetWatermarks("", start, 10, sortCode);
        List<Task> tasks1 = new List<Task>();
        foreach (var t in ZipedTemplates)
        {
            var task = helper.ExtractZip(t.WatermarkId).ContinueWith(item =>
            {
                t.WMCanvas = item.Result.WMCanvas;
                t.Images = item.Result.Images;
                t.Fonts = item.Result.Fonts;
                t.Bitmap = item.Result.Bitmap;
            });
            tasks1.Add(task);
        }
        await Task.WhenAll(tasks1);
        var whelper = new WatermarkHelper();
        List<Task> tasks = new List<Task>();
        foreach (var t in ZipedTemplates)
        {
            var c = Task.Run(() =>
            {
                t.Src = whelper.Generation(t.WMCanvas, t, true);
                return t.Src;
            });

            tasks.Add(c);
        }
        await Task.WhenAll(tasks);
        loading = false;
    }


    void Share(string id)
    {
        //System.Windows.Clipboard.SetText(id);

        string message = "已复制ID到剪贴板";
        ClientInstance.ShowMsg(Snackbar, message, Severity.Success);
    }

    async void LoadMore()
    {
        loading = true;
        var helper = new APIHelper();
        var more = await helper.GetWatermarks("", ++start, 10, sortCode);
        List<Task> tasks1 = new List<Task>();
        foreach (var t in more)
        {
            var task = helper.ExtractZip(t.WatermarkId).ContinueWith(item =>
            {
                t.WMCanvas = item.Result.WMCanvas;
                t.Images = item.Result.Images;
                t.Fonts = item.Result.Fonts;
                t.Bitmap = item.Result.Bitmap;
            });
            tasks1.Add(task);
        }
        await Task.WhenAll(tasks1);
        var whelper = new WatermarkHelper();
        List<Task> tasks = new List<Task>();
        foreach (var t in more)
        {
            var c = Task.Run(() =>
            {
                t.Src = whelper.Generation(t.WMCanvas, t, true);
                return t.Src;
            });

            tasks.Add(c);
        }
        await Task.WhenAll(tasks);
        ZipedTemplates.AddRange(more);
        loading = false;
        StateHasChanged();
    }

    async void Download(string watermarkId)
    {
        var helper = new APIHelper();
        var result = await helper.Download(watermarkId, "");
        string message = "";
        Severity Severity = Severity.Success;
        if (result)
        {
            Severity = Severity.Success;
            message = "下载成功";
        }
        else
        {
            Severity = Severity.Error;
            message = "下载失败";
        }

        ClientInstance.ShowMsg(Snackbar, message, Severity);
    }

    async void SelectedValuesChanged(string type)
    {
        sortType = type;
        start = 1;
        await InitTemplate();
        StateHasChanged();
    }
}