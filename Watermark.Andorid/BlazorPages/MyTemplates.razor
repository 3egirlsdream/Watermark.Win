@using Microsoft.AspNetCore.Components.Forms
@using System.Windows
@using System.IO
@using Watermark.Win.Models
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@using Watermark.Shared.Models
@inject ISnackbar Snackbar
<style>
    .mud-card-actions {
        position: relative;
    }
</style>
<MudDialog Style="min-width:50%;min-height:50%;width:80%; height:80%;overflow-y:hidden">
    <DialogContent>
        <MudGrid Spacing="2" Justify="Justify.FlexStart" Style="height:calc(80vh - 120px);overflow-y:auto;padding:5px;">
            <MudItem xs="12">
                <MudText Typo="Typo.h4">
                    我本地的<MudIconButton Icon="@Icons.Material.Rounded.Refresh" Color="Color.Primary" Variant="Variant.Text" OnClick="()=> { InitTemplates(); LoadCloudTemplate();}"></MudIconButton>
                </MudText>
            </MudItem>
            @foreach (var grid in wMTemplates)
            {
                <MudItem>
                    <MudPaper Width="256px">
                        <MudCard Class="pa-2" Style="background:#F9FAFC;">
                            <MudImage Src="@(pairs[grid.ID])" Width="240" Height="200" ObjectFit="ObjectFit.Contain" />
                            <MudCardContent>
                                <MudText Typo="Typo.body2">@grid.Name</MudText>
                                </MudCardContent>
                            <MudCardActions>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="()=>Upload(grid.ID)">上传</MudButton>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-2" OnClick="(()=>EditTemplate(grid))">编辑</MudButton>
                                <MudButton Variant="Variant.Filled" Color="Color.Error" Style="position:absolute;right:0" OnClick="()=>DeleteTemplate(grid.ID)">删除</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudPaper>
                </MudItem>
            }
            <MudItem xs="12">
                <MudText Typo="Typo.h4">我上传的</MudText>
            </MudItem>
            @foreach (var t in ZipedTemplates)
            {
                <MudItem xs="4">
                    <MudCard>
                        @if (!string.IsNullOrEmpty(t.Src))
                        {
                            <MudImage Style="width:100%" Height="200" Src="@t.Src" ObjectFit="ObjectFit.Contain" />
                        }
                        else
                        {
                            <MudOverlay Visible="@loading" DarkBackground="true" Absolute="true">
                                <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
                            </MudOverlay>
                        }
                        <MudCardContent Style="height:80px;overflow-y:auto;">
                            <MudText Typo="Typo.body2">@t.Desc</MudText>
                            </MudCardContent>
                            <MudCardActions Style="position:relative;">
                                @t.DownloadTimes<MudIcon Icon="@Icons.Material.Filled.Favorite" Color="Color.Error" Style="cursor:pointer;" />
                            <MudButton Size="MudBlazor.Size.Small" Variant="Variant.Text" EndIcon="@Icons.Material.Filled.Download" Color="Color.Primary" Style="position:absolute;right:70px" OnClick="()=>Download(t.WatermarkId)">下载</MudButton>
                            <MudButton Variant="Variant.Text" Color="Color.Secondary" Icon="@Icons.Material.Filled.Share" Style="position:absolute;right:10px" OnClick="()=>DownloadEdit(t.WatermarkId)">编辑</MudButton>
                        </MudCardActions>
                    </MudCard>

                </MudItem>
            }
            <MudOverlay Visible="@loading" DarkBackground="false" Style="background:#e6e6e6" Absolute="false" ZIndex="9999">
                <MudStack Justify="Justify.Center">
                    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" Style="margin:auto" />
                    <MudText Typo="Typo.subtitle1" Color="Color.Dark">
                        <b>@loadingMessage</b>
                    </MudText>
                </MudStack>
            </MudOverlay>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" FullWidth="true" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>



@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }
    [Inject]
    private IDialogService DialogService { get; set; }

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();
    private DialogOptions dialogOptions = new() { FullWidth = true };
    bool loading = true;
    string loadingMessage = "正在加载模板...";
    List<WMCanvas> wMTemplates { get; set; }
    List<WMZipedTemplate> ZipedTemplates { get; set; } = new List<WMZipedTemplate>();
    Dictionary<string, string> pairs;
    async Task InitTemplates()
    {
        loading = true;
        pairs = new Dictionary<string, string>();
        if (!System.IO.Directory.Exists(Global.AppPath.TemplatesFolder))
        {
            System.IO.Directory.CreateDirectory(Global.AppPath.TemplatesFolder);
        }

        System.IO.DirectoryInfo directoryInfo = new System.IO.DirectoryInfo(Global.AppPath.TemplatesFolder);
        wMTemplates = new List<WMCanvas>();
        List<Task> tasks = new List<Task>();
        foreach (var dirct in directoryInfo.GetDirectories())
        {
            var configPath = dirct.FullName + System.IO.Path.DirectorySeparatorChar + "config.json";
            System.IO.Stream stream;
            if (System.IO.File.Exists(configPath))
            {
                WatermarkHelper helper = new WatermarkHelper();
                var t = Task.Run(() =>
                {
                    stream = new System.IO.FileStream(configPath, System.IO.FileMode.Open);
                    using var reader = new System.IO.StreamReader(stream);
                    var content = reader.ReadToEnd();
                    var canvas = Global.ReadConfig(content);
                    var src = helper.Generation(canvas, null, true);
                    pairs[canvas.ID] = src;
                    wMTemplates.Add(canvas);
                    App.Current.Dispatcher.Dispatch(() => StateHasChanged());
                    return src;
                });
                tasks.Add(t);
            }
        }
        await Task.WhenAll(tasks);
        loading = false;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await InitTemplates();
            await LoadCloudTemplate();
        }
        catch(Exception ex)
        {
            ClientInstance.ShowMsg(Snackbar, ex.Message, Severity.Error);
        }
    }

    async Task LoadCloudTemplate()
    {
        if (string.IsNullOrEmpty(Global.CurrentUser.ID)) return;
        loading = true;
        StateHasChanged();
        var helper = new APIHelper();
        ZipedTemplates = await helper.GetWatermarks(Global.CurrentUser.ID, 1, 100);
        List<Task> tasks1 = new List<Task>();
        foreach (var t in ZipedTemplates)
        {
            var task = helper.ExtractZip(t.WatermarkId).ContinueWith(item =>
            {
                t.WMCanvas = item.Result.WMCanvas;
                t.Images = item.Result.Images;
                t.Fonts = item.Result.Fonts;
                t.Bitmap = item.Result.Bitmap;
            });
            tasks1.Add(task);
        }
        await Task.WhenAll(tasks1);
        var whelper = new WatermarkHelper();
        List<Task> tasks = new List<Task>();
        foreach (var t in ZipedTemplates)
        {
            var c = Task.Run(() =>
            {
                t.Src = whelper.Generation(t.WMCanvas, t, true);
                return t.Src;
            });

            tasks.Add(c);
        }
        await Task.WhenAll(tasks);
        loading = false;
        StateHasChanged();
    }

    void EditTemplate(WMCanvas canvas, string cloud = "")
    {
        //var action = new Action(() =>
        //{
        //    var win = new Watermark.Win.Views.DesignWin(canvas, cloud);
        //    win.WindowStartupLocation = System.Windows.WindowStartupLocation.CenterScreen;
        //    win.ShowDialog();
        //});
        //OpenWinHelper.Open(action);
    }
    async void DeleteTemplate(string id)
    {

        bool? result = await DialogService.ShowMessageBox(
        "删除",
        (MarkupString)"确定删除模板？&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;",
        yesText: "确定", cancelText: "取消");
        if (result == true)
        {
            try
            {
                var path = Global.AppPath.TemplatesFolder + id;
                System.IO.Directory.Delete(path, true);
                StateHasChanged();
            }
            catch { }
            finally
            {
                await InitTemplates();
            }
        }

    }

    async void Upload(string watermarkId)
    {
        async Task<bool> func()
        {
            APIHelper api = new APIHelper();
            var apiResult = await api.TemplateIsExsist(watermarkId, Global.CurrentUser?.ID);
            if(apiResult.Item1 && apiResult.Item2)
            {
                bool? rtl = await DialogService.ShowMessageBox(
                               "确认覆盖",
                               (MarkupString)"此模板已上传，确定覆盖？",
                               yesText: "确定", cancelText: "取消");
                return rtl == true;
            }
            else if (apiResult.Item1 && !apiResult.Item2)
            {
                await DialogService.ShowMessageBox(
                              "错误",
                              (MarkupString)"不能覆盖不是自己所有的模板，请另存为后再上传!",
                              yesText: "确定", cancelText: "取消");
                return false;
            }
            return true;
        }

        var r = await func();
        if (!r) return;

        var parameters = new DialogParameters<UploadTemplateDialog>();
        parameters.Add(x => x.Name, wMTemplates.FirstOrDefault(c => c.ID == watermarkId)?.Name ?? "");
        var dialog = DialogService.Show<UploadTemplateDialog>("", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            dynamic data = result.Data;
            if(data == null)
            {
                return;
            }

            Action action = new Action(async () =>
            {
                loading = true;
                StateHasChanged();
                loadingMessage = "正在上传...";
                var helper = new APIHelper();
                var result = await helper.UploadWatermark(watermarkId, Convert.ToString(data.Name ?? ""), Convert.ToInt32(data.Coin ?? "0"), Convert.ToString(data.Desc ?? ""));
                string message = "";
                Severity severity = Severity.Success;

                if (result.success)
                {
                    message = "上传成功";
                }
                else
                {
                    severity = Severity.Error;
                    message = result.message?.content;
                }

                var target = Global.AppPath.TemplatesFolder + $"{watermarkId}.zip";
                if (File.Exists(target)) File.Delete(target);
                ClientInstance.ShowMsg(Snackbar, message, severity);
                loading = false;
                StateHasChanged();
            });

            if (string.IsNullOrEmpty(Global.CurrentUser.ID))
            {
                var rst = DialogService.Show<LoginDialog>("");
                var dialogResult = await rst.Result;
                if (!dialogResult.Canceled && dialogResult.Data.Equals(true))
                {
                    action.Invoke();
                }
            }
            else
            {
                action.Invoke();
            }
        }


    }

    async void Download(string watermarkId)
    {
        var helper = new APIHelper();
        async Task<bool> func()
        {
            if (helper!.FolderExsist(watermarkId))
            {
                bool? rtl = await DialogService.ShowMessageBox(
                                    "确认覆盖",
                                    (MarkupString)"本地已下载模板，确认覆盖？",
                                    yesText: "确定", cancelText: "取消");
                return rtl == true;
            }
            return true;
        }

        var isOK = await func();
        if (!isOK) return;
        loading = true;
        var result = await helper.Download(watermarkId, Global.CurrentUser?.ID ?? "");
        string message = "";
        Severity Severity = Severity.Success;
        if (result)
        {
            Severity = Severity.Success;
            message = "下载成功";
            await InitTemplates();
        }
        else
        {
            Severity = Severity.Error;
            message = "下载失败";
        }
        ClientInstance.ShowMsg(Snackbar, message, Severity);
        loading = false;
        StateHasChanged();
    }

    async void DownloadEdit(string watermarkId)
    {
        var helper = new APIHelper();

        async Task<bool> func()
        {
            if (helper!.FolderExsist(watermarkId))
            {
                bool? rtl = await DialogService.ShowMessageBox(
                                    "确认覆盖",
                                    (MarkupString)"本地已下载模板，确认覆盖？",
                                    yesText: "确定", cancelText: "取消");
                return rtl == true;
            }
            return true;
        }

        var isOK = await func();
        if (!isOK) return;
        loading = true;
        var result = await helper.Download(watermarkId, Global.CurrentUser?.ID ?? "");
        string message = "";
        Severity Severity = Severity.Success;
        if (result)
        {
            Severity = Severity.Success;
            message = "下载成功";
            await InitTemplates();
            var canvas = wMTemplates.FirstOrDefault(c => c.ID == watermarkId);
            if(canvas != null)
            {
                EditTemplate(canvas, "cloud");
            }
        }
        else
        {
            Severity = Severity.Error;
            message = "下载失败";
        }

        ClientInstance.ShowMsg(Snackbar, message, Severity);
        loading = false;
        StateHasChanged();
    }

}