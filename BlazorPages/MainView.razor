@using System.IO
@using System.Diagnostics
@using Watermark.Win.BlazorPages
@using Watermark.Win.Models
@using Watermark.Win.Views
@inject ISnackbar Snackbar
<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<div Style="background:#F9FAFC;height:100vh;width:100vw;overflow-x:hidden">
    <div style="height:40px;position:fixed;width:100%;top:0;left:0;z-index:999;background:#FFF;">
        <MudToolBar Style="height:40px;padding-left:2px;box-shadow: 0 2px 12px 0 rgb(0 0 0 / 10%);">
            <MudMenu Label="文件" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopCenter" Color="Color.Default" Style="left:0">
                <MudMenuItem Icon="@Icons.Material.Filled.Image" OnClick="SelectPictureClick">导入图片</MudMenuItem>
                <MudMenuItem Icon="@Icons.Material.Filled.LogoDev">导入图标</MudMenuItem>
                <MudDivider />
                <MudMenuItem Icon="@Icons.Material.Filled.ExitToApp" OnClick="()=> System.Windows.Application.Current.Shutdown()">退出</MudMenuItem>
            </MudMenu>
            <MudMenu Label="模板" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopCenter" Color="Color.Default" Style="left:0">
                <MudMenuItem Icon="@Icons.Material.Filled.TempleHindu" OnClick="OpenMyTemplates">我的模板</MudMenuItem>
                <MudMenuItem Icon="@Icons.Material.Filled.Create" OnClick="(()=>CreateTemplate.DialogVisible = true)">创建模板</MudMenuItem>
                <MudMenuItem Icon="@Icons.Material.Filled.Shop" OnClick="()=> DialogService.Show<TemplatesMarket>(string.Empty,new DialogOptions(){ MaxWidth = MaxWidth.ExtraLarge})">模板市场</MudMenuItem>
            </MudMenu>
            <MudMenu Label="关于" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopCenter" Color="Color.Default" Style="left:0">
                <MudMenuItem Icon="@Icons.Material.Filled.Settings" OnClick="Global.OpenSetting">设置</MudMenuItem>
            </MudMenu>
            <MudMenu Label="更多" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopCenter" Color="Color.Default" Style="left:0">
                <MudMenuItem>交流群</MudMenuItem>
                <MudMenuItem>点个⭐</MudMenuItem>
                <MudMenuItem>提交BUG</MudMenuItem>
            </MudMenu>
            <MudSpacer />
            <MudIcon Icon="@Icons.Material.Filled.AccountCircle" Color="Color.Inherit" Style="cursor:pointer" @onclick="()=> ShowUserInfo = !ShowUserInfo" />
            @if (Global.CurrentUser != null && !string.IsNullOrEmpty(Global.CurrentUser.DISPLAY_NAME))
            {
                <MudText Typo="Typo.overline" Style="margin: 7px 0px 5px 5px;">@Global.CurrentUser.DISPLAY_NAME</MudText>
            }

            <MudPopover Style="width:300px;" OverflowBehavior="OverflowBehavior.FlipNever" Open="@ShowUserInfo" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" Class="pa-4">
                @if (IsLoginIn && Global.CurrentUser != null)
                {
                    <div style="height:50px">
                        @if (!string.IsNullOrEmpty(Global.CurrentUser.IMG))
                        {
                            <MudImage Width="50" Height="50" Src="@Global.CurrentUser.IMG" ObjectFit="ObjectFit.Contain" Style="float:left;" />
                        }
                        else
                        {
                            <MudIcon Icon="@Icons.Material.Filled.AccountCircle" Color="Color.Primary" Size="Size.Large" Style="float:left;" />
                        }

                        <div style="float:left;">
                            <MudText Typo="Typo.body1" Class="px-4" Color="Color.Secondary">@Global.CurrentUser.DISPLAY_NAME</MudText>
                                <MudText Typo="Typo.overline" Class="px-4" Color="Color.Inherit">@Global.CurrentUser.USER_NAME</MudText>
                            </div>
                        </div>
                    <MudText Typo="Typo.body2" Class="px-4 py-1" Style="clear:both;">🤩🤗🥵</MudText>
                    <MudText Typo="Typo.body2" Class="px-4 py-1">剩余点数：50</MudText>
                    <MudText Typo="Typo.body2" Class="px-4 py-1">@DateTime.Now</MudText>
                    <MudButton Variant="Variant.Text" Style="margin-left:200px;" OnClick="()=> { Global.CurrentUser = new LoginChildModel(); IsLoginIn = false; }">退出</MudButton>
                }
                else
                {
                    <MudSkeleton />
                    <MudSkeleton SkeletonType="SkeletonType.Circle" Width="50px" Height="50px" />
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="200px" Height="110px" />
                    <MudStack Row Style="margin-left:120px;" Class="mt-5">
                         <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="OpenLoginDialog">登录</MudButton>
                         <MudButton Variant="Variant.Text" OnClick="OpenSignUpDialog">注册</MudButton>
                     </MudStack>
                }
            </MudPopover>
        </MudToolBar>
    </div>
    <div Style="height:100%;width:100vw;display: flex;">

        <div style="width: 300px; height: 100%; padding: 0px; background: #F9FAFC;">
            <MudPaper Width="300px" Elevation="0" Style="padding: 0px 10px; margin-top: 40px; height: calc(100% - 40px);overflow-y:auto;overflow-x:hidden;">
                <MudList Clickable="true">
                    <MudTreeView T="string" Hover="true">
                        <MudTreeViewItem Value="@("模板列表")" Expanded="true">
                            @foreach (var pair in wMTemplates)
                            {
                                @* <MudImage Src="@pair.Src" ObjectFit="ObjectFit.Fill" Style="min-height:160px;cursor:pointer; " Width="280" Elevation="2" @onclick="()=>ChangeTemplate(pair)" /> *@
                                <MudTreeViewItem Value="@pair.Canvas.Name" @onclick="()=>ChangeTemplate(pair)" Style="cursor:pointer; ">
                                    <Content>
                                        <MudImage Width="40" Height="40" ObjectFit="ObjectFit.Contain" Src="@pair.Src" />
                                        <MudText Class="mx-5">@pair.Canvas.Name</MudText>
                                        </Content>
                                    </MudTreeViewItem>
                            }
                        </MudTreeViewItem>
                    </MudTreeView>

                </MudList>
            </MudPaper>
        </div>
        <div style="width:calc(100% - 500px);height:100%;position:fixed;margin-left:300px;">
            @if (SrcLoading)
            {
                <MudProgressCircular Color="Color.Secondary" Indeterminate="true" Style="position:absolute;top:50px;right:10px;" />
            }
            <div style="background: #F9FAFC; width: 100%; height: 100%; line-height: 100vh; text-align: center;">
                @if (CurrentImage != null && !string.IsNullOrEmpty(CurrentImage.Src))
                {
                    <MudImage ObjectFit="@ObjectFit.Contain" Src="@CurrentImage.Src" Elevation="0" Style="width:100%; height:100%; padding-left:5%;padding-right:5%;padding-top:100px;padding-bottom:100px;" />

                }
                else
                {
                    <svg t="1705281144913" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3271" width="128" height="128">
                        <path d="M256 298.666667a85.333333 85.333333 0 1 1 85.333333 85.333333 85.333333 85.333333 0 0 1-85.333333-85.333333z m674.133333 415.146666l-256-341.333333a32.426667 32.426667 0 0 0-51.2 0l-170.666666 220.586667a21.333333 21.333333 0 0 1-33.28 0l-93.44-113.493334a32 32 0 0 0-49.92 0l-181.333334 234.24a42.666667 42.666667 0 0 0-8.96 26.026667v38.826667a32.426667 32.426667 0 0 0 32 32h789.333334a32.426667 32.426667 0 0 0 32-32v-39.253334a42.666667 42.666667 0 0 0-8.533334-25.6z" p-id="3272" fill="#e9e9e9"></path>
                    </svg>
                }
            </div>
        </div>
        <div style="width: 200px; height: calc(100% - 30px);  background: #F9FAFC;  position: absolute; right: 0; margin-top: 30px;overflow-y:auto;overflow-x:hidden">
            <MudList Clickable="true">
                @foreach (var file in Images)
                {
                    <MudImage Elevation="2" Src="@file.Src" Width="190" ObjectFit="ObjectFit.Contain" Class="mt-2" Style="cursor: pointer; margin: 0 5px" @onclick="(()=>ClickImage(file))" />
                }
            </MudList>
        </div>
    </div>

    <MudOverlay Visible="MainLoading.Show" DarkBackground="true" Absolute="true" ZIndex="99999">
        <MudPaper Style="width:520px;padding:10px 40px 10px 40px;">
            <MudStack>
                <MudProgressLinear Color="Color.Primary" Value="@MainLoading.Value" Class="mt-7" />
                <MudText Typo="Typo.subtitle1" Color="Color.Dark" Style="margin:auto">
                    <b>@MainLoading.Message</b>
                </MudText>
            </MudStack>
        </MudPaper>
    </MudOverlay>
</div>


<MudDialog @bind-IsVisible="CreateTemplate.DialogVisible" Options="CreateTemplate.DialogOptions" Style="max-width:400px;">
    <DialogContent>
        <MudForm>
            <MudTextField @bind-Value="CreateTemplate.TemplateName" T="string" Label="模板名称" Required="true" RequiredError="模板名称不能为空" />
            <MudStack Row Class="mt-5">
                 @if (!string.IsNullOrEmpty(CreateTemplate.Base64Src))
                {
                    <MudImage Width="250" ObjectFit="ObjectFit.Contain" Src="@CreateTemplate.Base64Src" />
                }
                <MudIconButton Icon="@Icons.Material.Filled.OpenInNew" OnClick="CreateTemplate.SelectImage" Style="float:right;width:40px;height:40px;" />
            </MudStack>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton FullWidth="true" Variant="Variant.Filled" OnClick="CreateTemplate.OK">确定</MudButton>
    </DialogActions>
</MudDialog>






@code {
    [Inject]
    private IDialogService DialogService { get; set; }

    Thickness BorderThickness = new Thickness();
    string url = "";
    bool SrcLoading = false;
    bool ShowUserInfo = false;
    bool IsLoginIn = false;
    class MainLoading
    {
        public static bool Show { get; set; } = false;
        public static double Value { get; set; }
        public static string Message { get; set; }
    }

    class CreateTemplate
    {
        public static bool DialogVisible { get; set; } = false;
        public static DialogOptions DialogOptions { get; set; } = new DialogOptions() { MaxWidth = MaxWidth.Medium, NoHeader = true };
        public static string TemplateName { get; set; }
        public static string Base64Src { get; set; }
        private static string ID = Guid.NewGuid().ToString("N").ToUpper();
        public static void OK()
        {
            if (string.IsNullOrEmpty(TemplateName) || string.IsNullOrEmpty(Base64Src)) return;
            var canvas = new WMCanvas() { Name = TemplateName, ID = ID };
            var basePath = Global.TemplatesFolder + canvas.ID;
            if (!Directory.Exists(basePath))
            {
                Directory.CreateDirectory(basePath);
            }
            DialogVisible = false;
            var action = new Action(() =>
            {
                var win = new DesignWin(canvas);
                win.WindowStartupLocation = System.Windows.WindowStartupLocation.CenterScreen;
                win.ShowDialog();
            });
            OpenWinHelper.Open(action);
        }
        public static void SelectImage()
        {
            var dic = new Dictionary<string, string>();
            Global.SelectDefaultImage(ID, dic);
            Base64Src = dic.First().Value;
        }
    };


    protected override async Task OnInitializedAsync()
    {
        await InitTemplates();
        var result = await Global.ReadLocalAsync();
        if (!string.IsNullOrEmpty(result.Item1))
        {
            APIHelper helper = new APIHelper();
            var login = await helper.LoginIn(result.Item1, result.Item2, true);
            if (login.success)
            {
                Global.CurrentUser = new LoginChildModel
                    {
                        ID = login.data.data.ID,
                        IMG = login.data.data.IMG,
                        DISPLAY_NAME = login.data.data.DISPLAY_NAME,
                        USER_NAME = login.data.data.USER_NAME
                    };
                IsLoginIn = true;
                await Global.WriteAccount2LocalAsync(result.Item1, result.Item2);
                StateHasChanged();
            }
        }
    }


    public async void OpenMyTemplates()
    {
        var parameters = new DialogParameters<MyTemplates>();

        var option = new DialogOptions() { NoHeader = false, MaxWidth = MaxWidth.ExtraLarge };
        var rst = DialogService.Show<MyTemplates>("我的模板", parameters, option);
        var dialog = await rst.Result;
        if (!dialog.Canceled)
        {
            StateHasChanged();
            await InitTemplates();
        }

    }

    List<TemplateList> Images = new List<TemplateList>();
    async void SelectPictureClick()
    {
        // 实例化一个文件选择对象
        Microsoft.Win32.OpenFileDialog dialog = new()
            {
                DefaultExt = ".png",  // 设置默认类型
                Multiselect = true,                             // 设置可选格式
                Filter = @"图像文件(*.jpg,*.png)|*jpeg;*.jpg;*.png|JPEG(*.jpeg, *.jpg)|*.jpeg;*.jpg|PNG(*.png)|*.png"
            };
        // 打开选择框选择
        Nullable<bool> result = dialog.ShowDialog();
        if (result == true)
        {
            MainLoading.Show = true;
            Images = new List<TemplateList>();
            MainLoading.Message = $"正在导入图片，一共{dialog.FileNames.Length}, 当前第1个...";
            MainLoading.Value = 0;
            if (!Directory.Exists(Global.ThumbnailFolder))
            {
                Directory.CreateDirectory(Global.ThumbnailFolder);
            }
            foreach (var file in dialog.FileNames)
            {
                Dictionary<string, string> dic = new Dictionary<string, string>();
                WMCanvas canvas = new WMCanvas();
                canvas.Path = file;
                canvas.Exif = await ExifHelper.ReadImageAsync(file);
                await Task.Run(() =>
                {
                    var thumbnail = Global.ThumbnailFolder + file.Substring(file.LastIndexOf('\\') + 1);
                    var bitmap = SkiaSharp.SKBitmap.Decode(file);
                    return Global.WriteThumbnailImageAsync(bitmap, thumbnail);
                });

                var src = Task.Run(() =>
                {
                    Global.ImageFile2Base64(dic, file, canvas.ID);
                    return dic.First().Value;
                });
                Images.Add(new TemplateList
                    {
                        Canvas = canvas,
                        Src = await src,
                        ID = canvas.ID,
                        Path = file
                    });
                var idx = dialog.FileNames.ToList().IndexOf(file) + 1;
                MainLoading.Message = $"正在导入图片，一共{dialog.FileNames.Length}, 当前第{idx}个...";
                MainLoading.Value = idx * 100.0 / dialog.FileNames.Length;
                StateHasChanged();
            }


            MainLoading.Message = $"导入完成";
            MainLoading.Value = 100;
            await Task.Delay(200);
            MainLoading.Show = false;
            StateHasChanged();
        }
    }

    async void ClickImage(TemplateList image)
    {
        CurrentImage = new TemplateList
            {
                ID = image.ID,
                Canvas = image.Canvas,
                Path = image.Path
            };
        SrcLoading = true;
        var t = Task.Run(() =>
        {
            CurrentImage.Canvas = Global.ReadConfig(Global.CanvasSerialize(image.Canvas));// Newtonsoft.Json.JsonConvert.DeserializeObject<WMCanvas>(Newtonsoft.Json.JsonConvert.SerializeObject()); ;
            WatermarkHelper helper = new WatermarkHelper();
            CurrentImage.Canvas.Path = CurrentImage.Path;
            return helper.Generation(CurrentImage.Canvas, null);
        });

        CurrentImage.Src = await t;
        SrcLoading = false;
        StateHasChanged();
    }

    List<TemplateList> wMTemplates;
    TemplateList CurrentTemplate;
    TemplateList CurrentImage;


    class TemplateList
    {
        public string ID { get; set; }
        public string Path { get; set; }
        public WMCanvas Canvas { get; set; }
        public string Src { get; set; }
    }

    async Task InitTemplates()
    {
        MainLoading.Show = true;
        if (!System.IO.Directory.Exists(Global.TemplatesFolder))
        {
            System.IO.Directory.CreateDirectory(Global.TemplatesFolder);
        }
        try
        {
            System.IO.DirectoryInfo directoryInfo = new System.IO.DirectoryInfo(Global.TemplatesFolder);
            wMTemplates = new List<TemplateList>();
            var directories = directoryInfo.GetDirectories();
            MainLoading.Message = $"正在初始化模板，共{directories.Length}个，当前第1个...";
            MainLoading.Value = 0;
            List<Task> tasks = new List<Task>();
            int cot = 1;
            foreach (var dirct in directories)
            {
                var configPath = dirct.FullName + System.IO.Path.DirectorySeparatorChar + "config.json";
                System.IO.Stream stream;
                if (System.IO.File.Exists(configPath))
                {
                    stream = new System.IO.FileStream(configPath, System.IO.FileMode.Open);
                    using var reader = new System.IO.StreamReader(stream);
                    var content = reader.ReadToEnd();
                    var canvas = Global.ReadConfig(content);

                    WatermarkHelper helper = new WatermarkHelper();
                    var t = Task.Run(() =>
                    {
                        var src = helper.Generation(canvas, null);
                        var wh = new TemplateList
                        {
                            ID = canvas.ID,
                            Canvas = canvas,
                            Src = src
                        };
                        wMTemplates.Add(wh);
                        var idx = directories.ToList().IndexOf(dirct) + 1;
                        MainLoading.Value = cot * 100.0 / directories.Length;
                        MainLoading.Message = $"正在初始化模板，共{directories.Length}个，当前第{cot++}个...";
                        App.Current.Dispatcher.Invoke(() => StateHasChanged());
                        
                        return src;
                    });
                    tasks.Add(t);
                }
            }
            await Task.WhenAll(tasks);
            MainLoading.Message = $"处理完成...";
            MainLoading.Value = 100;
            await Task.Delay(200);
            MainLoading.Show = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            System.Windows.MessageBox.Show(ex.Message);
        }
    }

    async void ChangeTemplate(TemplateList template)
    {
        CurrentTemplate = template;
        if (CurrentImage == null) return;
        SrcLoading = true;
        var t = Task.Run(() =>
        {
            var cvs = Global.ReadConfig(Global.CanvasSerialize(template.Canvas));// Newtonsoft.Json.JsonConvert.DeserializeObject<WMCanvas>(Newtonsoft.Json.JsonConvert.SerializeObject());
            CurrentImage.Canvas = cvs;
            WatermarkHelper helper = new WatermarkHelper();
            cvs.Path = CurrentImage.Path;
            return helper.Generation(cvs, null);
        });

        CurrentImage.Src = await t;
        SrcLoading = false;
        StateHasChanged();
    }

    async void OpenLoginDialog()
    {
        var rst = DialogService.Show<LoginDialog>("");
        var dialogResult = await rst.Result;
        if (!dialogResult.Canceled && dialogResult.Data.Equals(true))
        {
            IsLoginIn = true;
            StateHasChanged();
        }
    }

    async void OpenSignUpDialog()
    {
        var rst = DialogService.Show<SignUpDialog>("");
        var dialogResult = await rst.Result;
        if (!dialogResult.Canceled && dialogResult.Data.Equals(true))
        {
            IsLoginIn = true;
            StateHasChanged();
        }
    }
}