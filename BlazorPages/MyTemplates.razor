@using Microsoft.AspNetCore.Components.Forms
@using Watermark.Win.Models
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations

<MudDialog Style="min-width:50%;">
    <DialogContent>
        <MudGrid Spacing="2" Justify="Justify.FlexStart">
            @foreach (var grid in wMTemplates)
            {
                <MudItem>
                    <MudPaper Height="342px" Width="256px" Class="mt-2">
                        <MudCard Class="pa-2" Style="background:#e3e3e3;">
                            <MudImage Src="@(pairs[grid.ID])" Width="240" Height="200" ObjectFit="ObjectFit.Contain"/>
                            <MudCardContent Style="height:80px;">
                                <MudText Typo="Typo.body2">This photo was taken in a small village in Istra Croatia.</MudText>
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton Variant="Variant.Text" Color="Color.Primary">上传</MudButton>
                                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="(()=>EditTemplate(grid))">编辑</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudPaper>
                </MudItem>
            }
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" FullWidth="true" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>



@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }


    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();
    private DialogOptions dialogOptions = new() { FullWidth = true };

    List<WMCanvas> wMTemplates { get; set; }
    Dictionary<string, string> pairs;
    async void InitTemplates()
    {
        pairs = new Dictionary<string, string>();
        if (!System.IO.Directory.Exists(Global.TemplatesFolder))
        {
            System.IO.Directory.CreateDirectory(Global.TemplatesFolder);
        }

        System.IO.DirectoryInfo directoryInfo = new System.IO.DirectoryInfo(Global.TemplatesFolder);
        wMTemplates = new List<WMCanvas>();
        foreach (var dirct in directoryInfo.GetDirectories())
        {
            var configPath = dirct.FullName + System.IO.Path.DirectorySeparatorChar + "config.json";
            System.IO.Stream stream;
            if (System.IO.File.Exists(configPath))
            {
                stream = new System.IO.FileStream(configPath, System.IO.FileMode.Open);
                using var reader = new System.IO.StreamReader(stream);
                var content = reader.ReadToEnd();
                var canvas = Global.ReadConfig(content);

                WatermarkHelper helper = new WatermarkHelper();
                var t = Task.Run(() =>
                {
                    var src = helper.Generation(canvas);
                    return src;

                });

                pairs[canvas.ID] = await t;
                wMTemplates.Add(canvas);
                StateHasChanged();

            }
        }
    }

    protected override void OnInitialized()
    {
        InitTemplates();
    }

    void EditTemplate(WMCanvas canvas)
    {
        var action = new Action(() =>
        {
            var win = new Watermark.Win.Views.DesignWin(canvas);
            win.WindowStartupLocation = System.Windows.WindowStartupLocation.CenterScreen;
            win.ShowDialog();
        });
        OpenWinHelper.Open(action);
    }

}