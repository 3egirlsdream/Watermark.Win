@using Microsoft.AspNetCore.Components.Forms
@using Watermark.Win.Models
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations

<MudDialog>
    <DialogContent>

        <MudDropContainer T="IWMControl" @ref="_dropContainer" Items="@mContainers" Class="d-flex flex-row">
            <ChildContent>
                @foreach (var lv1Container in mCanvas.Children)
                {
                    <MudPaper Elevation="0" Width="224px" MinHeight="400px" Class="pa-4 ma-4 d-flex flex-column mud-background-gray rounded-lg">
                        <MudToolBar DisableGutters="true">
                            <MudText Typo="Typo.subtitle1"><b>容器 @mCanvas.Children.IndexOf(lv1Container)</b></MudText>
                            <MudSpacer />
                            <MudMenu Icon="@Icons.Material.Rounded.MoreHoriz" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" ListClass="pa-2 d-flex flex-column" PopoverClass="mud-elevation-25">
                                <MudButton Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Material.Outlined.Delete" OnClick="@( () => DeleteSection(lv1Container))">Delete Section</MudButton>
                                <MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Material.Rounded.Edit">Rename Section</MudButton>
                            </MudMenu>
                        </MudToolBar>
                        <MudDropZone T="WMContainer" Identifier="lv1Container" Class="mud-height-full" />
                        @if (false)
                        {
                            <MudPaper Elevation="25" Class="pa-2 rounded-lg">
                                <MudButton Size="Size.Small" Color="Color.Primary" FullWidth="true">Add Task</MudButton>
                            </MudPaper>
                        }
                        else
                        {
                            <MudButton StartIcon="@Icons.Material.Filled.Add" FullWidth="true" Class="rounded-lg py-2">Add Task</MudButton>
                        }
                    </MudPaper>
                }
            </ChildContent>
            <ItemRenderer>
                <MudPaper Elevation="25" Class="pa-4 rounded-lg my-3">@context.Percent</MudPaper>
                </ItemRenderer>
            </MudDropContainer>
        </DialogContent>
        <DialogActions>
            <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
        </DialogActions>
    </MudDialog>

    @code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }
    [Parameter]
    public WMCanvas mCanvas { get; set; }

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();

    void Test()
    {
        //MudDialog.Options;
    }

    List<WMContainer> mContainers;
    List<IWMControl> controls;

    protected override void OnInitialized()
    {
        mContainers = new List<WMContainer>(mCanvas.Children);
        mCanvas.Children.Select(c => c.Controls.Where(x => x is WMContainer) as List<WMContainer>).ToList().ForEach(z =>
        {
            if(z != null)
                mContainers.AddRange(z);
        });

        controls = new List<IWMControl>();
        mCanvas.Children.Select(c => c.Controls.Where(x => !(x is WMContainer))).ToList().ForEach(x =>
        {
            if (x != null)
            {
                controls.AddRange(x);
            }
        });
    }


    private MudDropContainer<IWMControl> _dropContainer;

    private bool _addSectionOpen;
    /* handling board events */
    private void TaskUpdated(MudItemDropInfo<KanbanTaskItem> info)
    {
        info.Item.Status = info.DropzoneIdentifier;
    }

    /* Setup for board  */
    private List<KanBanSections> _sections = new()
        {
            new KanBanSections("To Do", false, String.Empty),
            new KanBanSections("In Process", false, String.Empty),
            new KanBanSections("Done", false, String.Empty),
        };

    public class KanBanSections
    {
        public string Name { get; init; }
        public bool NewTaskOpen { get; set; }
        public string NewTaskName { get; set; }

        public KanBanSections(string name, bool newTaskOpen, string newTaskName)
        {
            Name = name;
            NewTaskOpen = newTaskOpen;
            NewTaskName = newTaskName;
        }
    }
    public class KanbanTaskItem
    {
        public string Name { get; init; }
        public string Status { get; set; }

        public KanbanTaskItem(string name, string status)
        {
            Name = name;
            Status = status;
        }
    }

    private List<KanbanTaskItem> _tasks = new()
        {
            new KanbanTaskItem("Write unit test", "To Do"),
            new KanbanTaskItem("Some docu stuff", "To Do"),
            new KanbanTaskItem("Walking the dog", "To Do"),
        };

    KanBanNewForm newSectionModel = new KanBanNewForm();

    public class KanBanNewForm
    {
        [Required]
        [StringLength(10, ErrorMessage = "Name length can't be more than 10.")]
        public string Name { get; set; }
    }

    private void OnValidSectionSubmit(EditContext context)
    {
        _sections.Add(new KanBanSections(newSectionModel.Name, false, String.Empty));
        newSectionModel.Name = string.Empty;
        _addSectionOpen = false;
    }

    private void OpenAddNewSection()
    {
        _addSectionOpen = true;
    }

    private void AddTask(KanBanSections section)
    {
        _tasks.Add(new KanbanTaskItem(section.NewTaskName, section.Name));
        section.NewTaskName = string.Empty;
        section.NewTaskOpen = false;
        _dropContainer.Refresh();
    }

    private void DeleteSection(WMContainer section)
    {
        // if (mCanvas.Children.Count == 1)
        // {
        //     _tasks.Clear();
        //     mCanvas.Children.Clear();
        // }
        // else
        // {
        //     int newIndex = mCanvas.Children.IndexOf(section) - 1;
        //     if (newIndex < 0)
        //     {
        //         newIndex = 0;
        //     }

        //     mCanvas.Children.Remove(section);

        //     var tasks = _tasks.Where(x => x.Status == section.Name);
        //     foreach (var item in tasks)
        //     {
        //         item.Status = mCanvas.Children[newIndex].Name;
        //     }
        // }
    }
}