
@using Watermark.Win.Models
@inject ISnackbar Snackbar

<MudDialog Options="DialogOptions" Style="width:400px;">
    <DialogContent>
        <MudForm>
            <MudTextField @bind-Value="UserName" T="string" Label="用户名" Required="true" RequiredError="用户名不能为空" />
            <MudTextField @bind-Value="Password" T="string" Label="密码" Required="true" RequiredError="密码不能为空" Class="mt-5" InputType="InputType.Password" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton FullWidth="true" Variant="Variant.Filled" OnClick="LoginOK">确定</MudButton>
    </DialogActions>
</MudDialog>




@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    DialogOptions DialogOptions { get; set; } = new DialogOptions() { MaxWidth = MaxWidth.Medium, NoHeader = true };
    string UserName { get; set; }
    string Password { get; set; }




    public async void LoginOK()
    {
        APIHelper helper = new APIHelper();
        var result = await helper.LoginIn(UserName, Password);
        Global.CurrentUser = new LoginChildModel
        {
            ID = result.data.data.ID,
            IMG = result.data.data.IMG,
            DISPLAY_NAME = result.data.data.DISPLAY_NAME,
            USER_NAME = result.data.data.USER_NAME
        };
        string message = "";
        Severity severity = Severity.Success;
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;

        if (result.success)
        {
            message = "登录成功";
            severity = Severity.Success;
            MudDialog.Close(true);
            StateHasChanged();
        }
        else
        {
            severity = Severity.Error;
            message = result.message?.content ?? result.data.Message;
        }

        Snackbar.Add(message, severity, config =>
        {
            config.ShowCloseIcon = false;
        });
    }
}
