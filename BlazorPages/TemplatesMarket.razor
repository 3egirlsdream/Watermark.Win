@using System.Diagnostics
@using Watermark.Win.Models
<MudDialog Style="width:80%; height:80%;overflow-y:hidden">
    <DialogContent>
        <div style="height:220px;width:100%;">
            <MudCarousel Class="mud-width-full" Style="height:200px;" ShowArrows="false" ShowBullets="true" EnableSwipeGesture="true" AutoCycle="true" TData="object">
                <MudCarouselItem Transition="Transition.Fade" Color="@Color.Primary">
                    <div class="d-flex" style="height:100%">
                        <MudIcon Class="mx-auto my-auto" Icon="@Icons.Custom.Brands.MudBlazor" Size="@Size.Large" />
                    </div>
                </MudCarouselItem>
                <MudCarouselItem Transition="Transition.Fade" Color="@Color.Secondary">
                    <div class="d-flex" style="height:100%">
                        <MudIcon Class="mx-auto my-auto" Icon="@Icons.Custom.Brands.MudBlazor" Size="@Size.Large" />
                    </div>
                </MudCarouselItem>
                <MudCarouselItem Transition="Transition.Fade">
                    <div class="d-flex" style="height:100%">
                        <MudIcon Class="mx-auto my-auto" Icon="@Icons.Custom.Brands.MudBlazor" Color="@Color.Primary" Size="@Size.Large" />
                    </div>
                </MudCarouselItem>
            </MudCarousel>
        </div>
        <MudGrid Spacing="2" Justify="Justify.FlexStart" Style="height:calc(80vh - 260px);overflow-y:auto;padding:5px;">
            @if (ZipedTemplates != null)
            {
                @foreach (var t in ZipedTemplates)
                {
                    <MudItem xs="4">
                        <MudCard>
                            <MudImage Style="width:100%" Height="200" Src="@t.Src" ObjectFit="ObjectFit.Contain"/>
                            <MudCardContent Style="height:80px;">
                                <MudText Typo="Typo.body2">@t.Desc</MudText>
                            </MudCardContent>
                            <MudCardActions Style="position:relative;">
                                @t.DownloadTimes<MudIcon Icon="@Icons.Material.Filled.Download" Color="Color.Error" Style="cursor:pointer;" />
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="position:absolute;right:10px">下载</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            }
        </MudGrid>
        <MudOverlay Visible="@loading" DarkBackground="false" Style="background:#e6e6e6" Absolute="false" ZIndex="9999">
            <MudStack Justify="Justify.Center">
                <MudProgressCircular Color="Color.Secondary" Indeterminate="true" Style="margin:auto" />
                <MudText Typo="Typo.subtitle1" Color="Color.Dark">
                    <b>正在加载模板...</b>
                </MudText>
            </MudStack>
        </MudOverlay>
    </DialogContent>
</MudDialog>


@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }
    [Inject]
    private IDialogService DialogService { get; set; }
    bool loading = false;
    List<ZipedTemplate> ZipedTemplates;

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        var helper = new APIHelper();
        ZipedTemplates = await helper.GetWatermarks(0, 10);
        var whelper = new WatermarkHelper();
        List<Task> tasks = new List<Task>();
        foreach (var t in ZipedTemplates)
        {
            var c = Task.Run(() =>
            {
                t.Src = whelper.Generation(t.WMCanvas, t);
                return t.Src;
            });

            tasks.Add(c);
        }
        await Task.WhenAll(tasks);
        loading = false;
    }
}